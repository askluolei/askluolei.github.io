<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Askluolei</title>
  
  <subtitle>个人的学习吐槽网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-24T12:35:45.226Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Luo lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最大子序和</title>
    <link href="http://yoursite.com/2019/12/24/leetcode/53/"/>
    <id>http://yoursite.com/2019/12/24/leetcode/53/</id>
    <published>2019-12-24T12:30:00.000Z</published>
    <updated>2019-12-24T12:35:45.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><em>示例:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>贪心算法</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 贪心算法，每步都选最大值</span></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">res := nums[<span class="number">0</span>]</span><br><span class="line">curMax := nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">curMax = max(nums[i], curMax + nums[i])</span><br><span class="line">res = max(res, curMax)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>其实这两个思路都是一样的，<br>就计算当前位置的最大累加值  对比 历史最大累加值</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="comment">// 利用 f(n) =  1:  nums[n]  条件 f(n-1)&lt;=0  2: f(n-1) + nums[n] </span></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">res := nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 将累加值存储在原数组</span></span><br><span class="line">nums[i] = nums[i<span class="number">-1</span>] + nums[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算最大值</span></span><br><span class="line">res = max(res, nums[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;示例:&lt;/em
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>旋转图像</title>
    <link href="http://yoursite.com/2019/12/18/leetcode/48/"/>
    <id>http://yoursite.com/2019/12/18/leetcode/48/</id>
    <published>2019-12-18T13:41:21.000Z</published>
    <updated>2019-12-18T14:15:41.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个 <code>n × n</code> 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p>说明：</p><p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要<em>使用</em>另一个矩阵来旋转图像。</p><p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>先矩阵转置，然后每行翻转。<br>时间复杂度 O（n*n）<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">n := <span class="built_in">len</span>(matrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先矩阵转置，就是沿着对角线互换</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i; j&lt;n;j++ &#123;</span><br><span class="line">tmp := matrix[i][j]</span><br><span class="line">matrix[i][j] = matrix[j][i]</span><br><span class="line">matrix[j][i] = tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后每行翻转</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;n;i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;n/<span class="number">2</span>;j++ &#123;</span><br><span class="line">tmp := matrix[i][j]</span><br><span class="line">matrix[i][j] = matrix[i][n-j<span class="number">-1</span>]</span><br><span class="line">matrix[i][n-j<span class="number">-1</span>] = tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>就是将每4个对应的元素顺时针旋转一下<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">n := <span class="built_in">len</span>(matrix)</span><br><span class="line"><span class="comment">// 很自然的想法，就是对应位置的 4个元素顺时针转了一圈。</span></span><br><span class="line"><span class="comment">// 可以以 n-4 的矩阵画一下，以 i=0,j=1 这个元素，来尝试一下下标变化</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;(n+<span class="number">1</span>)/<span class="number">2</span>;i++&#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;n/<span class="number">2</span>;j++&#123;</span><br><span class="line">tmp := matrix[i][j]</span><br><span class="line">matrix[i][j] = matrix[n<span class="number">-1</span>-j][i]</span><br><span class="line">matrix[n<span class="number">-1</span>-j][i]=matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j]</span><br><span class="line">matrix[n<span class="number">-1</span>-i][n<span class="number">-1</span>-j]=matrix[j][n<span class="number">-1</span>-i]</span><br><span class="line">matrix[j][n<span class="number">-1</span>-i]=tmp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个 &lt;code&gt;n × n&lt;/code&gt; 的二维矩阵表示一个图像。&lt;/p&gt;
&lt;p&gt;将图像顺时针旋转 90 度。&lt;/p&gt;
&lt;p&gt;说明：&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>跳跃游戏 II</title>
    <link href="http://yoursite.com/2019/12/11/leetcode/45/"/>
    <id>http://yoursite.com/2019/12/11/leetcode/45/</id>
    <published>2019-12-11T13:48:24.000Z</published>
    <updated>2019-12-11T13:52:04.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p><em>示例:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><br><em>说明:</em></p><p>假设你总是可以到达数组的最后一个位置。</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>思路就是 当前坐标，一步最大跨越到 end。<br>然后在 遍历 end 计算下一个最大跨步是多少。依次往后</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> length &lt;=<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">end := nums[<span class="number">0</span>];</span><br><span class="line">maxPosition := end;</span><br><span class="line">steps := <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 简单点说 坐标 end 代表这步要跨越到哪里，直到遍历到 end，一直更新 maxPosition，</span></span><br><span class="line"><span class="comment">// 当达到 end 的时候，当前 maxPosition 就是下次跨越到的地方了，同样的逻辑，在本次步长内，继续寻找下次达到的地方</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length- <span class="number">1</span>; i++&#123;</span><br><span class="line"><span class="comment">//找能跳的最远的</span></span><br><span class="line">maxPosition = max(maxPosition, nums[i] + i);</span><br><span class="line"><span class="keyword">if</span> i == end &#123; <span class="comment">//遇到边界，就更新边界，并且步数加一</span></span><br><span class="line">end = maxPosition;</span><br><span class="line">steps++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">steps++</span><br><span class="line"><span class="keyword">return</span> steps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a&gt;b&#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>从后往前推</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">position := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">steps := <span class="number">0</span></span><br><span class="line"><span class="comment">// 思路是 倒着来，寻找能够到达目的点 position 的最左坐标，然后 position 定位刚刚寻找的点，继续寻找，直到0</span></span><br><span class="line"><span class="keyword">for</span> ;position!=<span class="number">0</span>; &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;position;i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] &gt;= position - i &#123;</span><br><span class="line">position = i</span><br><span class="line">steps++</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个非负整数数组，你最初位于数组的第一个位置。&lt;/p&gt;
&lt;p&gt;数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;/p&gt;
&lt;p&gt;你的目标
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>接雨水</title>
    <link href="http://yoursite.com/2019/12/08/leetcode/42/"/>
    <id>http://yoursite.com/2019/12/08/leetcode/42/</id>
    <published>2019-12-08T03:32:59.000Z</published>
    <updated>2019-12-09T14:14:33.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。<br><img src="/2019/12/08/leetcode/42/42.png" class="" title="This is an example image"><br>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</p><p><em>示例</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出: 6</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>思路是依次判断 每个坐标 i 上，能装多少水<br>判断的思路是  计算 坐标 i 左右两边的最大值 maxLeft maxRight ，根据破桶原理，选择其中较小的 min，<br>如果 min &gt; height[i] 那么 min - height[i] 就是该坐标能够装的水</p><p>时间复杂度为 O(n*n)</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line">length := <span class="built_in">len</span>(height)</span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 思路是依次判断 每个坐标 i 上，能装多少水</span></span><br><span class="line"><span class="comment">// 判断的思路是  计算 坐标 i 左右两边的最大值 maxLeft maxRight ，根据破桶原理，选择其中较小的 min，</span></span><br><span class="line"><span class="comment">// 如果 min &gt; height[i] 那么 min - height[i] 就是该坐标能够装的水</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;length<span class="number">-1</span>;i++ &#123;</span><br><span class="line">maxLeft := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j:=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--&#123;</span><br><span class="line"><span class="keyword">if</span> height[j] &gt; maxLeft &#123;</span><br><span class="line">maxLeft = height[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">maxRight := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>;j&lt;length;j++ &#123;</span><br><span class="line"><span class="keyword">if</span> height[j] &gt; maxRight &#123;</span><br><span class="line">maxRight = height[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">min := min(maxLeft, maxRight)</span><br><span class="line"><span class="keyword">if</span> min &gt; height[i] &#123;</span><br><span class="line">res = res + (min - height[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>动态规划<br>还是上面的思路，只不过不需要每次都重新计算 <code>maxLeft</code> <code>maxRight</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxLeft[i] = max(maxLeft[i-1], height[i-1])</span><br><span class="line">maxRight[i] = max(maxRight[i+1], height[i+1])</span><br></pre></td></tr></table></figure><br>我们可以先计算出来 maxLeftArr maxRightArr</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line">length := <span class="built_in">len</span>(height)</span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">maxLeftArr := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line">maxRightArr := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;length<span class="number">-1</span>;i++&#123;</span><br><span class="line">maxLeftArr[i] = max(maxLeftArr[i<span class="number">-1</span>], height[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i:= length<span class="number">-2</span>; i&gt;<span class="number">0</span>;i-- &#123;</span><br><span class="line">maxRightArr[i] = max(maxRightArr[i+<span class="number">1</span>], height[i+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;length<span class="number">-1</span>;i++ &#123;</span><br><span class="line">min := min(maxLeftArr[i], maxRightArr[i])</span><br><span class="line"><span class="keyword">if</span> min &gt; height[i] &#123;</span><br><span class="line">res = res + (min - height[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><p>双指针，从左右两边，找最高都<br>height[left-1], height[right+1]<br>哪边更高，就计算旁边坐标的灌水<br><code>if height[left-1] &lt; height[right+1]</code><br>就计算 <code>height[left]</code> 的，否则计算 <code>height[right]</code> 的</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line">length := <span class="built_in">len</span>(height)</span><br><span class="line"><span class="keyword">if</span> length &lt;= <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maxLeft, maxRight <span class="keyword">int</span></span><br><span class="line">left := <span class="number">1</span></span><br><span class="line">right := length<span class="number">-2</span></span><br><span class="line"><span class="keyword">for</span> ;left &lt;= right; &#123;</span><br><span class="line"><span class="keyword">if</span> height[left<span class="number">-1</span>] &lt; height[right+<span class="number">1</span>] &#123;</span><br><span class="line">maxLeft = max(height[left<span class="number">-1</span>], maxLeft)</span><br><span class="line"><span class="keyword">if</span> maxLeft &gt; height[left] &#123;</span><br><span class="line">res = res + (maxLeft - height[left])</span><br><span class="line">&#125;</span><br><span class="line">left++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxRight = max(maxRight, height[right+<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> maxRight &gt; height[right] &#123;</span><br><span class="line">res = res + (maxRight - height[right])</span><br><span class="line">&#125;</span><br><span class="line">right--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。&lt;br&gt;&lt;img src=&quot;/2019/1
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>缺失的第一个正数</title>
    <link href="http://yoursite.com/2019/12/04/leetcode/41/"/>
    <id>http://yoursite.com/2019/12/04/leetcode/41/</id>
    <published>2019-12-04T13:58:25.000Z</published>
    <updated>2019-12-04T14:28:44.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,0]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,4,-1,1]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><br><em>示例 3:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,8,9,11,12]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><br><em>说明:</em><br>你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>不考虑空间限制，使用 <code>map</code> 记录出现的数字<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 空间换时间，暴力解法</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">m[num] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">n := <span class="built_in">len</span>(nums) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;n;i++ &#123;</span><br><span class="line">_, ok := m[i]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>还是上面的思路，不过，依据结果肯定在 <code>(0,n]</code> 之间,因此可以使用一个数组来记录<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用数组 结果只可能是 (0, len+1] 中间，因此，构建一个数组，坐标元素相同</span></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">m := <span class="built_in">make</span>([]<span class="keyword">int</span>, length + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> num&gt;<span class="number">0</span> &amp;&amp; num &lt;= length &#123;</span><br><span class="line">m[num] = num</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不相同的，代表不存在，直接取结果了</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;=length;i++ &#123;</span><br><span class="line"><span class="keyword">if</span> m[i] != i &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><p>上面两个解法空间都不满足要求，题目要求常量级别空间，基本就断定，只能在原数组都基础上修改来。还是利用结果在 <code>(0,n]</code>, 剔除掉不在范围内都。都使用 <code>1</code> 来填充,上面思路2，我们使用 <code>a[i] = i + 1</code> 来表示出现来数字 <code>i</code>,现在，使用取负数，来表示出现过 <code>i</code>.<br>为啥取负数，因为，当我们有 <code>a = nums[i]</code> 在范围 <code>(0,n]</code> ， 我们需要记录 <code>nums[a]</code> .如何记录，上面思路2，是等于 i + 1.但是，这样就修改来原有都数字来，我们需要保留这个数字，因此取负数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">firstMissingPositive</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">has1 := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;length;i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i]==<span class="number">1</span> &#123;</span><br><span class="line">has1++</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> has1 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> length == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; length;i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] &lt;= <span class="number">0</span> || nums[i] &gt; length &#123;</span><br><span class="line">nums[i]=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;length;i++&#123;</span><br><span class="line">a := abs(nums[i])</span><br><span class="line"><span class="keyword">if</span> a == length &#123;</span><br><span class="line">nums[<span class="number">0</span>] = - abs(nums[<span class="number">0</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">nums[a] = - abs(nums[a])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;length;i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> length + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;示例 1:&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>组合总和II</title>
    <link href="http://yoursite.com/2019/12/02/leetcode/40/"/>
    <id>http://yoursite.com/2019/12/02/leetcode/40/</id>
    <published>2019-12-02T14:14:16.000Z</published>
    <updated>2019-12-02T14:17:34.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个数组  <code>candidates</code>  和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>和之前的不同前提<br>1。 数组可能有重复数字<br>2。 不能重复使用数组里面的数字</p><p>还是之前的思路。之前的解法<br>不同点在于，每次都是从 i+1 开始</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 和之前的不同前提</span></span><br><span class="line"><span class="comment">// 1。 数组可能有重复数字</span></span><br><span class="line"><span class="comment">// 2。 不能重复使用数组里面的数字</span></span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(candidates)</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// n*logn</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line">findByCanditates2(<span class="number">0</span>, target, candidates, []<span class="keyword">int</span>&#123;&#125;, &amp;res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findByCanditates2</span><span class="params">(i, target <span class="keyword">int</span>, nums []<span class="keyword">int</span>, candidates []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">*res = <span class="built_in">append</span>(*res, candidates)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(nums) || target &lt; nums[i] &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 问题在这里，如果直接对 candidates 进行修改，这里是 go 这里是引用传参，会导致其他地方都会有问题</span></span><br><span class="line"><span class="comment">// 因此，新建一个 slice 然后 copy，但是，copy 对时候，注意 newCandidate 对初始长度与 candidates 一样，否则多出来对会为0，如果少了，它也不自动扩容</span></span><br><span class="line"><span class="comment">// 因此这里使用 make 创建，而不是初始定义，初始定义为 nil，copy 没作用</span></span><br><span class="line"><span class="keyword">var</span> newCandidate = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(candidates))</span><br><span class="line"><span class="built_in">copy</span>(newCandidate, candidates)</span><br><span class="line">  newCandidate = <span class="built_in">append</span>(newCandidate, nums[i])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不同点1:  i+1 开始</span></span><br><span class="line">findByCanditates2(i+<span class="number">1</span>, target - nums[i], nums, newCandidate, res)</span><br><span class="line"></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">  <span class="keyword">var</span> j = i + <span class="number">1</span></span><br><span class="line">  <span class="comment">// 不同点2: 跳过同样的数字</span></span><br><span class="line"><span class="keyword">for</span> ;j &lt; length &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]; j++ &#123;&#125;</span><br><span class="line">findByCanditates2(j, target, nums, candidates, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个数组  &lt;code&gt;candidates&lt;/code&gt;  和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>组合总和</title>
    <link href="http://yoursite.com/2019/12/01/leetcode/39/"/>
    <id>http://yoursite.com/2019/12/01/leetcode/39/</id>
    <published>2019-12-01T14:33:35.000Z</published>
    <updated>2019-12-01T14:41:18.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。<br><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,6,7], target = 7,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>先排序，用来剔除重复的结果<br>譬如 <code>candidates = [2, 3, 7], target = 18</code><br>思路就是从 <code>18 - 2</code> <code>18 - 3</code> <code>18 - 7</code> ，然后递归调用。  </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 可以重复使用列表里面的数</span></span><br><span class="line"><span class="comment">// 结果不能重复</span></span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(candidates)</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// n*logn</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line">findByCanditates(<span class="number">0</span>, target, candidates, []<span class="keyword">int</span>&#123;&#125;, &amp;res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findByCanditates</span><span class="params">(i, target <span class="keyword">int</span>, nums []<span class="keyword">int</span>, candidates []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">  <span class="comment">// 结果在这里</span></span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">*res = <span class="built_in">append</span>(*res, candidates)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 截止情况</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="built_in">len</span>(nums) || target &lt; nums[i] &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 问题在这里，如果直接对 candidates 进行修改，这里是 go 这里是引用传参，会导致其他地方都会有问题</span></span><br><span class="line"><span class="comment">// 因此，新建一个 slice 然后 copy，但是，copy 对时候，注意 newCandidate 对初始长度与 candidates 一样，否则多出来对会为0，如果少了，它也不自动扩容</span></span><br><span class="line"><span class="comment">// 因此这里使用 make 创建，而不是初始定义，初始定义为 nil，copy 没作用</span></span><br><span class="line"><span class="keyword">var</span> newCandidate = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(candidates))</span><br><span class="line"><span class="built_in">copy</span>(newCandidate, candidates)</span><br><span class="line">  newCandidate = <span class="built_in">append</span>(newCandidate, nums[i])</span><br><span class="line">  <span class="comment">// 使用递归调用，来构建树，这里代表深度，尝试先用小的数累加，然后看看有没有结果</span></span><br><span class="line">  findByCanditates(i, target - nums[i], nums, newCandidate, res)</span><br><span class="line">  <span class="comment">// 这里是广度，target 没变化，i + 1，代表，尝试往后面看，有没有用最少的数量组成结果</span></span><br><span class="line">findByCanditates(i+<span class="number">1</span>, target, nums, candidates, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索插入位置</title>
    <link href="http://yoursite.com/2019/11/30/leetcode/35/"/>
    <id>http://yoursite.com/2019/11/30/leetcode/35/</id>
    <published>2019-11-30T04:24:50.000Z</published>
    <updated>2019-11-30T16:52:42.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><br><em>示例 3:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br><em>示例 4:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>爆破了，就是找第一个 <code>&gt; target</code> 的位置 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 暴力</span></span><br><span class="line">l := <span class="built_in">len</span>(nums)</span><br><span class="line">res := l</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; l; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] &gt;= target &#123;</span><br><span class="line">res = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>二分，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line">l := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="comment">//res := l</span></span><br><span class="line">left := <span class="number">0</span></span><br><span class="line">right := l - <span class="number">1</span></span><br><span class="line"><span class="comment">// 问题在于，还需要找到插入的位置，target 也可能在数组中不存在</span></span><br><span class="line"><span class="keyword">for</span> ; left &lt;= right; &#123;</span><br><span class="line">mid := left + (right - left) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="http://yoursite.com/2019/11/28/leetcode/34/"/>
    <id>http://yoursite.com/2019/11/28/leetcode/34/</id>
    <published>2019-11-28T13:11:56.000Z</published>
    <updated>2019-11-28T13:44:28.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p><p>你的算法时间复杂度必须是 <code>O(log n)</code> 级别。</p><p>如果数组中不存在目标值，返回 <code>[-1, -1]</code>。</p><p><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出: [3,4]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出: [-1,-1]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>log 级别，需要使用二分法</p><p>自己的思路是，先二分找到 target，然后从该 index，左右扩展，寻找边界坐标<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res []<span class="keyword">int</span></span><br><span class="line">res = <span class="built_in">append</span>(res, <span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line">left := <span class="number">0</span>;</span><br><span class="line">right := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; left &lt;= right; &#123;</span><br><span class="line">mid := left + (right - left) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> left = mid; left &gt;= <span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]; left--&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> right = mid; right &lt;= <span class="built_in">len</span> - <span class="number">2</span> &amp;&amp; nums[right] == nums[right+<span class="number">1</span>]; right++&#123;&#125;</span><br><span class="line">res[<span class="number">0</span>] = left</span><br><span class="line">res[<span class="number">1</span>] = right</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个按照升序排列的整数数组 &lt;code&gt;nums&lt;/code&gt;，和一个目标值 &lt;code&gt;target&lt;/code&gt;。找出给定目标值在数
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索旋转排序数组</title>
    <link href="http://yoursite.com/2019/11/26/leetcode/33/"/>
    <id>http://yoursite.com/2019/11/26/leetcode/33/</id>
    <published>2019-11-26T13:13:08.000Z</published>
    <updated>2019-11-26T13:15:30.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 <code>[0,1,2,4,5,6,7]</code> 可能变为 <code>[4,5,6,7,0,1,2]</code> )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>O(log n) 肯定是需要二分法的,思路直接看注释了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// logn 肯定是需要二分法了</span></span><br><span class="line">result := <span class="number">-1</span></span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="comment">// 头尾指针</span></span><br><span class="line"><span class="keyword">for</span> ; start &lt;= end; &#123;</span><br><span class="line"><span class="comment">// 取中间的数</span></span><br><span class="line">mid := start + (end - start) / <span class="number">2</span></span><br><span class="line"><span class="comment">// 刚好等于，那就返回结果</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始 比 mid 小， start - mid 是一个升序</span></span><br><span class="line"><span class="keyword">if</span> nums[start] &lt;= nums[mid] &#123;</span><br><span class="line"><span class="comment">// 如果 target 在 start 和 mid 中间，那么就在 start，mid-1 里面找</span></span><br><span class="line"><span class="keyword">if</span> target &gt;= nums[start] &amp;&amp; target &lt; nums[mid] &#123;</span><br><span class="line">end = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则 就是在 mid + 1， end</span></span><br><span class="line">start = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 那么  mid - end 是升序，类似的处理</span></span><br><span class="line"><span class="keyword">if</span> target &gt; nums[mid] &amp;&amp; target &lt;= nums[end] &#123;</span><br><span class="line">start = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">end = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>jvm-垃圾搜集器</title>
    <link href="http://yoursite.com/2019/11/26/jvm-%E5%9E%83%E5%9C%BE%E6%90%9C%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2019/11/26/jvm-垃圾搜集器/</id>
    <published>2019-11-25T16:08:15.000Z</published>
    <updated>2019-11-25T16:08:15.315Z</updated>
    
    <content type="html"><![CDATA[<p>垃圾回收需要考虑三件事  </p><ol><li>哪些内存需要回收</li><li>什么时候回收</li><li>如何回收</li></ol><h2 id="对象是否已死"><a href="#对象是否已死" class="headerlink" title="对象是否已死"></a>对象是否已死</h2><ol><li>引用计数</li><li>可达性分析</li></ol><p>引用类型  </p><ul><li>强引用  常用的，new </li><li>软引用  将要发生内存溢出，会回收软引用</li><li>弱引用  下一次 gc 到来的时候回收</li><li>虚引用  不知道啥时候回收，只是为了获取通知</li></ul><p>类卸载条件</p><ul><li>类的所有实例已被回收</li><li>加载该类的 ClassLoader 已经被回收</li><li>类的 Class 对象没有被其他地方引用</li></ul><h2 id="垃圾搜集算法"><a href="#垃圾搜集算法" class="headerlink" title="垃圾搜集算法"></a>垃圾搜集算法</h2><ol><li>标记清除 Mark-Sweep</li><li>复制算法</li><li>标记整理 Mark-Compact</li><li><p>分代收集算法 </p></li><li><p>枚举根节点<br>从 GCRoot 找引用链，不在链路上的就是垃圾了</p></li><li>安全点<br>SafePoint，在特定的位置，记录引用，就是安全点</li><li>安全区域<br>线程没在执行的情况，不会引起引用发生变化的区域，是安全区域</li></ol><h2 id="垃圾搜集器"><a href="#垃圾搜集器" class="headerlink" title="垃圾搜集器"></a>垃圾搜集器</h2><ul><li>Young: Serial，ParNew，Parallel Scavenge，   G1</li><li>Old: CMS, Serial Old, Parallel Old     G1</li></ul><ol><li>Serial<br>最基本的垃圾搜集器，是单线程的搜集器，在垃圾搜集的时候，需要停止其他工作线程</li><li>ParNew<br>是 Serial 的多线程版本</li><li>Parallel Scavenge<br>关注点在达到可控制的吞吐量。<br>上面三个都是复制算法</li><li>Seril Old<br>1 的老年代版本</li><li>Parallel Old<br>Parallel Scavenge 的老年代版本，多线程和标记整理算法</li><li>CMS<br>多线程+标记清除，工作分为 4 步<ol><li>初始标记   stop the world   速度很快</li><li>并发标记</li><li>重新标记   stop the world</li><li>并发清除<br>缺点：</li><li>会占用用户线程 CPU 资源</li><li>无法清除浮动垃圾 并发清理阶段产生的垃圾</li><li>会有空间碎片，如果过多，可能导致 Full GC</li></ol></li><li>G1<br>并发，分代搜集，空间整合，可预测的停顿<br>基本和上面的不一样了，将真个内存区域划分为 Region ，Region 可以用来作为新生代，老年代，不需要空间连续<br>步骤<ol><li>初始标记  stop the world  时间很短</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol></li></ol><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h2><ol><li>优先在 Eden 分配</li><li>当 Eden 没有足够的空间进行分配，将发起一次 Minor GC</li><li>大对象直接进老年代，长字符串，数组</li><li>长期存活多对象进老年代，对象在 Eden 出生经过一次 Minor GC，进入 Survivor 区，年龄为1，没熬过一次 Minor GC 年龄 + 1，到 15（默认），进老年代，例外：如果相同年龄占 survivor 一半以上，年龄大于等于这个年龄的，直接进老年代</li></ol><p><em>空间分配担保</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在发生 Minor GC 之前，检测</span><br><span class="line">if 老年代 最大连续可用空间 &gt; 新生代所有对象空间</span><br><span class="line">  Minor GC</span><br><span class="line">else if 允许担保是吧 &amp;&amp; 老年代 最大连续可用空间 &gt; 历次晋升到老年代的空间</span><br><span class="line">  Minor GC</span><br><span class="line">else </span><br><span class="line">  Full GC</span><br></pre></td></tr></table></figure><br>空间分配担保，主要是为了减少 <code>Full GC</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;垃圾回收需要考虑三件事  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哪些内存需要回收&lt;/li&gt;
&lt;li&gt;什么时候回收&lt;/li&gt;
&lt;li&gt;如何回收&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;对象是否已死&quot;&gt;&lt;a href=&quot;#对象是否已死&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>下一个排列</title>
    <link href="http://yoursite.com/2019/11/24/leetcode/31/"/>
    <id>http://yoursite.com/2019/11/24/leetcode/31/</id>
    <published>2019-11-24T15:46:39.000Z</published>
    <updated>2019-11-24T16:08:24.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须<em>原地</em>修改，只允许使用额外常数空间。</p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>首先要理解题目意思，什么是下一个序列，最小序列，最大序列<br><code>1,2,3</code>  可以看做数字 <code>123</code> 那么使用 <code>1,2,3</code> 数字组合的下一个序列是 <code>1,3,2</code> 其实就是 <code>1,2,3</code> 三个数字排列组合后，当前排列的更大的一个排列。   什么时候最小呢？升序的时候，就是 <code>123</code> 什么时候最大呢 ？ 降序的时候 <code>321</code> 。<br>来一个更普通的例子 <code>1,5,8,4,7,5,3,1</code> ,它的下一个序列是什么呢？ <code>1,5,8,5,1,3,4,7</code><br>我们直接看换的思路是什么？首先降序排列是最大的，同样适用于局部，这里的分界是 <code>4,7</code>,我们只要将 <code>4</code> 替换为 <code>5</code>(刚好比 <code>4</code> 大的) 后面的变成升序（最小）就行了。<br>具体到思路  </p><ol><li>找到 <code>a[i] &lt;= a[i + 1]</code></li><li>在 <code>i</code> 的右侧，找到刚好大于 <code>a[i]</code> 的数 <code>a[j]</code></li><li>交互 <code>a[i], a[j]</code></li><li>从 <code>i + 1</code> 开始，后面的数变成降序</li></ol><p>大体思路就是上面的，当然，基于这个思路还可以有一些细节优化</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">i := <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> ; i &gt;= <span class="number">0</span> &amp;&amp; nums[i + <span class="number">1</span>] &lt;= nums[i]; i--&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &lt;= nums[i]; j--&#123;&#125;</span><br><span class="line">swap(nums, i, j)</span><br><span class="line">&#125;</span><br><span class="line">reverse(nums, i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">i := start</span><br><span class="line">j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; j ; &#123;</span><br><span class="line">swap(nums, i, j)</span><br><span class="line">i++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(nums []<span class="keyword">int</span>, i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">temp := nums[i]</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">nums[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。&lt;/p&gt;
&lt;p&gt;如果不存在下一个更大的排列，则将数字重新
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>jvm-自动内存管理</title>
    <link href="http://yoursite.com/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/23/jvm-自动内存管理/</id>
    <published>2019-11-23T09:32:11.000Z</published>
    <updated>2019-11-25T15:07:36.319Z</updated>
    
    <content type="html"><![CDATA[<p><code>深入理解 Java 虚拟机</code> 读书笔记 </p><h2 id="运行时数据区域划分"><a href="#运行时数据区域划分" class="headerlink" title="运行时数据区域划分"></a>运行时数据区域划分</h2><ol><li>方法区（元空间）<br>线程共享区域，主要存储已被虚拟机加载的类信息，常量，静态变量，即时编译后的产物，也叫非堆（Non Heap）<br>运行时常量池。</li><li>虚拟机栈<br>线程私有的，生命周期和线程相同，每个方法执行的同时都会创建一个栈帧（Stack Frame），用来存局部变量表，操作数栈，动态链接，方法出口等信息，<br>局部变量表存放编译期可知的各种基本数据类型，每个局部变量空间（slot）为 32 位，64 为长度的类型占用两个 slot</li><li>本地方法栈<br>为 native 方法服务的</li><li>堆<br>最大的一块内存区域，也是线程共享的内存区域，几乎所有的对象都在这里分配内存。<br>这里也是垃圾回收的主要区域，因为分代搜集算法，所以堆还可细分为 新生代 和 老年代，新生代再细致一点有 eden，from survivor， to survivor，</li><li>程序计数器<br>可以看作是当前线程所执行的字节码行号指示器，线程私有的</li><li>直接内存<br>DirectByteBuffer 引用一块堆外内存</li></ol><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>普通对象创建（不包含数组，<code>Class</code> 对象）  </p><ol><li>类加载过程<br>在常量池中是否定位一个类的符号引用<br>类是否已被加载，解析，初始化</li><li>新生对象分配内存<br>对象所需的内存大小在类加载完成后就已经确定？<br>分配内存的方式<ul><li>指针碰撞： 假设内存规整，由于对象所需内存大小已知，只需要记录边界指针，移动响应的大小就行类</li><li>空闲列表： 内存不规整，那么就需要记录哪些空间是可用的，需要维护一个列表<br>内存是否规整由采用的垃圾回收器决定。 Serial ， ParNew 等垃圾搜集完毕，会整理内存，因此是 指针碰撞<br>CMS 基于标记-清除，没有内存整理，因此是空闲列表<br>创建对象是非常频繁的操作，直接指针修改位置，是非线程安全的，有两种解决方式<ul><li>CAS 失败重试，并发常用的模式</li><li>TLAB 本地线程分配缓冲，每个线程先预分配一小块内存，用完了，才需要同步锁定<br>内存分配完毕后，会初始化零值，应该可以理解为所有位全部置 0</li></ul></li></ul></li><li>对象设置<br>例如，这个对象是哪个类的实例。如何找到类的元数据，对象哈希码，对象的 GC 分代年龄。这些信息放对象头中</li><li>init 方法<br>从虚拟机角度，上面3个步骤后，对象就已经创建完了，但是还没执行 init 方法，也就是构造方法，当然，字段的初值也是在 init 方法里面执行</li></ol><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>可以分为 3 个区域：对象头，实例数据，对齐填充 </p><p><em>对象头</em><br>包含两部分数据</p><ol><li>对象自身运行时数据：哈希码，GC 分代年龄，锁状态标志，线程持有的锁，偏向线程id，偏向时间戳等，在 64 为虚拟机中占 64 位，也就是常说的 Mark Word</li><li>类型指针：指向类的元数据指针，并不是所有虚拟机实现都必须在对象上保留类型指针</li><li>如果是数组，那么还有数组长度</li></ol><p>32位 对象头内存布局<br><img src="/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/JVM32-obj-header.png" class="" title="JVM 32位对象头内存布局"></p><p>64位 对象头内存布局<br><img src="/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/JVM64-obj-header.png" class="" title="JVM 64位对象头内存布局"></p><p><em>实例数据</em><br>各种类型的字段内容，包括父类继承的和自己的</p><p><em>填充*</em><br>对象内存起始地址必须是 8 字节的整数倍，如果没对齐，就有对齐填充了</p><h2 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h2><p>Java 程序需要使用栈上的 reference 数据来操作具体的堆上的具体对象。<br>reference 指向一个的对象的引用，有两种访问方式</p><ol><li>句柄：堆中单独划分一块内存，用来存句柄池，reference 指向句柄地址，句柄包含对象实例数据，类型数据的具体地址</li><li>直接指针: reference 直接指向对象地址</li></ol><p>句柄的好处是 referenc 存储稳定，对象移动（GC 影响）只修改 句柄到对象的指向。<br>直接指针的好处就是速度快。<br><code>Hotspot</code> 采用的是 直接指针</p><h2 id="内存溢出问题-OutOfMemoryError"><a href="#内存溢出问题-OutOfMemoryError" class="headerlink" title="内存溢出问题 OutOfMemoryError"></a>内存溢出问题 OutOfMemoryError</h2><p><em>堆内存溢出</em><br>堆内存大小设置以及内存溢出时候 dump，这几个 JVM 参数是常用的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置最小堆内存</span><br><span class="line">-Xms20m</span><br><span class="line">设置最大堆内存</span><br><span class="line">-Xmx20m</span><br><span class="line">发生内存溢出的时候 dump，通常 JVM 用 -XX:+/- 来代表 true/false</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure></p><p>有来 dump 文件，可以使用 MAT 进行分析。查看哪个对象占用空间大，也可以查看泄露对象到 GC root 的引用链，分析为什么没有释放内存  </p><p><em>虚拟机栈和本地方法栈</em><br>栈空间大小设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xss</span><br><span class="line">-Xsx</span><br></pre></td></tr></table></figure></p><p>栈空间，如果请求深度过大，会是 <code>StackOverflowError</code> , 也是栈溢出，通常在递归调用的时候容易出现<br>当虚拟机在扩展栈空间的时候，无法申请到足够的内存空间，则抛出 <code>OutOfMemoryError</code> </p><p><em>方法区/元空间</em><br>这里导致溢出，通常是动态代理，或者字节码技术生成 class 过多导致的</p><p><em>本机直接内存溢出*</em><br>由于 nio 可以申请使用堆外内存。<br>堆外内存限制可以使用参 <code>-XX: MaxDirectMemorySize</code> 指定<br>由直接内存导致的内存溢出，一个明显的特征是 Heap Dump 文件中看不到明显的异常，Dump 文件也很小</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;深入理解 Java 虚拟机&lt;/code&gt; 读书笔记 &lt;/p&gt;
&lt;h2 id=&quot;运行时数据区域划分&quot;&gt;&lt;a href=&quot;#运行时数据区域划分&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区域划分&quot;&gt;&lt;/a&gt;运行时数据区域划分&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>移除元素</title>
    <link href="http://yoursite.com/2019/11/23/leetcode/27/"/>
    <id>http://yoursite.com/2019/11/23/leetcode/27/</id>
    <published>2019-11-23T08:34:06.000Z</published>
    <updated>2019-11-23T08:39:43.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>首先，理解一下题目，最后想要的结果，是数组中 <code>!= val</code> 的数量，并且，这些数需要被挪到数组前面，不管顺序<br>过程条件,额外空间为 <code>O(1)</code>,那就是不能使用额外数组空间了 </p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>快慢指针，慢指针用来记录最后结果存储的下标，快指针遍历原数组<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 快慢双指针，i 为填充数组的坐标，j 遍历原数组</span></span><br><span class="line"><span class="comment">// 当不等于 val 当时候，保留， == val 当时候 j++ 了后面保留在 i 的位置</span></span><br><span class="line"><span class="comment">// 这里问题在于，如果 nums 全不同，实际上，会有很多无效的赋值操作</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j &lt; <span class="built_in">len</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>将 <code>== val</code> 的数丢到数组后面就行了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 理解题目，其实就是将 != val 的数挪到前面去，那我们把 == val 的丢到数组最后就行了</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> ; i &lt; n; &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">nums[i] = nums[n - <span class="number">1</span>]</span><br><span class="line">n--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个数组 &lt;code&gt;nums&lt;/code&gt; 和一个值 &lt;code&gt;val&lt;/code&gt;，你需要原地移除所有数值等于 &lt;code&gt;val
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>线程池常见问题记录</title>
    <link href="http://yoursite.com/2019/11/22/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/11/22/线程池常见问题记录/</id>
    <published>2019-11-22T04:03:26.000Z</published>
    <updated>2019-11-22T04:03:26.998Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常见的关于线程池的问题，参考其他看过的资料，总结为自己的答案</p><h2 id="为什么不推荐使用-Executors-创建线程池"><a href="#为什么不推荐使用-Executors-创建线程池" class="headerlink" title="为什么不推荐使用 Executors 创建线程池"></a>为什么不推荐使用 Executors 创建线程池</h2><p><code>Executors</code> 内部使用的是 <code>ThreadPoolExecutor</code>，如果转为直接使用 <code>ThreadPoolExecutor</code>, 那么需要使用者了解内部的原理，至少知道几个参数是干嘛的。如果使用 <code>Executors</code> 创建，可能不太清楚内部的规则，而导致资源耗尽的异常。</p><h2 id="线程池的参数有哪些"><a href="#线程池的参数有哪些" class="headerlink" title="线程池的参数有哪些"></a>线程池的参数有哪些</h2><p>这里，其实就是问的 <code>ThreadPoolExecutor</code> 构造需要哪些参数，当然，<code>ThreadPoolExecutor</code> 内部也有几个非构造传入的参数，其中重点参数有</p><ol><li>corePoolSize 核心线程数</li><li>maximumPoolSize 最大线程数</li><li>keepAliveTime 超过核心线程数，最大空闲存活时间</li><li>unit 上面的单位</li><li>workQueue 工作队列</li><li>threadFactory 线程工程，这里注意修改线程名和是否后台线程</li><li>handler  拒绝策略 <code>RejectedExecutionHandler</code> 接口的实现</li></ol><p>除了上面的构造参数，还有一个 <code>allowCoreThreadTimeOut</code> 是否允许释放核心线程，正常情况下，线程池会维持至少 core 个核心线程，如果配置了这个参数，那么核心线程也会使用 <code>keepAliveTime</code> 的配置来释放自己</p><h2 id="线程池的任务提交流程"><a href="#线程池的任务提交流程" class="headerlink" title="线程池的任务提交流程"></a>线程池的任务提交流程</h2><ol><li>如果线程池中线程的数量 小于 core ，那么创建新的任务线程</li><li>如果已经到达了 core 线程，那么丢任务队列 workQueue</li><li>如果队列满了，继续新建线程数量 小于 maximumPoolSize （对单个任务来说，只是建一个线程，当然，也可能建不了，因为 core == maximumPoolSize）</li><li>如果线程数量达到 maximumPoolSize ，那么使用拒绝策略 <code>RejectedExecutionHandler</code></li></ol><h2 id="线程池的关闭方法是上面，对正在运行的线程有怎样的影响"><a href="#线程池的关闭方法是上面，对正在运行的线程有怎样的影响" class="headerlink" title="线程池的关闭方法是上面，对正在运行的线程有怎样的影响"></a>线程池的关闭方法是上面，对正在运行的线程有怎样的影响</h2><p>关闭方法有两个</p><ol><li>shutdown<br>设置为 <code>SHUTDOWN</code> 状态，不再接受新的任务，已有的任务继续执行</li><li>shutdownNow<br>设置为 <code>STOP</code> 状态，不再接受新的任务，尝试停止所有正在执行的任务（设置中断），返回还未执行的任务队列</li></ol><h2 id="线程池有哪些拒绝策略"><a href="#线程池有哪些拒绝策略" class="headerlink" title="线程池有哪些拒绝策略"></a>线程池有哪些拒绝策略</h2><p>拒绝策略是实现 <code>RejectedExecutionHandler</code> 接口。内部有以下几种实现  </p><ol><li>AbortPolicy 抛 <code>RejectedExecutionException</code> 异常， 这个是默认的</li><li>DiscardPolicy  啥事也不做，默默的丢到任务</li><li>DiscardOldestPolicy  丢到队列头部的任务，也就是最老（早）的任务</li><li>CallerRunsPolicy 直接在调用线程执行任务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些常见的关于线程池的问题，参考其他看过的资料，总结为自己的答案&lt;/p&gt;
&lt;h2 id=&quot;为什么不推荐使用-Executors-创建线程池&quot;&gt;&lt;a href=&quot;#为什么不推荐使用-Executors-创建线程池&quot; class=&quot;headerlink&quot; title=&quot;为什
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>centos 安装 ES</title>
    <link href="http://yoursite.com/2019/11/22/centos-%E5%AE%89%E8%A3%85-ES/"/>
    <id>http://yoursite.com/2019/11/22/centos-安装-ES/</id>
    <published>2019-11-21T16:47:23.000Z</published>
    <updated>2019-11-21T16:47:23.174Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下 <code>centos7</code> 下的 <code>ES</code> 安装<br>首先需要安装 <code>jdk</code><br><code>centos7</code> 里面默认安装了 <code>openjdk</code> 替换为 <code>hotspot</code> 的 <code>jdk</code><br>首先卸载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo rpm --nodeps $(rpm -qa | grep java)</span><br><span class="line">sudo rpm --nodeps $(rpm -qa | grep jdk)</span><br></pre></td></tr></table></figure></p><p>然后使用一下命令，没有 <code>java</code> 信息，就说明卸载干净了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep java</span><br><span class="line">rpm -qa|grep jdk</span><br></pre></td></tr></table></figure></p><p>下载 <code>rpm</code> 的 <code>jdk</code> 包，可以去华为的镜像站去下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.rpm</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">然后安装  </span><br><span class="line">```sh</span><br><span class="line">sudo rpm -ivh jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure></p><p>验证是否安装成功<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>现在，需要下载 <code>ES</code> 了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/elasticsearch/6.8.5/elasticsearch-6.8.5.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf elasticsearch-6.8.5.tar.gz</span><br></pre></td></tr></table></figure></p><p>到 bin 目录启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> elasticsearch-6.8.5/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></p><p>可以看到启动日志，当然，也可能启动失败，<code>ES</code> 不能用 <code>root</code> 用户启动，因此，需要添加一个普通用户<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd elsearch</span><br><span class="line">useradd elsearch -g elsearch -p elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后需要修改 <code>elasticsearch</code> 文件夹的所属用户,注意执行命令的目录，在解压的 <code>elasticsearch-6.8.5</code> 父目录<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R elsearch:elsearch elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后切换到 <code>elsearch</code> 用户再启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su elsearch</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></p><p>想后台启动，使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure></p><p>验证 <code>ES</code> 启动是否成功，访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://localhost:9200?pretty'</span></span><br></pre></td></tr></table></figure></p><p>看到返回结果，就是启动成功了  </p><p>目前 <code>ES</code> 只能本机访问，如果需要外网访问，需要修改配置  <code>config/elasticsearch.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><br>或者使用指定的 <code>ip</code></p><p>然后启动。<br>可能会报错，因为 ES 这时候开启了启动检测。一些系统参数可能需要修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下 &lt;code&gt;centos7&lt;/code&gt; 下的 &lt;code&gt;ES&lt;/code&gt; 安装&lt;br&gt;首先需要安装 &lt;code&gt;jdk&lt;/code&gt;&lt;br&gt;&lt;code&gt;centos7&lt;/code&gt; 里面默认安装了 &lt;code&gt;openjdk&lt;/code&gt; 替换为 &lt;code
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/11/21/leetcode/26/"/>
    <id>http://yoursite.com/2019/11/21/leetcode/26/</id>
    <published>2019-11-21T13:37:13.000Z</published>
    <updated>2019-11-21T13:39:36.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>简单问题，就是相同的元素往前堆叠就可以了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i - <span class="number">1</span>] &lt; nums[i] &#123;</span><br><span class="line">nums[index] = nums[i - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums[index] = nums[<span class="built_in">len</span> - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">nums = nums[:index]</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>四数之和</title>
    <link href="http://yoursite.com/2019/11/20/leetcode/18/"/>
    <id>http://yoursite.com/2019/11/20/leetcode/18/</id>
    <published>2019-11-20T14:50:51.000Z</published>
    <updated>2019-11-20T15:50:39.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code> 和一个目标值 <code>target</code>，判断 nums 中是否存在四个元素 <code>a，b，c</code> 和 <code>d</code> ，使得 <code>a + b + c + d</code> 的值与 <code>target</code> 相等？找出所有满足条件且不重复的四元组。<br><em>注意：</em><br>答案中不可以包含重复的四元组。</p><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>暴力解法<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums);</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;i!=<span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span> - <span class="number">3</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>];i++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>;j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;j!=i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>];j++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k := j+<span class="number">1</span>; k &lt; <span class="built_in">len</span> <span class="number">-1</span>;k++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; k != j+<span class="number">1</span> &amp;&amp; k &lt; <span class="built_in">len</span> - <span class="number">1</span>&amp;&amp; nums[k]==nums[k<span class="number">-1</span>];k++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> l := k+<span class="number">1</span>; l &lt; <span class="built_in">len</span>; l++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k] + nums[l]</span><br><span class="line"><span class="keyword">if</span> sum == target &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], nums[k], nums[l]&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>基于上面的，结合 <code>a + b = target</code> 的双指针思路<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 暴力解法扩展,内部使用 a + b = target 的双向指针解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; i != <span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span><span class="number">-3</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]; i++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; j != i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]; j++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex := j + <span class="number">1</span></span><br><span class="line">lastIndex := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line">expect := target - nums[i] - nums[j]</span><br><span class="line"><span class="keyword">for</span> firstIndex &lt; lastIndex &#123;</span><br><span class="line">first := nums[firstIndex]</span><br><span class="line">last := nums[lastIndex]</span><br><span class="line">sum := first + last</span><br><span class="line"><span class="keyword">if</span> sum &gt; expect &#123;</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; expect &#123;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], first, last&#125;)</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/co
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="http://yoursite.com/2019/11/19/leetcode/16/"/>
    <id>http://yoursite.com/2019/11/19/leetcode/16/</id>
    <published>2019-11-19T14:19:52.000Z</published>
    <updated>2019-11-19T15:36:31.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包括 <code>n</code> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>最简单的肯定还是暴力解法，时间复杂度是 O(n <em> n </em> n)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span> - <span class="number">1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> k := j + <span class="number">1</span>; k &lt; <span class="built_in">len</span>; k++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k]</span><br><span class="line">abs := abs(sum, target)</span><br><span class="line"><span class="keyword">if</span> abs == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">          result = sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b - a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>还是像之前的题目，一样，先排序 O(n<em>logn) ，然后固定前面一位，然后前后指针寻找 O(n </em> n) ,总共 O(n * n),当然，里面还有一些细节可以优化。<br>譬如说，类似二分之类的，目前还是一位一位寻找的<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; first &lt; last; &#123;</span><br><span class="line">sum := nums[i] + nums[first] + nums[last]</span><br><span class="line"><span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">abs := target - sum</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">abs := sum - target</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包括 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和 一个目标值 &lt;code&gt;target&lt;/c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://yoursite.com/2019/11/18/leetcode/15/"/>
    <id>http://yoursite.com/2019/11/18/leetcode/15/</id>
    <published>2019-11-18T14:08:25.000Z</published>
    <updated>2019-11-18T14:13:38.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？找出所有满足条件且不重复的三元组。<br><em>注意：</em>答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>暴力解法，3遍 for 循环，但是，不能包含重复的三元组这个条件不好满足<br>继续想，之前又 a + b = target ，那么，我们固定，其实，这里也是满足的 a + b = -c 的模式<br>重复问题，只能用 hash 解决了，但是，我们可以通过先排序，然后去掉同样的元素就可以了，排序的时间复杂度为 O(nlogn) ,是可以接受的。 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 全部大于0 或者小于0，就没有结果</span></span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span> || nums[<span class="built_in">len</span> - <span class="number">1</span>] &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 第一个数  &gt; 0 那就没有了</span></span><br><span class="line"><span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样的数，不需要重复找</span></span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定第一位数，然后前后分别找，类似 寻找数组里面 a + b = target 一样</span></span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ;first &lt; last &amp;&amp; nums[last] &gt;= <span class="number">0</span>; &#123;</span><br><span class="line">exp := nums[first] + nums[last] + nums[i]</span><br><span class="line"><span class="keyword">if</span> exp &lt; <span class="number">0</span> &#123;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exp &gt; <span class="number">0</span>&#123;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">line := []<span class="keyword">int</span>&#123;nums[i], nums[first], nums[last]&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, line)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里剔除重复的</span></span><br><span class="line"><span class="keyword">for</span> first++ ; first &lt; last &amp;&amp; nums[first - <span class="number">1</span>] == nums[first]; first++&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> last-- ; first &lt; last &amp;&amp; nums[last + <span class="number">1</span>] == nums[last]; last--&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt;，判断 &lt;code&gt;nums&lt;/code&gt; 中是
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
