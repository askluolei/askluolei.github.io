<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Askluolei</title>
  
  <subtitle>个人的学习吐槽网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-21T13:39:36.828Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Luo lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/11/21/leetcode/26/"/>
    <id>http://yoursite.com/2019/11/21/leetcode/26/</id>
    <published>2019-11-21T13:37:13.000Z</published>
    <updated>2019-11-21T13:39:36.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>简单问题，就是相同的元素往前堆叠就可以了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i - <span class="number">1</span>] &lt; nums[i] &#123;</span><br><span class="line">nums[index] = nums[i - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums[index] = nums[<span class="built_in">len</span> - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">nums = nums[:index]</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>四数之和</title>
    <link href="http://yoursite.com/2019/11/20/leetcode/18/"/>
    <id>http://yoursite.com/2019/11/20/leetcode/18/</id>
    <published>2019-11-20T14:50:51.000Z</published>
    <updated>2019-11-20T15:50:39.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code> 和一个目标值 <code>target</code>，判断 nums 中是否存在四个元素 <code>a，b，c</code> 和 <code>d</code> ，使得 <code>a + b + c + d</code> 的值与 <code>target</code> 相等？找出所有满足条件且不重复的四元组。<br><em>注意：</em><br>答案中不可以包含重复的四元组。</p><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>暴力解法<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums);</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;i!=<span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span> - <span class="number">3</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>];i++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>;j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;j!=i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>];j++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k := j+<span class="number">1</span>; k &lt; <span class="built_in">len</span> <span class="number">-1</span>;k++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; k != j+<span class="number">1</span> &amp;&amp; k &lt; <span class="built_in">len</span> - <span class="number">1</span>&amp;&amp; nums[k]==nums[k<span class="number">-1</span>];k++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> l := k+<span class="number">1</span>; l &lt; <span class="built_in">len</span>; l++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k] + nums[l]</span><br><span class="line"><span class="keyword">if</span> sum == target &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], nums[k], nums[l]&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>基于上面的，结合 <code>a + b = target</code> 的双指针思路<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 暴力解法扩展,内部使用 a + b = target 的双向指针解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; i != <span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span><span class="number">-3</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]; i++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; j != i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]; j++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex := j + <span class="number">1</span></span><br><span class="line">lastIndex := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line">expect := target - nums[i] - nums[j]</span><br><span class="line"><span class="keyword">for</span> firstIndex &lt; lastIndex &#123;</span><br><span class="line">first := nums[firstIndex]</span><br><span class="line">last := nums[lastIndex]</span><br><span class="line">sum := first + last</span><br><span class="line"><span class="keyword">if</span> sum &gt; expect &#123;</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; expect &#123;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], first, last&#125;)</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/co
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="http://yoursite.com/2019/11/19/leetcode/16/"/>
    <id>http://yoursite.com/2019/11/19/leetcode/16/</id>
    <published>2019-11-19T14:19:52.000Z</published>
    <updated>2019-11-19T15:36:31.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包括 <code>n</code> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>最简单的肯定还是暴力解法，时间复杂度是 O(n <em> n </em> n)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span> - <span class="number">1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> k := j + <span class="number">1</span>; k &lt; <span class="built_in">len</span>; k++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k]</span><br><span class="line">abs := abs(sum, target)</span><br><span class="line"><span class="keyword">if</span> abs == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">          result = sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b - a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>还是像之前的题目，一样，先排序 O(n<em>logn) ，然后固定前面一位，然后前后指针寻找 O(n </em> n) ,总共 O(n * n),当然，里面还有一些细节可以优化。<br>譬如说，类似二分之类的，目前还是一位一位寻找的<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; first &lt; last; &#123;</span><br><span class="line">sum := nums[i] + nums[first] + nums[last]</span><br><span class="line"><span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">abs := target - sum</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">abs := sum - target</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包括 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和 一个目标值 &lt;code&gt;target&lt;/c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://yoursite.com/2019/11/18/leetcode/15/"/>
    <id>http://yoursite.com/2019/11/18/leetcode/15/</id>
    <published>2019-11-18T14:08:25.000Z</published>
    <updated>2019-11-18T14:13:38.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？找出所有满足条件且不重复的三元组。<br><em>注意：</em>答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>暴力解法，3遍 for 循环，但是，不能包含重复的三元组这个条件不好满足<br>继续想，之前又 a + b = target ，那么，我们固定，其实，这里也是满足的 a + b = -c 的模式<br>重复问题，只能用 hash 解决了，但是，我们可以通过先排序，然后去掉同样的元素就可以了，排序的时间复杂度为 O(nlogn) ,是可以接受的。 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 全部大于0 或者小于0，就没有结果</span></span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span> || nums[<span class="built_in">len</span> - <span class="number">1</span>] &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 第一个数  &gt; 0 那就没有了</span></span><br><span class="line"><span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样的数，不需要重复找</span></span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定第一位数，然后前后分别找，类似 寻找数组里面 a + b = target 一样</span></span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ;first &lt; last &amp;&amp; nums[last] &gt;= <span class="number">0</span>; &#123;</span><br><span class="line">exp := nums[first] + nums[last] + nums[i]</span><br><span class="line"><span class="keyword">if</span> exp &lt; <span class="number">0</span> &#123;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exp &gt; <span class="number">0</span>&#123;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">line := []<span class="keyword">int</span>&#123;nums[i], nums[first], nums[last]&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, line)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里剔除重复的</span></span><br><span class="line"><span class="keyword">for</span> first++ ; first &lt; last &amp;&amp; nums[first - <span class="number">1</span>] == nums[first]; first++&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> last-- ; first &lt; last &amp;&amp; nums[last + <span class="number">1</span>] == nums[last]; last--&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt;，判断 &lt;code&gt;nums&lt;/code&gt; 中是
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="http://yoursite.com/2019/11/17/leetcode/11/"/>
    <id>http://yoursite.com/2019/11/17/leetcode/11/</id>
    <published>2019-11-17T12:01:57.000Z</published>
    <updated>2019-11-17T12:16:52.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>说明： 你不能倾斜容器，且 n 的值至少为 2。</p><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>暴力解法<br>没啥思路可言，直接穷举了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(height)</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">first := height[i]</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>; j++ &#123;</span><br><span class="line">second := height[j]</span><br><span class="line">h := min(first, second)</span><br><span class="line">w := j - i</span><br><span class="line">m := h * w</span><br><span class="line"><span class="keyword">if</span> m &gt; result &#123;</span><br><span class="line">result = m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><p>从两侧开始，这样 width 最大，选择一个 height 最大的就行了。然后依次遍历，谁小，就从哪边开始减小下标</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 从两侧开始，这样 width 最大，选择一个 height 最大的就行了。然后依次遍历，谁小，就从哪边开始减小下标</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">j := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ;i &lt; j; &#123;</span><br><span class="line">left := height[i]</span><br><span class="line">right := height[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> left &lt;= right &#123;</span><br><span class="line">m = left * (j - i)</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m = right * (j - i)</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> m &gt; result &#123;</span><br><span class="line">result = m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="http://yoursite.com/2019/11/16/leetcode/4/"/>
    <id>http://yoursite.com/2019/11/16/leetcode/4/</id>
    <published>2019-11-16T15:53:47.000Z</published>
    <updated>2019-11-17T06:40:56.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定两个大小为 m 和 n 的 <em>有序</em> 数组 <code>nums1</code> 和 <code>nums2</code>。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 <code>O(log(m + n))</code>。  </p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>先不管时间复杂度，先求出结果，最简单的就是先排好序，然后取中间值，由于是两个有序数组，排序只需要 <code>O(m + n)</code> </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">// 简单的方法，合并两个有序数组，取中位数，不过不满足题目要求，时间复杂度 O（m + n）</span></span><br><span class="line">mergeArr := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> ;i &lt; <span class="built_in">len</span>(nums1) &amp;&amp; j &lt; <span class="built_in">len</span>(nums2); &#123;</span><br><span class="line">first := nums1[i]</span><br><span class="line">second := nums2[j]</span><br><span class="line"><span class="keyword">if</span> first &lt; second &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, first)</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> first &gt; second &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, second)</span><br><span class="line">j++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, first)</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, second)</span><br><span class="line">i++</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(nums1); i++ &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, nums1[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; j &lt; <span class="built_in">len</span>(nums2); j++ &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, nums2[j])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(mergeArr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">mid := mergeArr[<span class="built_in">len</span>/<span class="number">2</span> - <span class="number">1</span>] + mergeArr[<span class="built_in">len</span>/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(mid) / <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(mergeArr[<span class="built_in">len</span> / <span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>是基于思路1的扩展，我们的目的是找到中位数，也就是第 k 位，不需要排序<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">// 基于上面都方法，我们不需要合并，只是找出中位数就可以了，时间复杂度 O（m + n）</span></span><br><span class="line">aLen := <span class="built_in">len</span>(nums1)</span><br><span class="line">bLen := <span class="built_in">len</span>(nums2)</span><br><span class="line"><span class="built_in">len</span> := aLen + bLen</span><br><span class="line"><span class="keyword">var</span> i, j, left, right <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt;= <span class="built_in">len</span> / <span class="number">2</span>; index++ &#123;</span><br><span class="line">left = right</span><br><span class="line"><span class="keyword">if</span> i &lt; aLen &amp;&amp; (j &gt;= bLen || nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">right = nums1[i]</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = nums2[j]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &amp; <span class="number">1</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(left) + <span class="keyword">float64</span>(right)) / <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面两个看的题解。。</p><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><p>上面两个的数据复杂度都不满足题目要求。<br>看到 <code>log</code> 都时间复杂度，应该就要想到 <code>二分法</code>,还是上面都思路，思路2，是一位一位排除的。<br>如果我们取第 K 位，那么，我们可以在两个数组里面各自取 k/2位，比较大小后，就可以直接排除掉 k/2了<br>当然，里面有特例情况，k/2 长度超过了数组 len，那么就取最后一位就行了<br>如果其中一个数组空了，那么也好处理,直接取剩余数组的中位数就行了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="comment">// 上面两个解法都不满足题目要求，log（m + n） 基本确定需要二分法</span></span><br><span class="line"><span class="comment">// 根据上一个思路，我们是要在排序好第数组里面，找到第 k 个数，如果是一个数组，那么好说，直接二分查找</span></span><br><span class="line"><span class="comment">// 但是上面是两个数组，我们也可以借鉴一些思路</span></span><br><span class="line"><span class="comment">// 譬如，我们要找第 k 个数，那么，同时在两个数组找 k/2 ，如果这个长度大于数组长度，取最后一个</span></span><br><span class="line"><span class="comment">// 比较两个数组里面找的值，谁小，就相当于把 前面的都剔除掉了</span></span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(nums1)</span><br><span class="line">m := <span class="built_in">len</span>(nums2)</span><br><span class="line">left := (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">right := (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">v1 := findMid(&amp;nums1, <span class="number">0</span>, n - <span class="number">1</span>, &amp;nums2, <span class="number">0</span>, m - <span class="number">1</span>, left)</span><br><span class="line">v2 := findMid(&amp;nums1, <span class="number">0</span>, n - <span class="number">1</span>, &amp;nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(v1) + <span class="keyword">float64</span>(v2)) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMid</span><span class="params">(nums1 *[]<span class="keyword">int</span>, start1, end1 <span class="keyword">int</span>, nums2 *[]<span class="keyword">int</span>, start2, end2 <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">len1 := end1 - start1 + <span class="number">1</span>;</span><br><span class="line">len2 := end2 - start2 + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 确保 nums 先遍历完</span></span><br><span class="line"><span class="keyword">if</span> len1 &gt; len2 &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums2, start2, end2, nums1, start1, end1, k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 num1 遍历完，其实就是在 nums2 里面找 第 k 个数</span></span><br><span class="line"><span class="keyword">if</span> len1 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (*nums2)[start2 + k - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找 第 1 个</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> min((*nums1)[start1], (*nums2)[start2])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取每个数组第 k/2 位数，如果 len 小于 k/2 那就是最后一个数</span></span><br><span class="line">i := start1 + min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">j := start2 + min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除掉小的</span></span><br><span class="line"><span class="keyword">if</span> (*nums1)[i] &gt; (*nums2)[j] &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h3><p>什么是中位数，就是一个集合里面，比它小的数量和比它大的数量相同。<br>其实刚看到这题，最想当然的想法就是，取两个数组的中位数，然后平均。。。<br>这想法当然是有问题的，但是思路是木有问题的。首先，满足两边的数量相同，但是没满足大小的比较<br>用图形化的想法，我们将两个数组各自劈成两半，左边是一组，右边是一组，始终保证这个条件下，想办法满足大小条件。<br>怎么满足呢？假设 数组1 的分割位是 i ，数组2 的分割位是 j，只要 i+1 ，j-1 ，这样就可以满足数量不变，去尝试满足大小条件<br>反过来 i-1， j+1 。那么怎么去满足大小关系？左边的最大值 <code>&lt;=</code> 右边的最小值就行了<br>假设数组1 为 A ，数组2 为 B ，那么，只涉及到4位数的比较 <code>A[i - 1], A[i], B[j - 1], B[j]</code><br>又因为 A，B 是有序的，我们只需要比较 <code>A[i-1] &lt;= B[j]  B[j-1] &lt;= A[i]</code> 就行了.<br>然后就是边界条件，具体的可以去看题解<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">m := <span class="built_in">len</span>(nums1)</span><br><span class="line">n := <span class="built_in">len</span>(nums2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证 m &lt;= n</span></span><br><span class="line"><span class="keyword">if</span> m &gt; n &#123;</span><br><span class="line"><span class="keyword">return</span> findMedianSortedArrays(nums2, nums1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iMin := <span class="number">0</span></span><br><span class="line">iMax := m</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ;iMin &lt;= iMax; &#123;</span><br><span class="line">i := (iMin + iMax) / <span class="number">2</span></span><br><span class="line">j := (m + n + <span class="number">1</span>)/ <span class="number">2</span> - i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j != <span class="number">0</span> &amp;&amp; i != m &amp;&amp; nums2[j<span class="number">-1</span>] &gt; nums1[i] &#123; <span class="comment">// i 需要增大</span></span><br><span class="line">iMin = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; j != n &amp;&amp; nums1[i<span class="number">-1</span>] &gt; nums2[j] &#123; <span class="comment">// i 需要减小</span></span><br><span class="line">iMax = i - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 达到要求，并且将边界条件列出来单独考虑</span></span><br><span class="line">maxLeft := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">maxLeft = nums2[j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">maxLeft = nums1[i<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxLeft = max(nums1[i<span class="number">-1</span>], nums2[j<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奇数的话，就不需要考虑右半部分了</span></span><br><span class="line"><span class="keyword">if</span> (m + n) % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(maxLeft)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">minRight := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == m &#123;</span><br><span class="line">minRight = nums2[j]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> j == n &#123;</span><br><span class="line">minRight = nums1[i]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">minRight = min(nums1[i], nums2[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(maxLeft) + <span class="keyword">float64</span>(minRight)) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定两个大小为 m 和 n 的 &lt;em&gt;有序&lt;/em&gt; 数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>sentinel 学习-下</title>
    <link href="http://yoursite.com/2019/11/14/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8B/"/>
    <id>http://yoursite.com/2019/11/14/sentinel-学习-下/</id>
    <published>2019-11-14T14:13:34.000Z</published>
    <updated>2019-11-14T14:21:53.848Z</updated>
    
    <content type="html"><![CDATA[<p>上篇主要学习了怎么用 <code>sentinel</code><br>这篇主要简单的进入源码瞅瞅 <code>sentinel</code> 的结构  </p><p>上篇中，可以看到，限流操作的基本代码结构为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ContextUtil.enter(target, origin);</span><br><span class="line">  entry = SphU.entry(resourceName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">   <span class="comment">// 限流处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">      entry.exit();</span><br><span class="line">  &#125;</span><br><span class="line">  ContextUtil.exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只不过，在使用的时候，基于 <code>aop</code> 获取拦截器，屏蔽掉类似这样的模板代码<br>那么，这段代码里面到底发生了什么呢？  </p><p>先看整个调用图  </p><img src="/2019/11/14/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8B/sentinel.svg" class="" title="This is an example image"><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><p>这里面需要关注的几个类或接口</p><ol><li>Context</li><li>Node</li><li>Entry</li><li>ProcessorSlotChain</li><li>ProcessorSlot</li></ol><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>每次调用 <code>entry</code> 获取资源<br>首先获取 <code>Context</code>，这是一个 <code>ThreadLocal</code> 变量，线程绑定变量</p><p>包含以下信息</p><ol><li>上下文名称 <code>name</code></li><li>当前调用树的入口节点  <code>entranceNode</code></li><li>当前处理的 <code>Entry</code></li><li>来源信息 <code>origin</code> 通常跨越系统调用才有</li><li>异步表示 <code>async</code> </li></ol><p>一般，可以通过 <code>ContextUtil</code> 来设置 <code>contextName</code> 和 <code>origin</code><br>如果没，则使用默认的上下文  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Context context = ContextUtil.getContext();</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> NullContext) &#123;</span><br><span class="line">    <span class="comment">// The &#123;@link NullContext&#125; indicates that the amount of context has exceeded the threshold,</span></span><br><span class="line">    <span class="comment">// so here init the entry only. No rule checking will be done.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CtEntry(resourceWrapper, <span class="keyword">null</span>, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Using default context.</span></span><br><span class="line">    context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个资源可以对应不同的上下文，以此来区分不同的场景，这样，不同场景的调用可以独立统计<br>每个 <code>contextName</code> 会生成一个 <code>EntranceNode</code> 挂在 <code>Constants.ROOT.addChild(node);</code> 子节点</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>节点，是内部的统计单元，根据在内部的作用，有 <code>ClusterNode</code> <code>EntranceNode</code> <code>DefaultNode</code>     </p><ol><li><code>EntranceNode</code>  是入口节点，通常是外部入口，譬如上面的，每个 contextName 对应的就是入口节点</li><li><code>ClusterNode</code>  集群节点，其实算资源的汇总统计节点，上面说个，每个资源，根据 contextName 会独立统计，就是对应下面的 <code>DefaultNode</code>,每个资源的汇总统计，就是这个节点</li><li><code>DefaultNode</code> 默认节点，上面说了</li></ol><p>节点的统计信息将会用于后面的限流规则<br>里面的统计是基于滑动窗口的，实现类为 <code>LeapArray</code><br>这是一个抽象的实现，实现滑动窗口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeapArray</span><span class="params">(<span class="keyword">int</span> sampleCount, <span class="keyword">int</span> intervalInMs)</span> </span>&#123;</span><br><span class="line">    AssertUtil.isTrue(sampleCount &gt; <span class="number">0</span>, <span class="string">"bucket count is invalid: "</span> + sampleCount);</span><br><span class="line">    AssertUtil.isTrue(intervalInMs &gt; <span class="number">0</span>, <span class="string">"total time interval of the sliding window should be positive"</span>);</span><br><span class="line">    AssertUtil.isTrue(intervalInMs % sampleCount == <span class="number">0</span>, <span class="string">"time span needs to be evenly divided"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.windowLengthInMs = intervalInMs / sampleCount;</span><br><span class="line">    <span class="keyword">this</span>.intervalInMs = intervalInMs;</span><br><span class="line">    <span class="keyword">this</span>.sampleCount = sampleCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.array = <span class="keyword">new</span> AtomicReferenceArray&lt;&gt;(sampleCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>intervalInMs 代表每个窗口时间<br>sampleCount  代表将窗口时间划分为多少分，越多越平滑，性能也越差</p><p><code>sentinel</code> 内部，秒级窗口,默认是 2 1000<br>也就是内部将1s 划分为 2 个  500 ms  统计    </p><p>具体实现有 <code>BucketLeapArray</code> <code>OccupiableBucketLeapArray</code>    </p><p><code>BucketLeapArray</code>  为普通实现,不支持预占资源<br><code>OccupiableBucketLeapArray</code>  这个在内部维护一个 <code>FutureBucketLeapArray</code> 用来记录未来资源使用情况，来允许预占资源</p><h2 id="ProcessorSlotChain-ProcessorSlot"><a href="#ProcessorSlotChain-ProcessorSlot" class="headerlink" title="ProcessorSlotChain ProcessorSlot"></a>ProcessorSlotChain ProcessorSlot</h2><p>处理链 和 处理插槽可以一起看，所有规则都是对应处理插槽处理的。使用 <code>SPI</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SlotChainBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build the processor slot chain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a processor slot that chain some slots together</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ProcessorSlotChain <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过实现上面的接口，来构建处理链<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSlotChainBuilder</span> <span class="keyword">implements</span> <span class="title">SlotChainBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessorSlotChain <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessorSlotChain chain = <span class="keyword">new</span> DefaultProcessorSlotChain();</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> NodeSelectorSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> ClusterBuilderSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> LogSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> StatisticSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> AuthoritySlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> SystemSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> FlowSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> DegradeSlot());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认的实现，这里的 <code>Slot</code> 是限流的规则处理  </p><h3 id="NodeSelectorSlot"><a href="#NodeSelectorSlot" class="headerlink" title="NodeSelectorSlot"></a>NodeSelectorSlot</h3><p>这个插槽记录调用链，设置当前的 node<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 记录统计信息，因此需要缓存</span></span><br><span class="line"> DefaultNode node = map.get(context.getName());</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            node = map.get(context.getName());</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">                node = <span class="keyword">new</span> DefaultNode(resourceWrapper, <span class="keyword">null</span>);</span><br><span class="line">                HashMap&lt;String, DefaultNode&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;String, DefaultNode&gt;(map.size());</span><br><span class="line">                cacheMap.putAll(map);</span><br><span class="line">                cacheMap.put(context.getName(), node);</span><br><span class="line">                map = cacheMap;</span><br><span class="line">                <span class="comment">// 构建调用树</span></span><br><span class="line">                <span class="comment">// Build invocation tree</span></span><br><span class="line">                ((DefaultNode) context.getLastNode()).addChild(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置当前节点</span></span><br><span class="line">    context.setCurNode(node);</span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br></pre></td></tr></table></figure></p><h3 id="ClusterBuilderSlot"><a href="#ClusterBuilderSlot" class="headerlink" title="ClusterBuilderSlot"></a>ClusterBuilderSlot</h3><p>构建 <code>ClusterNode</code> 这里每个资源对应一个，可以看到这里就是一个对象<br>这里是本资源的统计汇总<br>然后根据 <code>origin</code> 构建 <code>OriginNode</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create the cluster node.</span></span><br><span class="line">            clusterNode = <span class="keyword">new</span> ClusterNode(resourceWrapper.getName(), resourceWrapper.getResourceType());</span><br><span class="line">            HashMap&lt;ResourceWrapper, ClusterNode&gt; newMap = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max(clusterNodeMap.size(), <span class="number">16</span>));</span><br><span class="line">            newMap.putAll(clusterNodeMap);</span><br><span class="line">            newMap.put(node.getId(), clusterNode);</span><br><span class="line"></span><br><span class="line">            clusterNodeMap = newMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">node.setClusterNode(clusterNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * if context origin is set, we should get or create a new &#123;@link Node&#125; of</span></span><br><span class="line"><span class="comment">    * the specific origin.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(context.getOrigin())) &#123;</span><br><span class="line">    Node originNode = node.getClusterNode().getOrCreateOriginNode(context.getOrigin());</span><br><span class="line">    context.getCurEntry().setOriginNode(originNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br></pre></td></tr></table></figure></p><h3 id="StatisticSlot"><a href="#StatisticSlot" class="headerlink" title="StatisticSlot"></a>StatisticSlot</h3><p><code>LogSlot</code> 就是记录日志的.<br><code>StatisticSlot</code> 是记录统计信息，供后面的规则做决策<br>主要记录通过资源的 <code>succ</code> <code>threadNum</code> <code>blocked</code> 等信息<br>这些信息是在 <code>node</code> 处理</p><p>同时会触发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessorSlotEntryCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPass</span><span class="params">(Context context, ResourceWrapper resourceWrapper, T param, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBlocked</span><span class="params">(BlockException ex, Context context, ResourceWrapper resourceWrapper, T param, <span class="keyword">int</span> count, Object... args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回调，可以通过 <code>StatisticSlotCallbackRegistry</code> 注册 </p><h3 id="限流插槽"><a href="#限流插槽" class="headerlink" title="限流插槽"></a>限流插槽</h3><ol><li>AuthoritySlot<br>对应 <code>AuthorityRule</code> 处理黑白名单</li><li>SystemSlot<br>对应 <code>SystemRule</code> ,根据系统整体性能指标 cpu 线程 等限流</li><li>FlowSlot<br>对应 <code>FlowRule</code>,很多限流规则，处理策略，后面细看</li><li>DegradeSlot<br>对应 <code>DegradeRule</code>,这里是熔断规则，满足条件，断开一段时间，然后再次开启</li></ol><p>上面 <code>FlowSlot</code> 是复杂点，可以集群限流  </p><h3 id="FlowSlot"><a href="#FlowSlot" class="headerlink" title="FlowSlot"></a>FlowSlot</h3><p>可以根据 <code>FlowRule</code> 里面的 <code>clusterMode</code> 来判断是本地限流还是集群限流<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPassCheck</span><span class="params">(<span class="comment">/*@NonNull*/</span> FlowRule rule, Context context, DefaultNode node, <span class="keyword">int</span> acquireCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">boolean</span> prioritized)</span> </span>&#123;</span><br><span class="line">    String limitApp = rule.getLimitApp();</span><br><span class="line">    <span class="keyword">if</span> (limitApp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 集群限流</span></span><br><span class="line">    <span class="keyword">if</span> (rule.isClusterMode()) &#123;</span><br><span class="line">        <span class="keyword">return</span> passClusterCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本地限流</span></span><br><span class="line">    <span class="keyword">return</span> passLocalCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里先只看本地检查<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">passLocalCheck</span><span class="params">(FlowRule rule, Context context, DefaultNode node, <span class="keyword">int</span> acquireCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">boolean</span> prioritized)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 选择使用哪个 Node 里面的统计信息进行决策</span></span><br><span class="line">    <span class="comment">// 之前说过了，有 Cluster 资源总的统计 Origin 根据来源统计 </span></span><br><span class="line">    <span class="comment">// 使用其他相关资源的 Cluster ,或者 根据</span></span><br><span class="line">    Node selectedNode = selectNodeByRequesterAndStrategy(rule, context, node);</span><br><span class="line">    <span class="keyword">if</span> (selectedNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 然后使用限流器决策，这里的限流器又有多个选择</span></span><br><span class="line">    <span class="keyword">return</span> rule.getRater().canPass(selectedNode, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个的 <code>getRater()</code> 返回的是 <code>TrafficShapingController</code> </p><p>有以下几个实现  </p><ol><li><code>DefaultController</code> 只有超过设置的阈值，直接拒绝</li><li><code>RateLimiterController</code> 均匀限流，固定每个请求之间的最小间隔</li><li><code>WarmUpController</code> 预热,缓慢达到预设的最大值</li><li><code>WarmUpRateLimiterController</code> 看名字，里面涉及到限流算法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇主要学习了怎么用 &lt;code&gt;sentinel&lt;/code&gt;&lt;br&gt;这篇主要简单的进入源码瞅瞅 &lt;code&gt;sentinel&lt;/code&gt; 的结构  &lt;/p&gt;
&lt;p&gt;上篇中，可以看到，限流操作的基本代码结构为&lt;br&gt;&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>sentinel 学习-上</title>
    <link href="http://yoursite.com/2019/11/12/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8A/"/>
    <id>http://yoursite.com/2019/11/12/sentinel-学习-上/</id>
    <published>2019-11-12T12:49:58.000Z</published>
    <updated>2019-11-12T12:50:55.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sentinel-学习"><a href="#sentinel-学习" class="headerlink" title="sentinel 学习"></a>sentinel 学习</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个 <code>spring-boot-start</code> 模块，依赖了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在包里面看到 <code>spring.factories</code> ，这里是集成 <code>spring-boot</code> 的入口    </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.cloud.alibaba.sentinel.SentinelWebAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.alibaba.sentinel.endpoint.SentinelEndpointAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.alibaba.sentinel.custom.SentinelAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.cloud.alibaba.sentinel.feign.SentinelFeignAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">org.springframework.cloud.alibaba.sentinel.custom.SentinelCircuitBreakerConfiguration</span></span><br></pre></td></tr></table></figure><h3 id="SentinelWebAutoConfiguration"><a href="#SentinelWebAutoConfiguration" class="headerlink" title="SentinelWebAutoConfiguration"></a>SentinelWebAutoConfiguration</h3><p>这个配置默认开启，作用是添加了一个 <code>CommonFilter</code><br>这里过滤器的作用是基于 <code>url</code> 的限流   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest sRequest = (HttpServletRequest) request;</span><br><span class="line">    Entry entry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Entry methodEntry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是获取 uri  就是排除 contextPath 后面的 uri ，剔除掉 query 参数</span></span><br><span class="line">        String target = FilterUtil.filterTarget(sRequest);</span><br><span class="line">        <span class="comment">// Clean and unify the URL.</span></span><br><span class="line">        <span class="comment">// For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -&gt; `/foo/:id`), or</span></span><br><span class="line">        <span class="comment">// the amount of context and resources will exceed the threshold.</span></span><br><span class="line">        UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();</span><br><span class="line">        <span class="comment">// 默认的 UrlCleaner 啥都不做，可以自己做处理， 譬如上面注释里面的路径参数</span></span><br><span class="line">        <span class="keyword">if</span> (urlCleaner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target = urlCleaner.clean(target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 origin 自己配置的 RequestOriginParser 实现，如果没有，默认就是 "" 了</span></span><br><span class="line">        <span class="comment">// Parse the request origin using registered origin parser.</span></span><br><span class="line">        String origin = parseOrigin(sRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里就是限流控制了，context 和 resourceName 都是 uri  类型是 EntryType.IN   ，默认的类型是 OUT</span></span><br><span class="line">        ContextUtil.enter(target, origin);</span><br><span class="line">        entry = SphU.entry(target, EntryType.IN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否基于 HTTP METHOD 区分 uri</span></span><br><span class="line">        <span class="comment">// Add method specification if necessary</span></span><br><span class="line">        <span class="keyword">if</span> (httpMethodSpecify) &#123;</span><br><span class="line">          <span class="comment">// 如果需要的话，继续请求限流控制</span></span><br><span class="line">            methodEntry = SphU.entry(sRequest.getMethod().toUpperCase() + COLON + target,</span><br><span class="line">                    EntryType.IN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">        <span class="comment">// 阻塞了，代表本次请求被限流了，限流的原因有多个，大部分是基于 QPS 的</span></span><br><span class="line">        HttpServletResponse sResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="comment">// Return the block page, or redirect to another URL.</span></span><br><span class="line">        WebCallbackManager.getUrlBlockHandler().blocked(sRequest, sResponse, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">        Tracer.trace(e2);</span><br><span class="line">        <span class="keyword">throw</span> e2;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e3) &#123;</span><br><span class="line">        Tracer.trace(e3);</span><br><span class="line">        <span class="keyword">throw</span> e3;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e4) &#123;</span><br><span class="line">        Tracer.trace(e4);</span><br><span class="line">        <span class="keyword">throw</span> e4;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (methodEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            methodEntry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">        ContextUtil.exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SentinelEndpointAutoConfiguration"><a href="#SentinelEndpointAutoConfiguration" class="headerlink" title="SentinelEndpointAutoConfiguration"></a>SentinelEndpointAutoConfiguration</h3><p>这个配置是对 <code>spring-boot-starter-actuator</code> 的一个扩展。添加了一个 <code>SentinelEndpoint</code>,用来返回展示一些基本配置和规则配置  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReadOperation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (sentinelProperties.isEnabled()) &#123;</span><br><span class="line"></span><br><span class="line">    result.put(<span class="string">"appName"</span>, AppNameUtil.getAppName());</span><br><span class="line">    result.put(<span class="string">"logDir"</span>, LogBase.getLogBaseDir());</span><br><span class="line">    result.put(<span class="string">"logUsePid"</span>, LogBase.isLogNameUsePid());</span><br><span class="line">    result.put(<span class="string">"blockPage"</span>, WebServletConfig.getBlockPage());</span><br><span class="line">    result.put(<span class="string">"metricsFileSize"</span>, SentinelConfig.singleMetricFileSize());</span><br><span class="line">    result.put(<span class="string">"metricsFileCharset"</span>, SentinelConfig.charset());</span><br><span class="line">    result.put(<span class="string">"totalMetricsFileCount"</span>, SentinelConfig.totalMetricFileCount());</span><br><span class="line">    result.put(<span class="string">"consoleServer"</span>, TransportConfig.getConsoleServer());</span><br><span class="line">    result.put(<span class="string">"clientIp"</span>, TransportConfig.getHeartbeatClientIp());</span><br><span class="line">    result.put(<span class="string">"heartbeatIntervalMs"</span>, TransportConfig.getHeartbeatIntervalMs());</span><br><span class="line">    result.put(<span class="string">"clientPort"</span>, TransportConfig.getPort());</span><br><span class="line">    result.put(<span class="string">"coldFactor"</span>, sentinelProperties.getFlow().getColdFactor());</span><br><span class="line">    result.put(<span class="string">"filter"</span>, sentinelProperties.getFilter());</span><br><span class="line">    result.put(<span class="string">"datasource"</span>, sentinelProperties.getDatasource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; rules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">"rules"</span>, rules);</span><br><span class="line">    rules.put(<span class="string">"flowRules"</span>, FlowRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"degradeRules"</span>, DegradeRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"systemRules"</span>, SystemRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"authorityRule"</span>, AuthorityRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"paramFlowRule"</span>, ParamFlowRuleManager.getRules());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SentinelAutoConfiguration"><a href="#SentinelAutoConfiguration" class="headerlink" title="SentinelAutoConfiguration"></a>SentinelAutoConfiguration</h3><p>这个是比较核心的配置，与 <code>spring</code> 集成的 <code>bean</code> 基本都是在这里注册的<br>还有 <code>sentinel</code> 本身的初始化，也在这里执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 省略一堆配置</span></span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(properties.getServlet().getBlockPage())) &#123;</span><br><span class="line">    WebServletConfig.setBlockPage(properties.getServlet().getBlockPage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  urlBlockHandlerOptional.ifPresent(WebCallbackManager::setUrlBlockHandler);</span><br><span class="line">  urlCleanerOptional.ifPresent(WebCallbackManager::setUrlCleaner);</span><br><span class="line">  requestOriginParserOptional.ifPresent(WebCallbackManager::setRequestOriginParser);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// earlier initialize</span></span><br><span class="line">  <span class="keyword">if</span> (properties.isEager()) &#123;</span><br><span class="line">    <span class="comment">// 核心，这里使用 SPI 加载 InitFunc 的实现，然后初始</span></span><br><span class="line">    InitExecutor.doInit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持 @SentinelResource 注解的 Aspect 类</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelResourceAspect <span class="title">sentinelResourceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelResourceAspect();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看名字就知道是处理 RestTemplate 的，支持 @SentinelRestTemplate 注解，可以指定 block 或者 fallback 处理方法</span></span><br><span class="line"><span class="comment">// 参数类型为 HttpRequest.class, byte[].class, ClientHttpRequestExecution.class, BlockException.class </span></span><br><span class="line"><span class="comment">// 返回类型   ClientHttpResponse.class</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="comment">// 然后添加 SentinelProtectInterceptor</span></span><br><span class="line"><span class="comment">// 这里请求外部资源的时候，要经过两个 entry  1. hostResource (httpMethod):(schema)://(host):(port) 2. hostResource + path</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(name = <span class="string">"org.springframework.web.client.RestTemplate"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"resttemplate.sentinel.enabled"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelBeanPostProcessor <span class="title">sentinelBeanPostProcessor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelBeanPostProcessor(applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是加载配置规则源，规则可以存放在 naco ，apollo 等地方</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelDataSourceHandler <span class="title">sentinelDataSourceHandler</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelDataSourceHandler(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则序列化的地方</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ObjectMapper<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">SentinelConverterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-flow-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonFlowConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, FlowRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-degrade-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonDegradeConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, DegradeRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-system-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonSystemConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, SystemRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-authority-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonAuthorityConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, AuthorityRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-param-flow-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonParamFlowConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, ParamFlowRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的 <code>InitExecutor.doInit()</code> 触发的是 <code>sentinel</code> 核心的初始化，后面再看 </p><h3 id="SentinelFeignAutoConfiguration"><a href="#SentinelFeignAutoConfiguration" class="headerlink" title="SentinelFeignAutoConfiguration"></a>SentinelFeignAutoConfiguration</h3><p>这里是跟 <code>feign</code> 集成，核心类是 <code>SentinelInvocationHandler</code><br><code>feign</code>,<code>ribbon</code>,<code>hystrix</code> 这里几个是 <code>netflix</code> 的组件，其中 <code>sentinel</code> 替换掉的是 <code>hystrix</code><br>详细的后面梳理完 <code>feign</code> 后再看</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下上面的自动配置  </p><ol><li>系统开放的 <code>rest</code> 接口，根据 <code>path</code> 会过一遍限流（如果区分 <code>http method</code> 则是两遍）</li><li>系统注册的 <code>RestTempate</code> 的时候，如果加上了 <code>@SentinelRestTemplate</code> 注解，则会添加拦截器 <code>SentinelProtectInterceptor</code>,经过两个限流</li><li>使用 <code>feign</code>，<code>@FeignClient</code> 标记的 <code>bean</code>,这里会经过一层限流</li><li>使用 <code>@SentinelResource</code> 注解标记的方法  </li></ol><p>那么问题来了，限流规则是在哪里配置的呢？  </p><p>首先看看 <code>sentinel</code> 支持哪些规则配置  </p><h3 id="AuthorityRule"><a href="#AuthorityRule" class="headerlink" title="AuthorityRule"></a>AuthorityRule</h3><p>权限配置，就是配置黑白名单<br>先看下示例配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"good"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"abc"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"bad"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"bcd"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"terrible"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"aaa"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>对应的规则类为 <code>AuthorityRule</code>,经过的 <code>slot</code> 为 <code>AuthoritySlot</code><br>其中:</p><ol><li>resource  为资源名，每个规则都需要配置</li><li>limitApp  限制的 app，其实就是针对 <code>origin</code> 来限制的，可以用来限制接入系统，需要提供一个 <code>RequestOriginParser</code> 来获取 <code>origin</code>,如果没有，那么规则配置是无效的</li><li>strategy  不同规则配置，含义不一样。这里 0：白名单 1：黑名单</li></ol><h3 id="SystemRule"><a href="#SystemRule" class="headerlink" title="SystemRule"></a>SystemRule</h3><p>配置示例<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"highestSystemLoad"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"highestCpuUsage"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"qps"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"avgRt"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"maxThread"</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里虽然是一个数组，但是配置多个规则其实没啥用，总是使用最小有效配置来判断的<br>经过的 <code>slot</code> 为 <code>SystemSlot</code>,根据系统的负载来限流的，只针对 <code>EntryType.IN</code> 类型才有效，默认的都是 <code>OUT</code>,在 <code>CommonFilter</code> 里面为 <code>IN</code><br>配置含义其实看名字就知道了： </p><ol><li>highestSystemLoad  系统负载</li><li>highestCpuUsage   cpu 使用率</li><li>qps 每秒请求数，这里是有效的，被拦截的请求不算在里面</li><li>avgRt 平均响应时间</li><li>maxThread 当前出现线程数</li></ol><p>这里开看成应用总的负载限流  </p><h3 id="FlowRule"><a href="#FlowRule" class="headerlink" title="FlowRule"></a>FlowRule</h3><p>配置示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"/hello"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"/test"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"GET:http://www.taobao.com"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这个规则是针对每个资源，独立的限流配置  </p><ol><li>resource  资源名，可以看上面，默认的资源名生产规则</li><li>grade   配置类型，0：线程数量 1：QPS</li><li>count   配置数量</li><li>strategy  0：用于直接流量控制 默认，1：相关流量控制，2：链流量控制  配置了 1 或者 2，需要配置 refResource,如果配 1，那么直接取对应资源的 ClusterNode，2的话，需要 contextName == refResource</li><li>limitApp  这个必须配，默认 default 如果不配，规则不生效，如果不为 default 或者 other 那么，限流配置单独适应 origin 的限流，例如 配置 app1，那么 app1 的请求信息单独记录，也只根据这个记录来限流控制，不需要管资源的整体调用情况</li><li>refResource  与 strategy 共同起作用</li><li>controlBehavior  限流器的类型 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</li></ol><p>还有一些其他的，在需要特殊用法的时候再看</p><h3 id="DegradeRule"><a href="#DegradeRule" class="headerlink" title="DegradeRule"></a>DegradeRule</h3><p>降级规则<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"abc0"</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">20.0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"passCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"timeWindow"</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"abc1"</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">15.0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"passCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"timeWindow"</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>这个规则是用来断路的，当超过配置的规则时间，直接断路 <code>timeWindow</code> 时间后再开启<br>规则配置：</p><ol><li>resource  资源名</li><li>grade     0: 平均响应时间, 1: 异常比例</li><li>count     配置的阈值</li><li>timeWindow  时间窗口</li></ol><p>除了上面的规则外，还可以有自定义的规则。。    </p><p>刚刚上面的属于本地文件配置，在应用中如下配置<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.file</span>=<span class="string">classpath: flowrule.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.data-type</span>=<span class="string">json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.rule-type</span>=<span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.file</span>=<span class="string">classpath: degraderule.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.data-type</span>=<span class="string">json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.rule-type</span>=<span class="string">degrade</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds3.file.file</span>=<span class="string">classpath: authority.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds3.file.rule-type</span>=<span class="string">authority</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds4.file.file</span>=<span class="string">classpath: system.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds4.file.rule-type</span>=<span class="string">system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds5.file.file</span>=<span class="string">classpath: param-flow.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds5.file.rule-type</span>=<span class="string">param_flow</span></span><br></pre></td></tr></table></figure></p><p>还支持 <code>apollo</code>, <code>nacos</code>, <code>redis</code>, <code>zk</code> 等  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sentinel-学习&quot;&gt;&lt;a href=&quot;#sentinel-学习&quot; class=&quot;headerlink&quot; title=&quot;sentinel 学习&quot;&gt;&lt;/a&gt;sentinel 学习&lt;/h1&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>由 spring-cloud-alibaba sentinel 示例启动失败引起的研究</title>
    <link href="http://yoursite.com/2019/11/12/%E7%94%B1-spring-cloud-alibaba-sentinel-%E7%A4%BA%E4%BE%8B%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/11/12/由-spring-cloud-alibaba-sentinel-示例启动失败引起的研究/</id>
    <published>2019-11-12T12:47:26.000Z</published>
    <updated>2019-11-12T12:48:55.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h2><p>在看 <code>sentinel</code> 的时候，写了一个示例，添加以下配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel 测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="comment"># 名称随意</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">file:</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">"classpath: rules/flowRules.json"</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure></p><p>这是一个本地配置文件来配置 <code>sentinel</code> 规则的示例<br>然后启动应用，发现异常  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to bind properties under &apos;spring.cloud.sentinel.datasource.ds1.file.rule-type&apos; to org.springframework.cloud.alibaba.sentinel.datasource.RuleType:</span><br><span class="line"></span><br><span class="line">    Property: spring.cloud.sentinel.datasource.ds1.file.rule-type</span><br><span class="line">    Value: flow</span><br><span class="line">    Origin: class path resource [application.yml]:23:24</span><br><span class="line">    Reason: 2</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your application&apos;s configuration</span><br></pre></td></tr></table></figure><p><code>sentinel</code> 的配置类是 <code>SentinelProperties</code>, <code>ruleType</code> 所在类为 <code>AbstractDataSourceProperties</code>,类型为枚举 <code>RuleType</code>  </p><p>上面，没有任何异常信息，只是一个绑定错误，我还以为哪里拼写错了。<br>最后实在没办法，直接进 <code>spring</code> 处理 <code>@EnableConfigurationProperties(SentinelProperties.class)</code> 的地方  </p><p>在类 <code>ConfigurationPropertiesBindingPostProcessor</code> 的 <code>bind</code> 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object bean, String beanName, ConfigurationProperties annotation)</span> </span>&#123;</span><br><span class="line">ResolvableType type = getBeanType(bean, beanName);</span><br><span class="line">Validated validated = getAnnotation(bean, beanName, Validated<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Annotation[] annotations = (validated != <span class="keyword">null</span>)</span><br><span class="line">? <span class="keyword">new</span> Annotation[] &#123; annotation, validated &#125;</span><br><span class="line">: <span class="keyword">new</span> Annotation[] &#123; annotation &#125;;</span><br><span class="line">Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(bean)</span><br><span class="line">.withAnnotations(annotations);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.configurationPropertiesBinder.bind(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationPropertiesBindException(beanName, bean, annotation,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以根据条件断点，然后在异常那里打印堆栈日志，发现是一个数组越界。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: <span class="number">2</span></span><br><span class="line">at java.lang.reflect.Parameter.getAnnotatedType(Parameter.java:<span class="number">237</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getParameterMetaData(AnnotationMetaDataProvider.java:<span class="number">427</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.findExecutableMetaData(AnnotationMetaDataProvider.java:<span class="number">300</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getMetaData(AnnotationMetaDataProvider.java:<span class="number">285</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getConstructorMetaData(AnnotationMetaDataProvider.java:<span class="number">266</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.retrieveBeanConfiguration(AnnotationMetaDataProvider.java:<span class="number">135</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getBeanConfiguration(AnnotationMetaDataProvider.java:<span class="number">124</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanConfigurationForHierarchy(BeanMetaDataManager.java:<span class="number">232</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.createBeanMetaData(BeanMetaDataManager.java:<span class="number">199</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanMetaData(BeanMetaDataManager.java:<span class="number">166</span>)</span><br><span class="line">at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:<span class="number">157</span>)</span><br><span class="line">at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:<span class="number">108</span>)</span><br></pre></td></tr></table></figure></p><p>但是。越界发生在内部，我也无法干预，为了具体定位越界到底在哪里出现，跟踪调试<br>最后定位到 <code>org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider</code>  的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ConstrainedParameter&gt; <span class="title">getParameterMetaData</span><span class="params">(Executable executable)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( executable.getParameterCount() == <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ****  这里返回的构造方法参数是 4 引起了疑惑 ****</span></span><br><span class="line">  Parameter[] parameters = executable.getParameters();</span><br><span class="line"></span><br><span class="line">  List&lt;ConstrainedParameter&gt; metaData = <span class="keyword">new</span> ArrayList&lt;&gt;( parameters.length );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( Parameter parameter : parameters ) &#123;</span><br><span class="line">    Annotation[] parameterAnnotations;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      parameterAnnotations = parameter.getAnnotations();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;</span><br><span class="line">      LOG.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );</span><br><span class="line">      parameterAnnotations = EMPTY_PARAMETER_ANNOTATIONS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;MetaConstraint&lt;?&gt;&gt; parameterConstraints = newHashSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( annotationProcessingOptions.areParameterConstraintsIgnoredFor( executable, i ) ) &#123;</span><br><span class="line">      Type type = ReflectionHelper.typeOf( executable, i );</span><br><span class="line">      metaData.add(</span><br><span class="line">          <span class="keyword">new</span> ConstrainedParameter(</span><br><span class="line">              ConfigurationSource.ANNOTATION,</span><br><span class="line">              executable,</span><br><span class="line">              type,</span><br><span class="line">              i,</span><br><span class="line">              parameterConstraints,</span><br><span class="line">              Collections.emptySet(),</span><br><span class="line">              CascadingMetaDataBuilder.nonCascading()</span><br><span class="line">          )</span><br><span class="line">      );</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConstraintLocation location = ConstraintLocation.forParameter( executable, i );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( Annotation parameterAnnotation : parameterAnnotations ) &#123;</span><br><span class="line">      <span class="comment">// collect constraints if this annotation is a constraint annotation</span></span><br><span class="line">      List&lt;ConstraintDescriptorImpl&lt;?&gt;&gt; constraints = findConstraintAnnotations(</span><br><span class="line">          executable, parameterAnnotation, ElementType.PARAMETER</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">for</span> ( ConstraintDescriptorImpl&lt;?&gt; constraintDescriptorImpl : constraints ) &#123;</span><br><span class="line">        parameterConstraints.add(</span><br><span class="line">            MetaConstraints.create( typeResolutionHelper, valueExtractorManager, constraintDescriptorImpl, location )</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **** 问题出在这里  ****</span></span><br><span class="line">    AnnotatedType parameterAnnotatedType = parameter.getAnnotatedType();</span><br><span class="line"></span><br><span class="line">    Set&lt;MetaConstraint&lt;?&gt;&gt; typeArgumentsConstraints = findTypeAnnotationConstraintsForExecutableParameter( executable, i, parameterAnnotatedType );</span><br><span class="line">    CascadingMetaDataBuilder cascadingMetaData = findCascadingMetaData( executable, parameters, i, parameterAnnotatedType );</span><br><span class="line"></span><br><span class="line">    metaData.add(</span><br><span class="line">        <span class="keyword">new</span> ConstrainedParameter(</span><br><span class="line">            ConfigurationSource.ANNOTATION,</span><br><span class="line">            executable,</span><br><span class="line">            ReflectionHelper.typeOf( executable, i ),</span><br><span class="line">            i,</span><br><span class="line">            parameterConstraints,</span><br><span class="line">            typeArgumentsConstraints,</span><br><span class="line">            cascadingMetaData</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> metaData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面有两个中文注释，就是问题所在。<br>首先，第一个问题，参数是 4 引起了我的疑惑。我们看下 <code>RuleType</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RuleType &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * flow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FLOW(<span class="string">"flow"</span>, FlowRule<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/**</span></span><br><span class="line"><span class="class"> * <span class="title">degrade</span></span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line">DEGRADE("degrade", DegradeRule.class),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * param flow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PARAM_FLOW(<span class="string">"param-flow"</span>, ParamFlowRule<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/**</span></span><br><span class="line"><span class="class"> * <span class="title">system</span></span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line">SYSTEM("system", SystemRule.class),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * authority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHORITY(<span class="string">"authority"</span>, AuthorityRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * alias for &#123;<span class="doctag">@link</span> AbstractRule&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * concrete &#123;<span class="doctag">@link</span> AbstractRule&#125; class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class clazz;</span><br><span class="line"></span><br><span class="line">RuleType(String name, Class clazz) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;RuleType&gt; <span class="title">getByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Arrays.stream(RuleType.values())</span><br><span class="line">.filter(ruleType -&gt; name.equals(ruleType.getName())).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;RuleType&gt; <span class="title">getByClass</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.stream(RuleType.values())</span><br><span class="line">.filter(ruleType -&gt; clazz == ruleType.getClazz()).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只有一个构造方法，两个构造参数，为啥这里是 4 呢？<br>调试的时候可以看到 前面两个参数 ，一个是枚举的 name ,一个是 ordinal 坐标<br>说实话，以前还真没注意这个细节  </p><p>继续找问题所在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotatedType parameterAnnotatedType = parameter.getAnnotatedType();</span><br></pre></td></tr></table></figure></p><p>上面就是跑异常的地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AnnotatedType <span class="title">getAnnotatedType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// no caching for now</span></span><br><span class="line">    <span class="keyword">return</span> executable.getAnnotatedParameterTypes()[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里已经是 <code>jdk</code> 源码了<br>最后发现，问题在这里 <code>executable.getAnnotatedParameterTypes()</code> 这个方法返回的数组长度为 2<br>但是，我们可以看到，外层是在遍历 <code>executable.getParameters()</code> 这里返回的是 4 个元素，因此越界 </p><p>去获取 <code>spring-cloud-alibaba</code> 的源码，运行 <code>sentinel</code> 示例，也出现同样的问题  </p><p>写了一个测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">enum</span> EnumTest &#123;</span><br><span class="line"></span><br><span class="line">    A(<span class="number">0</span>, <span class="string">"A"</span>),</span><br><span class="line"></span><br><span class="line">    B(<span class="number">1</span>, <span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    EnumTest(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">enum</span> Enum2 &#123;</span><br><span class="line">    A</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">    Constructor&lt;?&gt;[] declaredConstructors = aClass.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;</span><br><span class="line">        <span class="keyword">int</span> parameterCount = constructor.getParameterCount();</span><br><span class="line">        System.out.printf(<span class="string">"parameterCount:%s\n"</span>, parameterCount);</span><br><span class="line">        <span class="keyword">int</span> length = constructor.getAnnotatedParameterTypes().length;</span><br><span class="line">        System.out.printf(<span class="string">"length:%s\n"</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        show(EnumTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"---"</span>);</span><br><span class="line">        show(Enum2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>怀疑可能是 <code>jdk</code> 小版本的问题,目前用的 <code>jdk</code> 版本为 <code>1.8.25</code><br>因此去网上下载一个 <code>1.8.172</code> 发现没有问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.8.25    parameterCount = 4,  length = 2</span><br><span class="line">1.8.172   parameterCount = 4,  length = 4</span><br></pre></td></tr></table></figure></p><p>到此，问题定位完毕。<br>然而 <code>1.8.25</code> 是公司定的版本。<br>通常搜索查询，这个 bug 在 <code>JDK 1.8.0_40</code> 之后修复了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题起因&quot;&gt;&lt;a href=&quot;#问题起因&quot; class=&quot;headerlink&quot; title=&quot;问题起因&quot;&gt;&lt;/a&gt;问题起因&lt;/h2&gt;&lt;p&gt;在看 &lt;code&gt;sentinel&lt;/code&gt; 的时候，写了一个示例，添加以下配置&lt;br&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="spring-boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="http://yoursite.com/2019/11/10/leetcode/1/"/>
    <id>http://yoursite.com/2019/11/10/leetcode/1/</id>
    <published>2019-11-10T02:58:56.000Z</published>
    <updated>2019-11-10T03:29:39.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><em>示例</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>最简单的思路就是两层 <code>for</code> 循环比较。时间复杂度 <code>n * n</code> </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">first := nums[i]</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line">second := nums[j]</span><br><span class="line"><span class="keyword">if</span> target == first+second &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;i, j&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个思路，使用 <code>map</code> 遍历两次.<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  ints := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第一遍 记录需要于谁配对，并记录坐标</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    first := nums[i]</span><br><span class="line">    <span class="comment">// key 是 expect  value 为 坐标</span></span><br><span class="line">ints[target-first] = i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第二遍 判断当前值是否为别人的预期 利用 map ，访问时间复杂度为 O(1)</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">second := nums[i]</span><br><span class="line">    expect, ok := ints[second]</span><br><span class="line">    <span class="comment">// 注意，坐标不能为 自己</span></span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; i != expect &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;expect, i&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于上面的思路扩展，由于配对是相互的，因此可以边记录 <code>expect</code> 边判断是否满足条件<br>只用一次遍历<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">ints := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    first := nums[i]</span><br><span class="line">    <span class="comment">// 判断本值 是否为其他的配对值 ，如果是，就直接返回另</span></span><br><span class="line"><span class="keyword">if</span> expect, ok := ints[first]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;expect, i&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果不是，记录本值 预期的配对值，记录坐标</span></span><br><span class="line">ints[target-first] = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/code&gt;，请你在该数组中找出和为目标值的那
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 练习</title>
    <link href="http://yoursite.com/2019/11/10/leetcode/0/"/>
    <id>http://yoursite.com/2019/11/10/leetcode/0/</id>
    <published>2019-11-10T02:56:51.000Z</published>
    <updated>2019-11-20T15:51:33.941Z</updated>
    
    <content type="html"><![CDATA[<p>开辟一个新的模块练习算法，准备用 <code>go</code> 语言来写。<br>主要是为了熟悉 <code>go</code> 语言,还有算法，不至于每次看到算法题就完全没有思路。<br>顺序的话，按照不同类型训练，先练习数组类的，目标先订 50 题    </p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><div class="table-container"><table><thead><tr><th>类型</th><th>目标</th><th>完成</th></tr></thead><tbody><tr><td>数组</td><td>50</td><td>6</td></tr></tbody></table></div><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><div class="table-container"><table><thead><tr><th>类型</th><th>难度</th><th>博文</th><th>leetcode 地址</th></tr></thead><tbody><tr><td>数组</td><td>简单</td><td><a href="/2019/11/10/leetcode/1">两数之和</a></td><td><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></td></tr><tr><td>数组</td><td>困难</td><td><a href="/2019/11/16/leetcode/4">寻找两个有序数组的中位数</a></td><td><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">寻找两个有序数组的中位数</a></td></tr><tr><td>数组</td><td>中等</td><td><a href="/2019/11/16/leetcode/11">盛最多水的容器</a></td><td><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">盛最多水的容器</a></td></tr><tr><td>数组</td><td>中等</td><td><a href="/2019/11/18/leetcode/15">三数之和</a></td><td><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">三数之和</a></td></tr><tr><td>数组</td><td>中等</td><td><a href="/2019/11/19/leetcode/16">最接近的三数之和</a></td><td><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">最接近的三数之和</a></td></tr><tr><td>数组</td><td>中等</td><td><a href="/2019/11/20/leetcode/18">四数之和</a></td><td><a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">四数之和</a></td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开辟一个新的模块练习算法，准备用 &lt;code&gt;go&lt;/code&gt; 语言来写。&lt;br&gt;主要是为了熟悉 &lt;code&gt;go&lt;/code&gt; 语言,还有算法，不至于每次看到算法题就完全没有思路。&lt;br&gt;顺序的话，按照不同类型训练，先练习数组类的，目标先订 50 题    &lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>开发笔记</title>
    <link href="http://yoursite.com/2019/11/10/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/10/开发笔记/</id>
    <published>2019-11-10T02:17:07.000Z</published>
    <updated>2019-11-10T02:34:57.877Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一下之前遇到的开发上的问题  </p><h2 id="JPA-的时区问题"><a href="#JPA-的时区问题" class="headerlink" title="JPA 的时区问题"></a>JPA 的时区问题</h2><p>表现为表中的时间字段，在数据库中存储的是 0 时区的（比北京时间少了8小时），查询出来展示没有问题。<br><code>jdbcurl</code> 已经加上了 <code>serverTimezone=GMT%2B8</code>    </p><p>最后定位在配置<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.jpa.properties.hibernate.jdbc.time_zone</span>=<span class="string">UTC</span></span><br></pre></td></tr></table></figure><br>这个配置，会导致，插入数据库的时候，将时间转换为 0 时区</p><h2 id="gson-的泛型处理"><a href="#gson-的泛型处理" class="headerlink" title="gson 的泛型处理"></a>gson 的泛型处理</h2><p>在提交安全测试的时候，被检测到 <code>fastjson</code> 的安全漏洞，之前其实已经暴漏过了，因此，已经调整到版本 <code>1.2.60</code> ，但是不知道为啥又检测到了。<br>当前到最新版本为 <code>1.2.62</code> 。不过，我们只是在打印日志，或者外部对接到时候用到了 <code>fastjson</code>，只是当作一个 <code>jsonutil</code> 来用，<br>因此，为了防止以后又检测出安全漏洞，使用 <code>gson</code> 代替。<br>这里记录一下 <code>gson</code> 的简单用法。主要是泛型相关的。      </p><p><em>实例话</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Gson();</span><br><span class="line"><span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).create();</span><br></pre></td></tr></table></figure></p><p><em>序列化</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gson.toJson(request);</span><br></pre></td></tr></table></figure></p><p><em>反序列化</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本用法  如果暂时不知道内部的具体类型，可以使用 JsonObject</span></span><br><span class="line">fromJson(String json, Class&lt;T&gt; classOfT);</span><br><span class="line"><span class="comment">// 带有泛型的用法 如 List&lt;T&gt;   JsonObject 可以替换为自己的类型</span></span><br><span class="line"><span class="comment">// 这个应该是新版本的，如果在 百度上 搜索，大部分好像是 new TypeToken 的示例</span></span><br><span class="line">gson.fromJson(resp, TypeToken.getParameterized(ArrayList<span class="class">.<span class="keyword">class</span>, <span class="title">JsonObject</span>.<span class="title">class</span>).<span class="title">getType</span>())</span></span><br></pre></td></tr></table></figure></p><h2 id="spring-RestTemplate-日志拦截"><a href="#spring-RestTemplate-日志拦截" class="headerlink" title="spring RestTemplate 日志拦截"></a>spring RestTemplate 日志拦截</h2><p>其实可以通过调整日志等级来展示 <code>RestTemplate</code> 的日志,但是我进源码稍微看了一下，只发现打印了请求日志，没有看到响应日志<br>请求日志的打印，也不是我们响应的信息，因此，就加拦截器自己打印日志了。<br>下面的代码，也是参考其他的博文。不过具体是谁的。忘记了。  </p><p><em>拦截器</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: luolei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/10/24 14:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(LoggingRequestInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        traceRequest(request, body);</span><br><span class="line">        ClientHttpResponse response = execution.execute(request, body);</span><br><span class="line">        traceResponse(response);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traceRequest</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"===========================request begin================================================"</span>);</span><br><span class="line">        log.debug(<span class="string">"URI         : &#123;&#125;"</span>, request.getURI());</span><br><span class="line">        log.debug(<span class="string">"Method      : &#123;&#125;"</span>, request.getMethod());</span><br><span class="line">        log.debug(<span class="string">"Headers     : &#123;&#125;"</span>, request.getHeaders() );</span><br><span class="line">        log.debug(<span class="string">"Request body: &#123;&#125;"</span>, <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>));</span><br><span class="line">        log.debug(<span class="string">"==========================request end================================================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traceResponse</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        StringBuilder inputStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(response.getBody(), <span class="string">"UTF-8"</span>));</span><br><span class="line">        String line = bufferedReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputStringBuilder.append(line);</span><br><span class="line">            inputStringBuilder.append(<span class="string">'\n'</span>);</span><br><span class="line">            line = bufferedReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"============================response begin=========================================="</span>);</span><br><span class="line">        log.debug(<span class="string">"Status code  : &#123;&#125;"</span>, response.getStatusCode());</span><br><span class="line">        log.debug(<span class="string">"Status text  : &#123;&#125;"</span>, response.getStatusText());</span><br><span class="line">        log.debug(<span class="string">"Headers      : &#123;&#125;"</span>, response.getHeaders());</span><br><span class="line">        log.debug(<span class="string">"Response body: &#123;&#125;"</span>, inputStringBuilder.toString());</span><br><span class="line">        log.debug(<span class="string">"=======================response end================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>构造</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BufferingClientHttpRequestFactory 使用这个 requestFactory 是为了允许重复读取</span></span><br><span class="line"><span class="keyword">this</span>.restTemplate = builder.requestFactory(() -&gt; <span class="keyword">new</span> BufferingClientHttpRequestFactory(<span class="keyword">new</span> SimpleClientHttpRequestFactory()))</span><br><span class="line">                .interceptors(<span class="keyword">new</span> LoggingRequestInterceptor())</span><br><span class="line">                .rootUri(properties.getUrl())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure></p><p>然后修改日志等级就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里记录一下之前遇到的开发上的问题  &lt;/p&gt;
&lt;h2 id=&quot;JPA-的时区问题&quot;&gt;&lt;a href=&quot;#JPA-的时区问题&quot; class=&quot;headerlink&quot; title=&quot;JPA 的时区问题&quot;&gt;&lt;/a&gt;JPA 的时区问题&lt;/h2&gt;&lt;p&gt;表现为表中的时间字段，在数据库
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="gson" scheme="http://yoursite.com/tags/gson/"/>
    
      <category term="RestTemplate" scheme="http://yoursite.com/tags/RestTemplate/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用笔记</title>
    <link href="http://yoursite.com/2019/11/10/hexo-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/10/hexo-使用笔记/</id>
    <published>2019-11-09T16:13:27.000Z</published>
    <updated>2019-11-10T02:49:32.626Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">https://www.cxyxiaowu.com/6407.html</a><br>防止链接挂了，自己复制一份。在上面的基础上添加了图片的配置。   </p><blockquote><p>_config.yml<br>post_asset_folder: true</p></blockquote><p>然后使用 <code>hexo new &quot;page&quot;</code> 的时候会建一个同名文件夹，可以放本文章使用的静态资源。<br>使用方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></p><p>使用图片的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="复制内容"><a href="#复制内容" class="headerlink" title="复制内容"></a>复制内容</h2><p>使用 hexo 搭建的步骤，删去一些内容。留下关键步骤<br>node 环境之类的就不说了。</p><h3 id="安装-Hexo-初始化项目"><a href="#安装-Hexo-初始化项目" class="headerlink" title="安装 Hexo 初始化项目"></a>安装 Hexo 初始化项目</h3><p><em>安装 hexo</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p><em>初始化项目</em><br>也就是你的笔记保存的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure></p><p><em>生成网站</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><br>生成 <code>public</code> 目录，部署的时候是上传这个目录，本地的时候通常不用  </p><p><em>预览</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure></p><p>然后去 <code>http://localhost:4000</code> 看自己写的东西</p><p><em>部署</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>当然，前提是要配置好 <code>git</code> 地址<br>去了解 <code>github pages</code>,就是建一个 <code>{username}.github.io</code> 仓库<br>然后去 <code>_config.yml</code> 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &#123;git repo ssh address&#125;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>需要额外安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">最后部署执行</span><br></pre></td></tr></table></figure><br>hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*配置站点信息*</span><br><span class="line">修改 `_config.yml` 里面的配置</span><br><span class="line">```yml</span><br><span class="line">title: Askluolei</span><br><span class="line">subtitle: &apos;个人的学习吐槽网站&apos;</span><br><span class="line">description: &apos;主要涉猎的编程语言为 java ，js，go 主要是服务端开发和一丢丢前端，外加一些读书笔记和吐槽&apos;</span><br><span class="line">keywords: &apos;java, js, vue, go, 读书, 笔记&apos;</span><br><span class="line">author: Luo lei</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &apos;&apos;</span><br></pre></td></tr></table></figure></p><h3 id="主题-Next"><a href="#主题-Next" class="headerlink" title="主题 Next"></a>主题 Next</h3><p>修改主题<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>然后在 <code>_config.yml</code> 里面修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>然后可以在 <code>themes/next/_config.yml</code> 里面调整主题的相关配置了 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调整布局</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标，图片放在 themes/next/source/images 目录，然后修改下面的配置</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/safari-pinned-tab.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头像 放在 themes/next/source/images/avatar.png 然后修改配置</span></span><br><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码块的展示，使用 mac 类型的</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到顶端 ，开启配置</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阅读进度条配置</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#222"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右上角加上 github 地址</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/askluolei</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论插件，开启 gitalk</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br><span class="line"><span class="comment"># 然后补充相关配置</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">NightTeam</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">nightteam.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">&#123;your</span> <span class="string">client</span> <span class="string">id&#125;</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">&#123;your</span> <span class="string">client</span> <span class="string">secret&#125;</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">germey</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中英文之间有空格</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数学公式 </span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部刷新</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><p><em>rss</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p><em>数学公式</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p><em>pjax</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考 &lt;a href=&quot;https://www.cxyxiaowu.com/6407.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cxyxiaowu.com/6407.html&lt;/a&gt;&lt;br&gt;防止链接挂了，自己复制一份。
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>maven 插件笔记</title>
    <link href="http://yoursite.com/2019/11/07/maven-%E6%8F%92%E4%BB%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/07/maven-插件笔记/</id>
    <published>2019-11-07T15:29:21.000Z</published>
    <updated>2019-11-09T16:49:46.568Z</updated>
    
    <content type="html"><![CDATA[<p>maven 相关的插件使用</p><h2 id="jdk-等级"><a href="#jdk-等级" class="headerlink" title="jdk 等级"></a>jdk 等级</h2><p>在新建项目的时候，总是 <code>maven</code> 默认使用的编译等级和 <code>jdk</code> 为全局配置的，默认是 <code>5</code><br>可以修改全局配置，或者项目的 <code>pom</code>文件，推荐后一种，因为无法保证项目的每个人都会去配相同的全局配置，所以，一些配置尽量在项目配置里面完成<br>添加以下配置  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="项目报告"><a href="#项目报告" class="headerlink" title="项目报告"></a>项目报告</h2><p>检查代码重复率，findbugs，p3c检查等<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-pmd-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rulesets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-comment.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-concurrent.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-constant.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-exception.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-flowcontrol.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-naming.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-oop.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-orm.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-other.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-set.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rulesets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">printFailingErrors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">printFailingErrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.p3c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p3c-pmd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 可以使用 mvn site 生成报告，包含重复代码检测，p3c 检查，基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生成项目报告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目总览，包括基本信息，依赖，使用的插件等 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 源码关联，当使用检测插件的时候，发现问题代码行数，可以直接点击行数去看源码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jxr-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- p3c 的代码质量检测 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-pmd-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rulesets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-comment.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-concurrent.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-constant.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-exception.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-flowcontrol.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-naming.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-oop.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-orm.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-other.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruleset</span>&gt;</span>rulesets/java/ali-set.xml<span class="tag">&lt;/<span class="name">ruleset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rulesets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">printFailingErrors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">printFailingErrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>findbugs-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;configLocation&gt;$&#123;basedir&#125;/springside-findbugs.xml&lt;/configLocation&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Low、Medium和High (Low最严格) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">threshold</span>&gt;</span>Medium和High<span class="tag">&lt;/<span class="name">threshold</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置分析工作的等级，可以为Min、Default和Max --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">effort</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">effort</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">findbugsXmlOutput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">findbugsXmlOutput</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">findbugsXmlOutputDirectory</span>&gt;</span>target/site<span class="tag">&lt;/<span class="name">findbugsXmlOutputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="maven-多模块的版本号管理问题"><a href="#maven-多模块的版本号管理问题" class="headerlink" title="maven 多模块的版本号管理问题"></a>maven 多模块的版本号管理问题</h2><p>当存在多模块，每个模块之间还有依赖的时候，如果要升级版本号，则需要很多地方都要改动。  </p><p>使用配置，和如下规则，避免<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根目录执行 mvn versions:set -DnewVersion=1.0.0.RELEASE 修改版本号 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子模块不要自己定义独立的版本号，公用父模块的版本号--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子模块相互依赖，一律使用 project.version 定义版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>versions-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateBackupPoms</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generateBackupPoms</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个配置放到顶层项目。使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn versions:<span class="built_in">set</span> -DnewVersion=1.0.0.RELEASE</span><br></pre></td></tr></table></figure></p><p>修改版本号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;maven 相关的插件使用&lt;/p&gt;
&lt;h2 id=&quot;jdk-等级&quot;&gt;&lt;a href=&quot;#jdk-等级&quot; class=&quot;headerlink&quot; title=&quot;jdk 等级&quot;&gt;&lt;/a&gt;jdk 等级&lt;/h2&gt;&lt;p&gt;在新建项目的时候，总是 &lt;code&gt;maven&lt;/code&gt; 默认
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-openFeign 研究</title>
    <link href="http://yoursite.com/2019/07/30/spring-cloud-openFeign-%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/07/30/spring-cloud-openFeign-研究/</id>
    <published>2019-07-30T12:12:41.000Z</published>
    <updated>2019-07-30T12:42:29.119Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇简单的，<code>openFeign</code> 的源码分析<br>会涉及到 <code>ribbon</code> <code>Hystrix</code><br>不过其中 openFeign 的内容比较简单，其实核心难度在 <code>Hystrix</code>,这个以后有时间看<br>先上一张图。画的很挫。也算是分析思路吧。。  </p><img src="/2019/07/30/spring-cloud-openFeign-%E7%A0%94%E7%A9%B6/feign%E5%88%86%E6%9E%90.svg" class="" title="This is an example image">  <p>主要是从代理构建和方法调用两条线进行分析，下面基本都是代码了  </p><p>spring-boot 版本 2.1.5.RELEASE<br>spring-cloud 版本 Greenwich.SR1<br>官方示例很简单<br>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心就是 @EnableFeignClients 注解，这也是配置入口，我们等会从这里开始看<br>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"stores"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/stores"</span>)</span><br><span class="line">    <span class="function">List&lt;Store&gt; <span class="title">getStores</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/stores/&#123;storeId&#125;"</span>, consumes = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function">Store <span class="title">update</span><span class="params">(@PathVariable(<span class="string">"storeId"</span>)</span> Long storeId, Store store)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是 @FeignClient 注解<br>方法里面就是 spring-mvc 里面的注解了</p><p>首先来看配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(FeignClientsRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableFeignClients</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Alias for the &#123;<span class="doctag">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation</span></span><br><span class="line"><span class="comment">    * declarations e.g.: &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>("org.my.pkg")&#125; instead of</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> <span class="doctag">@ComponentScan</span>(basePackages="org.my.pkg")&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the array of 'basePackages'.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Base packages to scan for annotated components.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #value()&#125; is an alias for (and mutually exclusive with) this attribute.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Use &#123;<span class="doctag">@link</span> #basePackageClasses()&#125; for a type-safe alternative to String-based</span></span><br><span class="line"><span class="comment">    * package names.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the array of 'basePackages'.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Type-safe alternative to &#123;<span class="doctag">@link</span> #basePackages()&#125; for specifying the packages to</span></span><br><span class="line"><span class="comment">    * scan for annotated components. The package of each class specified will be scanned.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * Consider creating a special no-op marker class or interface in each package that</span></span><br><span class="line"><span class="comment">    * serves no purpose other than being referenced by this attribute.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the array of 'basePackageClasses'.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * A custom &lt;code&gt;<span class="doctag">@Configuration</span>&lt;/code&gt; for all feign clients. Can contain override</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;<span class="doctag">@Bean</span>&lt;/code&gt; definition for the pieces that make up the client, for instance</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> feign.codec.Decoder&#125;, &#123;<span class="doctag">@link</span> feign.codec.Encoder&#125;, &#123;<span class="doctag">@link</span> feign.Contract&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> FeignClientsConfiguration for the defaults</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> list of default configurations</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] defaultConfiguration() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * List of classes annotated with <span class="doctag">@FeignClient</span>. If not empty, disables classpath</span></span><br><span class="line"><span class="comment">    * scanning.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> list of FeignClient classes</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt;[] clients() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面最核心的一行就是 @Import(FeignClientsRegistrar.class)<br>注解里面的属性，都是特殊的配置，具体的含义，我们后面继续看<br>接下面看看 FeignClientsRegistrar 的处理，这是跟 spring 集成的关键，所有基于 spring-boot 的，只要有类似这样的注解，都是这样看的，如果没有注解，那就看 META-INF/spring.factory 文件里面的自动配置<br>核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">   registerDefaultConfiguration(metadata, registry);</span><br><span class="line">   registerFeignClients(metadata, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要做两件事，注册对应的 配置类 为 bean 注册 client 为 bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerDefaultConfiguration</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">   Map&lt;String, Object&gt; defaultAttrs = metadata</span><br><span class="line">         .getAnnotationAttributes(EnableFeignClients<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (defaultAttrs != <span class="keyword">null</span> &amp;&amp; defaultAttrs.containsKey(<span class="string">"defaultConfiguration"</span>)) &#123;</span><br><span class="line">      String name;</span><br><span class="line">      <span class="keyword">if</span> (metadata.hasEnclosingClass()) &#123;</span><br><span class="line">         name = <span class="string">"default."</span> + metadata.getEnclosingClassName();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         name = <span class="string">"default."</span> + metadata.getClassName();</span><br><span class="line">      &#125;</span><br><span class="line">      registerClientConfiguration(registry, name,</span><br><span class="line">            defaultAttrs.get(<span class="string">"defaultConfiguration"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里就是注册全局默认配置，可以看到，从 EnableFeignClients 获取了 defaultConfiguration 属性，默认是空的<br>如果有，就可以注册全局默认配置，至于这个配置有什么用，可以配置什么，后面看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerClientConfiguration</span><span class="params">(BeanDefinitionRegistry registry, Object name,</span></span></span><br><span class="line"><span class="function"><span class="params">      Object configuration)</span> </span>&#123;</span><br><span class="line">   BeanDefinitionBuilder builder = BeanDefinitionBuilder</span><br><span class="line">         .genericBeanDefinition(FeignClientSpecification<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   builder.addConstructorArgValue(name);</span><br><span class="line">   builder.addConstructorArgValue(configuration);</span><br><span class="line">   registry.registerBeanDefinition(</span><br><span class="line">         name + <span class="string">"."</span> + FeignClientSpecification<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>(),</span></span><br><span class="line"><span class="class">         <span class="title">builder</span>.<span class="title">getBeanDefinition</span>())</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很明确，就是注册 配置 bean ，目前默认配置，和每个 client 的单独配置都是通过这个方法注册的<br>可以看到具体的 bean 是 FeignClientSpecification 将 name 和自定义配置 当做构造参数传进去了<br>后面详细看看 FeignClientSpecification<br>继续看注册 client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerFeignClients</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">      BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 这是一个基础扫描类，过滤条件是 独立类（非内部类），非注解</span></span><br><span class="line">   ClassPathScanningCandidateComponentProvider scanner = getScanner();</span><br><span class="line">   scanner.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line"></span><br><span class="line">   Set&lt;String&gt; basePackages;</span><br><span class="line"></span><br><span class="line">   Map&lt;String, Object&gt; attrs = metadata</span><br><span class="line">         .getAnnotationAttributes(EnableFeignClients<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">   <span class="comment">// 这里看到，处理 client 的注解 @FeignClient</span></span><br><span class="line">   AnnotationTypeFilter annotationTypeFilter = <span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">         FeignClient<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="keyword">final</span> Class&lt;?&gt;[] clients = attrs == <span class="keyword">null</span> ? <span class="keyword">null</span></span><br><span class="line">         : (Class&lt;?&gt;[]) attrs.get(<span class="string">"clients"</span>);</span><br><span class="line">   <span class="comment">// 这里是对 @EnableFeignClients 注解的 clients 属性支持，可以直接指定有 @FeignClient 注释的接口</span></span><br><span class="line">   <span class="keyword">if</span> (clients == <span class="keyword">null</span> || clients.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 默认是空的，也就是走正常的类扫描</span></span><br><span class="line">      scanner.addIncludeFilter(annotationTypeFilter);</span><br><span class="line">      <span class="comment">// 获取要扫描的包，从注解 @EnableFeignClients 读取 value  basePackages  basePackageClasses 所在的包</span></span><br><span class="line">      <span class="comment">// 如果上面没获取到（默认都是空的），就扫描 @EnableFeignClients 注解标记的类所在的包</span></span><br><span class="line">      basePackages = getBasePackages(metadata);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果自己直接指定了 client ，那么只取指定的</span></span><br><span class="line">      <span class="keyword">final</span> Set&lt;String&gt; clientClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      basePackages = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (Class&lt;?&gt; clazz : clients) &#123;</span><br><span class="line">         basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">         clientClasses.add(clazz.getCanonicalName());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 也需要走过滤</span></span><br><span class="line">      AbstractClassTestingTypeFilter filter = <span class="keyword">new</span> AbstractClassTestingTypeFilter() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(ClassMetadata metadata)</span> </span>&#123;</span><br><span class="line">            String cleaned = metadata.getClassName().replaceAll(<span class="string">"\\$"</span>, <span class="string">"."</span>);</span><br><span class="line">            <span class="keyword">return</span> clientClasses.contains(cleaned);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      scanner.addIncludeFilter(</span><br><span class="line">            <span class="keyword">new</span> AllTypeFilter(Arrays.asList(filter, annotationTypeFilter)));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 扫描，是 spirng 的工具类，细节不看</span></span><br><span class="line">   <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">      Set&lt;BeanDefinition&gt; candidateComponents = scanner</span><br><span class="line">            .findCandidateComponents(basePackage);</span><br><span class="line">      <span class="keyword">for</span> (BeanDefinition candidateComponent : candidateComponents) &#123;</span><br><span class="line">         <span class="keyword">if</span> (candidateComponent <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">            <span class="comment">// verify annotated class is an interface</span></span><br><span class="line">            AnnotatedBeanDefinition beanDefinition = (AnnotatedBeanDefinition) candidateComponent;</span><br><span class="line">            AnnotationMetadata annotationMetadata = beanDefinition.getMetadata();</span><br><span class="line">            <span class="comment">// client 只能是接口</span></span><br><span class="line">            Assert.isTrue(annotationMetadata.isInterface(),</span><br><span class="line">                  <span class="string">"@FeignClient can only be specified on an interface"</span>);</span><br><span class="line">            <span class="comment">// 获取 @FeignClient 注解的熟悉</span></span><br><span class="line">            Map&lt;String, Object&gt; attributes = annotationMetadata</span><br><span class="line">                  .getAnnotationAttributes(</span><br><span class="line">                        FeignClient<span class="class">.<span class="keyword">class</span>.<span class="title">getCanonicalName</span>())</span>;</span><br><span class="line">            <span class="comment">// 获取 name，就是 @FeignClient 里面的熟悉  contextId  value  name  serviceId  按照顺序获取</span></span><br><span class="line">            String name = getClientName(attributes);</span><br><span class="line">            <span class="comment">// 注册 client 对应的 config ，可以 @FeignClient 配置自定义的 configuration ，默认是空</span></span><br><span class="line">            registerClientConfiguration(registry, name,</span><br><span class="line">                  attributes.get(<span class="string">"configuration"</span>));</span><br><span class="line">            <span class="comment">// 注册 client bean</span></span><br><span class="line">            registerFeignClient(registry, annotationMetadata, attributes);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面都加了注释了，看看注册 client 的 bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerFeignClient</span><span class="params">(BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">      AnnotationMetadata annotationMetadata, Map&lt;String, Object&gt; attributes)</span> </span>&#123;</span><br><span class="line">   String className = annotationMetadata.getClassName();</span><br><span class="line">   <span class="comment">// 注意这里的 factoryBean  FeignClientFactoryBean</span></span><br><span class="line">   BeanDefinitionBuilder definition = BeanDefinitionBuilder</span><br><span class="line">         .genericBeanDefinition(FeignClientFactoryBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   validate(attributes);</span><br><span class="line">   <span class="comment">// url 默认是空，这里应该是直连时候指定url</span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"url"</span>, getUrl(attributes));</span><br><span class="line">   <span class="comment">// path 是 basePath</span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"path"</span>, getPath(attributes));</span><br><span class="line">   <span class="comment">// 这里 name 的获取顺序是 serviceId  name value   支持 placeholder 也就是 $&#123;&#125;</span></span><br><span class="line">   String name = getName(attributes);</span><br><span class="line">   definition.addPropertyValue(<span class="string">"name"</span>, name);</span><br><span class="line">   <span class="comment">// 取 contextId ，如果为空，那就用 getName 获取，也就是上面的 name 默认是一样的</span></span><br><span class="line">   String contextId = getContextId(attributes);</span><br><span class="line">   definition.addPropertyValue(<span class="string">"contextId"</span>, contextId);</span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"type"</span>, className);</span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"decode404"</span>, attributes.get(<span class="string">"decode404"</span>));</span><br><span class="line">   <span class="comment">// 容错类</span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"fallback"</span>, attributes.get(<span class="string">"fallback"</span>));</span><br><span class="line">   <span class="comment">// 容错工程类</span></span><br><span class="line">   definition.addPropertyValue(<span class="string">"fallbackFactory"</span>, attributes.get(<span class="string">"fallbackFactory"</span>));</span><br><span class="line">   definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">   <span class="comment">// 可以看到，别名，默认就是 自己设置的 name + "FeignClient"</span></span><br><span class="line">   String alias = contextId + <span class="string">"FeignClient"</span>;</span><br><span class="line">   AbstractBeanDefinition beanDefinition = definition.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> primary = (Boolean) attributes.get(<span class="string">"primary"</span>); <span class="comment">// has a default, won't be</span></span><br><span class="line">                                             <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">   beanDefinition.setPrimary(primary);</span><br><span class="line">   <span class="comment">// 相当于自己设置别名</span></span><br><span class="line">   String qualifier = getQualifier(attributes);</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasText(qualifier)) &#123;</span><br><span class="line">      alias = qualifier;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   BeanDefinitionHolder holder = <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, className,</span><br><span class="line">         <span class="keyword">new</span> String[] &#123; alias &#125;);</span><br><span class="line">   BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看注册的 配置类 FeignClientSpecification</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeignClientSpecification</span> <span class="keyword">implements</span> <span class="title">NamedContextFactory</span>.<span class="title">Specification</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Class&lt;?&gt;[] configuration;</span><br><span class="line"></span><br><span class="line">   FeignClientSpecification() &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   FeignClientSpecification(String name, Class&lt;?&gt;[] configuration) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Class&lt;?&gt;[] getConfiguration() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.configuration;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfiguration</span><span class="params">(Class&lt;?&gt;[] configuration)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      FeignClientSpecification that = (FeignClientSpecification) o;</span><br><span class="line">      <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.name, that.name)</span><br><span class="line">            &amp;&amp; Arrays.equals(<span class="keyword">this</span>.configuration, that.configuration);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Objects.hash(<span class="keyword">this</span>.name, <span class="keyword">this</span>.configuration);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(<span class="string">"FeignClientSpecification&#123;"</span>).append(<span class="string">"name='"</span>)</span><br><span class="line">            .append(<span class="keyword">this</span>.name).append(<span class="string">"', "</span>).append(<span class="string">"configuration="</span>)</span><br><span class="line">            .append(Arrays.toString(<span class="keyword">this</span>.configuration)).append(<span class="string">"&#125;"</span>).toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥看的，<br>再看看 client 的 FeignClientFactoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;T&gt; the target type of the Feign client</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> Feign&#125; client created with the specified data and the context</span></span><br><span class="line"><span class="comment">* information</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// FeignContext 是在 autoconfiguration 的时候注册的</span></span><br><span class="line">   FeignContext context = <span class="keyword">this</span>.applicationContext.getBean(FeignContext<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="comment">// 配置分为三层，默认 - 全局 - 单个client 每个配置类实际上是一个 @Configuration 标记的 spring 配置类</span></span><br><span class="line">   <span class="comment">// context 内部为每个 client 都构建了一个 ApplicationContext parent 指向默认的 context</span></span><br><span class="line">   <span class="comment">// 里面配置类的解析顺序为 单个 - 全局 - 默认 构建内部的 bean</span></span><br><span class="line">   <span class="comment">// 这个方法里面，构建 Feign.Builder 设置 logger encoder decoder contract</span></span><br><span class="line">   <span class="comment">// 然后根据 FeignClientProperties 配置，设置 loggerLevel retryer errorDecoder request.options requestInterceptor decode404 配置</span></span><br><span class="line">   <span class="comment">// 如果自定义配置或者全局配置里面有 logger encoder decoder contract 这里也重新设置</span></span><br><span class="line">   Feign.Builder builder = feign(context);</span><br><span class="line">   <span class="comment">// 默认 url 是没有的</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(<span class="keyword">this</span>.url)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.name.startsWith(<span class="string">"http"</span>)) &#123;</span><br><span class="line">         <span class="keyword">this</span>.url = <span class="string">"http://"</span> + <span class="keyword">this</span>.name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.url = <span class="keyword">this</span>.name;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.url += cleanPath();</span><br><span class="line">      <span class="comment">// so 大部分应该走这里</span></span><br><span class="line">      <span class="keyword">return</span> (T) loadBalance(builder, context,</span><br><span class="line">            <span class="keyword">new</span> HardCodedTarget&lt;&gt;(<span class="keyword">this</span>.type, <span class="keyword">this</span>.name, <span class="keyword">this</span>.url));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.url) &amp;&amp; !<span class="keyword">this</span>.url.startsWith(<span class="string">"http"</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.url = <span class="string">"http://"</span> + <span class="keyword">this</span>.url;</span><br><span class="line">   &#125;</span><br><span class="line">   String url = <span class="keyword">this</span>.url + cleanPath();</span><br><span class="line">   Client client = getOptional(context, Client<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// url 存在，代表直连，lodbalance 就不需要了</span></span><br><span class="line">      <span class="keyword">if</span> (client <span class="keyword">instanceof</span> LoadBalancerFeignClient) &#123;</span><br><span class="line">         <span class="comment">// not load balancing because we have a url,</span></span><br><span class="line">         <span class="comment">// but ribbon is on the classpath, so unwrap</span></span><br><span class="line">         client = ((LoadBalancerFeignClient) client).getDelegate();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取默认的 client</span></span><br><span class="line">      builder.client(client);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 构建</span></span><br><span class="line">   Targeter targeter = get(context, Targeter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="keyword">return</span> (T) targeter.target(<span class="keyword">this</span>, builder, context,</span><br><span class="line">         <span class="keyword">new</span> HardCodedTarget&lt;&gt;(<span class="keyword">this</span>.type, <span class="keyword">this</span>.name, url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧，大概看了下里面的实现，这里其实是生成一个代理的过程，但是又与标准的动态代理不一样<br>构建过程在 builder 里面，之前的 logger encoder deocder contract 等是按照 client 实例配置  default 全局配置  默认配置 的 顺序启用的<br>client 的实例配置，就是在客户端接口注解 @FeignClient 配置的，default 全局配置，则是 @EnableFeignClients 注解里面配置的<br>至于默认配置，是基于 spring-boot 的自动配置 ，这里面也分情况，根据是否存在 ribbon ，有不同的注入配置<br>等会，突然发现上面三层配置，创建 context 的机制是 spring-cloud 里面的东西<br>先来看下基于 ribbon的自动配置，这里默认情况的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 ILoadBalancer 是 ribbon 包里面的  Feign 就是 feign 了</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; ILoadBalancer<span class="class">.<span class="keyword">class</span>, <span class="title">Feign</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br><span class="line"><span class="class">// 这里，要在 <span class="title">feign</span> 默认配置之前先处理</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureBefore</span>(<span class="title">FeignAutoConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">// 开启自定义参数配置</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123; FeignHttpClientProperties<span class="class">.<span class="keyword">class</span> &#125;)</span></span><br><span class="line"><span class="class">// <span class="title">Order</span> <span class="title">is</span> <span class="title">important</span> <span class="title">here</span>, <span class="title">last</span> <span class="title">should</span> <span class="title">be</span> <span class="title">the</span> <span class="title">default</span>, <span class="title">first</span> <span class="title">should</span> <span class="title">be</span> <span class="title">optional</span></span></span><br><span class="line"><span class="class">// <span class="title">see</span></span></span><br><span class="line">// https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653</span><br><span class="line"><span class="comment">// 上面有注释，顺序很重要，就是 FeignLoadBalanced 的自动配置</span></span><br><span class="line"><span class="meta">@Import</span>(&#123; HttpClientFeignLoadBalancedConfiguration<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">      <span class="title">OkHttpFeignLoadBalancedConfiguration</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">      <span class="title">DefaultFeignLoadBalancedConfiguration</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FeignRibbonClientAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Primary</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.retry.support.RetryTemplate"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> CachingSpringLoadBalancerFactory <span class="title">cachingLBClientFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         SpringClientFactory factory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CachingSpringLoadBalancerFactory(factory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Primary</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="meta">@ConditionalOnClass</span>(name = <span class="string">"org.springframework.retry.support.RetryTemplate"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> CachingSpringLoadBalancerFactory <span class="title">retryabeCachingLBClientFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         SpringClientFactory factory, LoadBalancedRetryFactory retryFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> CachingSpringLoadBalancerFactory(factory, retryFactory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="keyword">public</span> Request.<span class="function">Options <span class="title">feignRequestOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> LoadBalancerFeignClient.DEFAULT_OPTIONS;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实所有的配置类，最后都会装配到 Feign.Builder 里面<br>在 builder 里面构造代理，直接进去看吧。<br>最终，构建代理的是接口 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Targeter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">target</span><span class="params">(FeignClientFactoryBean factory, Feign.Builder feign,</span></span></span><br><span class="line"><span class="function"><span class="params">         FeignContext context, Target.HardCodedTarget&lt;T&gt; target)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 feign 的默认实现是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultTargeter</span> <span class="keyword">implements</span> <span class="title">Targeter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">target</span><span class="params">(FeignClientFactoryBean factory, Feign.Builder feign,</span></span></span><br><span class="line"><span class="function"><span class="params">         FeignContext context, Target.HardCodedTarget&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> feign.target(target);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，直接调用了 builder 的 target 方法<br>还有另一个 实现，这个实现才是自动配置的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HystrixTargeter</span> <span class="keyword">implements</span> <span class="title">Targeter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">target</span><span class="params">(FeignClientFactoryBean factory, Feign.Builder feign,</span></span></span><br><span class="line"><span class="function"><span class="params">         FeignContext context, Target.HardCodedTarget&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!(feign <span class="keyword">instanceof</span> feign.hystrix.HystrixFeign.Builder)) &#123;</span><br><span class="line">         <span class="keyword">return</span> feign.target(target);</span><br><span class="line">      &#125;</span><br><span class="line">      feign.hystrix.HystrixFeign.Builder builder = (feign.hystrix.HystrixFeign.Builder) feign;</span><br><span class="line">      SetterFactory setterFactory = getOptional(factory.getName(), context,</span><br><span class="line">            SetterFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span> (setterFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">         builder.setterFactory(setterFactory);</span><br><span class="line">      &#125;</span><br><span class="line">      Class&lt;?&gt; fallback = factory.getFallback();</span><br><span class="line">      <span class="keyword">if</span> (fallback != <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> targetWithFallback(factory.getName(), context, target, builder,</span><br><span class="line">               fallback);</span><br><span class="line">      &#125;</span><br><span class="line">      Class&lt;?&gt; fallbackFactory = factory.getFallbackFactory();</span><br><span class="line">      <span class="keyword">if</span> (fallbackFactory != <span class="keyword">void</span><span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> targetWithFallbackFactory(factory.getName(), context, target, builder,</span><br><span class="line">               fallbackFactory);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> feign.target(target);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">targetWithFallbackFactory</span><span class="params">(String feignClientName, FeignContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">         Target.HardCodedTarget&lt;T&gt; target, HystrixFeign.Builder builder,</span></span></span><br><span class="line"><span class="function"><span class="params">         Class&lt;?&gt; fallbackFactoryClass)</span> </span>&#123;</span><br><span class="line">      FallbackFactory&lt;? extends T&gt; fallbackFactory = (FallbackFactory&lt;? extends T&gt;) getFromContext(</span><br><span class="line">            <span class="string">"fallbackFactory"</span>, feignClientName, context, fallbackFactoryClass,</span><br><span class="line">            FallbackFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">return</span> builder.target(target, fallbackFactory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">targetWithFallback</span><span class="params">(String feignClientName, FeignContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">         Target.HardCodedTarget&lt;T&gt; target, HystrixFeign.Builder builder,</span></span></span><br><span class="line"><span class="function"><span class="params">         Class&lt;?&gt; fallback)</span> </span>&#123;</span><br><span class="line">      T fallbackInstance = getFromContext(<span class="string">"fallback"</span>, feignClientName, context,</span><br><span class="line">            fallback, target.type());</span><br><span class="line">      <span class="keyword">return</span> builder.target(target, fallbackInstance);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">getFromContext</span><span class="params">(String fallbackMechanism, String feignClientName,</span></span></span><br><span class="line"><span class="function"><span class="params">         FeignContext context, Class&lt;?&gt; beanType, Class&lt;T&gt; targetType)</span> </span>&#123;</span><br><span class="line">      Object fallbackInstance = context.getInstance(feignClientName, beanType);</span><br><span class="line">      <span class="keyword">if</span> (fallbackInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(</span><br><span class="line">               <span class="string">"No "</span> + fallbackMechanism</span><br><span class="line">                     + <span class="string">" instance of type %s found for feign client %s"</span>,</span><br><span class="line">               beanType, feignClientName));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!targetType.isAssignableFrom(beanType)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(<span class="string">"Incompatible "</span></span><br><span class="line">               + fallbackMechanism</span><br><span class="line">               + <span class="string">" instance. Fallback/fallbackFactory of type %s is not assignable to %s for feign client %s"</span>,</span><br><span class="line">               beanType, targetType, feignClientName));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (T) fallbackInstance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">getOptional</span><span class="params">(String feignClientName, FeignContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">         Class&lt;T&gt; beanType)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> context.getInstance(feignClientName, beanType);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，主要处理了 SetterFactory fallback fallbackFactory<br>将这几个配置设置在builder 里面后，调用 builder 的 target<br>默认先看默认的 builder 实现，  Hystrix 有熔断配置的实现是对默认 builder 做了一个扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">target</span><span class="params">(Target&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> build().newInstance(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Feign <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这里，构建这些对象，可以认为将配置分组到不同类</span></span><br><span class="line">  SynchronousMethodHandler.Factory synchronousMethodHandlerFactory =</span><br><span class="line">      <span class="keyword">new</span> SynchronousMethodHandler.Factory(client, retryer, requestInterceptors, logger,</span><br><span class="line">          logLevel, decode404, closeAfterDecode, propagationPolicy);</span><br><span class="line">  ParseHandlersByName handlersByName =</span><br><span class="line">      <span class="keyword">new</span> ParseHandlersByName(contract, options, encoder, decoder, queryMapEncoder,</span><br><span class="line">          errorDecoder, synchronousMethodHandlerFactory);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveFeign(handlersByName, invocationHandlerFactory, queryMapEncoder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build 方法就是把配置分组了，构建了一个 ReflectiveFeign<br>核心是里面的 newInstance 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Target&lt;T&gt; target)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 这里，解析 type 接口的方法</span></span><br><span class="line">  Map&lt;String, MethodHandler&gt; nameToHandler = targetToHandlersByName.apply(target);</span><br><span class="line">  Map&lt;Method, MethodHandler&gt; methodToHandler = <span class="keyword">new</span> LinkedHashMap&lt;Method, MethodHandler&gt;();</span><br><span class="line">  List&lt;DefaultMethodHandler&gt; defaultMethodHandlers = <span class="keyword">new</span> LinkedList&lt;DefaultMethodHandler&gt;();</span><br><span class="line">  <span class="comment">// 下面是处理 默认方法和过滤掉 object 的方法</span></span><br><span class="line">  <span class="keyword">for</span> (Method method : target.type().getMethods()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isDefault(method)) &#123;</span><br><span class="line">      DefaultMethodHandler handler = <span class="keyword">new</span> DefaultMethodHandler(method);</span><br><span class="line">      defaultMethodHandlers.add(handler);</span><br><span class="line">      methodToHandler.put(method, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// jdk 动态代理的 InvocationHandler 实现，默认是  new ReflectiveFeign.FeignInvocationHandler(target, dispatch);</span></span><br><span class="line">  InvocationHandler handler = factory.create(target, methodToHandler);</span><br><span class="line">  T proxy = (T) Proxy.newProxyInstance(target.type().getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> Class&lt;?&gt;[] &#123;target.type()&#125;, handler);</span><br><span class="line">  <span class="comment">// 默认方法绑定到代理对象</span></span><br><span class="line">  <span class="keyword">for</span> (DefaultMethodHandler defaultMethodHandler : defaultMethodHandlers) &#123;</span><br><span class="line">    defaultMethodHandler.bindTo(proxy);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// so 返回的是一个 JDK 的动态代理对象</span></span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so 继续看看 InvocationHandler handler = factory.create(target, methodToHandler); 创建的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Target target;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MethodHandler&gt; dispatch;</span><br><span class="line"></span><br><span class="line">  FeignInvocationHandler(Target target, Map&lt;Method, MethodHandler&gt; dispatch) &#123;</span><br><span class="line">    <span class="keyword">this</span>.target = checkNotNull(target, <span class="string">"target"</span>);</span><br><span class="line">    <span class="keyword">this</span>.dispatch = checkNotNull(dispatch, <span class="string">"dispatch for %s"</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(method.getName())) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Object otherHandler =</span><br><span class="line">            args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="keyword">null</span> ? Proxy.getInvocationHandler(args[<span class="number">0</span>]) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> equals(otherHandler);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(method.getName())) &#123;</span><br><span class="line">      <span class="keyword">return</span> hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(method.getName())) &#123;</span><br><span class="line">      <span class="keyword">return</span> toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dispatch.get(method).invoke(args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>非常，简单，其实核心还是 apply 方法解析出来的 methodHandler </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, MethodHandler&gt; <span class="title">apply</span><span class="params">(Target key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里使用 Contract 解析相关接口</span></span><br><span class="line">    List&lt;MethodMetadata&gt; metadata = contract.parseAndValidatateMetadata(key.type());</span><br><span class="line">    Map&lt;String, MethodHandler&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;String, MethodHandler&gt;();</span><br><span class="line">    <span class="keyword">for</span> (MethodMetadata md : metadata) &#123;</span><br><span class="line">      <span class="comment">// 这个是根据参数构建 request 请求的解析类</span></span><br><span class="line">      BuildTemplateByResolvingArgs buildTemplate;</span><br><span class="line">      <span class="keyword">if</span> (!md.formParams().isEmpty() &amp;&amp; md.template().bodyTemplate() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        buildTemplate = <span class="keyword">new</span> BuildFormEncodedTemplateFromArgs(md, encoder, queryMapEncoder);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (md.bodyIndex() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        buildTemplate = <span class="keyword">new</span> BuildEncodedTemplateFromArgs(md, encoder, queryMapEncoder);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buildTemplate = <span class="keyword">new</span> BuildTemplateByResolvingArgs(md, queryMapEncoder);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这里的 configKey 是 Feign.configKey 方法生成的 类 simpleName + methodName + 参数</span></span><br><span class="line">      <span class="comment">// factory 构建的是 SynchronousMethodHandler 实例 ，可以想象到，具体的调用逻辑就是在这里完成的</span></span><br><span class="line">      result.put(md.configKey(),</span><br><span class="line">          factory.create(key, md, buildTemplate, options, decoder, errorDecoder));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看具体调用的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 第一步 就是用 请求参数构建 RequestTemplate 具体有三种，后面详细看看看 BuildFormEncodedTemplateFromArgs  BuildEncodedTemplateFromArgs  BuildTemplateByResolvingArgs</span></span><br><span class="line">  RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">  <span class="comment">// 重试 clone 就是将计数重置为 1</span></span><br><span class="line">  Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 正常调用，如果 ok 就返回了</span></span><br><span class="line">      <span class="comment">// 这里是调用的核心逻辑</span></span><br><span class="line">      <span class="keyword">return</span> executeAndDecode(template);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">      <span class="comment">// 如果抛出的是 可重试异常</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 重试策略判断一下，如果不允许，就把异常抛出来，如果允许，内部可以记录一下，或者 等待一会再尝试</span></span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">        <span class="comment">// 异常是否需要解开包装</span></span><br><span class="line">        Throwable cause = th.getCause();</span><br><span class="line">        <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> cause;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> th;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">        logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，就可以详细看看具体的调用逻辑了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">executeAndDecode</span><span class="params">(RequestTemplate template)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">// 这里将请求封装为 request 内部首先经过 RequestInterceptor 处理  然后构建 request</span></span><br><span class="line">  Request request = targetRequest(template);</span><br><span class="line">  <span class="comment">// 请求日志</span></span><br><span class="line">  <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">    logger.logRequest(metadata.configKey(), logLevel, request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Response response;</span><br><span class="line">  <span class="comment">// 记录请求时间</span></span><br><span class="line">  <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 Client 执行请求，带上 options 参数，options 也是可配置的，通常是连接超时时间之类的</span></span><br><span class="line">    <span class="comment">// 这里就是核心了，请求控制丢给 client 去了</span></span><br><span class="line">    response = client.execute(request, options);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 异常日志</span></span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime(start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抛异常，这里是将异常包装为 可重试异常</span></span><br><span class="line">    <span class="keyword">throw</span> errorExecuting(request, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 正常结果</span></span><br><span class="line">  <span class="keyword">long</span> elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> shouldClose = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 响应日志</span></span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      response =</span><br><span class="line">          logger.logAndRebufferResponse(metadata.configKey(), logLevel, response, elapsedTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return 类型就是 Response</span></span><br><span class="line">    <span class="keyword">if</span> (Response<span class="class">.<span class="keyword">class</span> </span>== metadata.returnType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.body() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (response.body().length() == <span class="keyword">null</span> ||</span><br><span class="line">          response.body().length() &gt; MAX_RESPONSE_BUFFER_SIZE) &#123;</span><br><span class="line">        shouldClose = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Ensure the response body is disconnected</span></span><br><span class="line">      <span class="keyword">byte</span>[] bodyData = Util.toByteArray(response.body().asInputStream());</span><br><span class="line">      <span class="keyword">return</span> response.toBuilder().body(bodyData).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正常响应</span></span><br><span class="line">    <span class="keyword">if</span> (response.status() &gt;= <span class="number">200</span> &amp;&amp; response.status() &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">void</span><span class="class">.<span class="keyword">class</span> </span>== metadata.returnType()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object result = decode(response);</span><br><span class="line">        shouldClose = closeAfterDecode;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decode404 &amp;&amp; response.status() == <span class="number">404</span> &amp;&amp; <span class="keyword">void</span><span class="class">.<span class="keyword">class</span> !</span>= metadata.returnType()) &#123;</span><br><span class="line">      <span class="comment">// 404 并且有需要返回结果</span></span><br><span class="line">      Object result = decode(response);</span><br><span class="line">      shouldClose = closeAfterDecode;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他的就根据 errorDecoder 解析抛异常</span></span><br><span class="line">      <span class="keyword">throw</span> errorDecoder.decode(metadata.configKey(), response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// io 异常</span></span><br><span class="line">    <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">      logger.logIOException(metadata.configKey(), logLevel, e, elapsedTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 封装为 FeignException</span></span><br><span class="line">    <span class="keyword">throw</span> errorReading(request, response, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">if</span> (shouldClose) &#123;</span><br><span class="line">      ensureClosed(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么接下来看看 client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Executes a request against its &#123;<span class="doctag">@link</span> Request#url() url&#125; and returns a response.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request safe to replay.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> options options to apply to this request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> connected response, &#123;<span class="doctag">@link</span> Response.Body&#125; is absent or unread.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException on a network error connecting to &#123;<span class="doctag">@link</span> Request#url()&#125;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Response <span class="title">execute</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有一个接口要实现，有一个默认的内部类实现，就是使用 HttpURLConnection 一看就没有软负载， feign 的负载功能是通过 fibbon 实现了，有一个实现 LoadBalancerFeignClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      URI asUri = URI.create(request.url());</span><br><span class="line">      String clientName = asUri.getHost();</span><br><span class="line">      URI uriWithoutHost = cleanUrl(request.url(), clientName);</span><br><span class="line">      <span class="comment">// 转为 ribbon 的 request</span></span><br><span class="line">      FeignLoadBalancer.RibbonRequest ribbonRequest = <span class="keyword">new</span> FeignLoadBalancer.RibbonRequest(</span><br><span class="line">            <span class="keyword">this</span>.delegate, request, uriWithoutHost);</span><br><span class="line">      <span class="comment">// 配置类</span></span><br><span class="line">      IClientConfig requestConfig = getClientConfig(options, clientName);</span><br><span class="line">      <span class="comment">// 获取 FeignLoadBalancer 然后执行</span></span><br><span class="line">      <span class="keyword">return</span> lbClient(clientName)</span><br><span class="line">            .executeWithLoadBalancer(ribbonRequest, requestConfig).toResponse();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">      IOException io = findIOException(e);</span><br><span class="line">      <span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> io;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> FeignLoadBalancer <span class="title">lbClient</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.lbClientFactory.create(clientName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> FeignLoadBalancer <span class="title">create</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">   FeignLoadBalancer client = <span class="keyword">this</span>.cache.get(clientName);</span><br><span class="line">   <span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> client;</span><br><span class="line">   &#125;</span><br><span class="line">   IClientConfig config = <span class="keyword">this</span>.factory.getClientConfig(clientName);</span><br><span class="line">   ILoadBalancer lb = <span class="keyword">this</span>.factory.getLoadBalancer(clientName);</span><br><span class="line">   ServerIntrospector serverIntrospector = <span class="keyword">this</span>.factory.getInstance(clientName,</span><br><span class="line">         ServerIntrospector<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   client = <span class="keyword">this</span>.loadBalancedRetryFactory != <span class="keyword">null</span></span><br><span class="line">         ? <span class="keyword">new</span> RetryableFeignLoadBalancer(lb, config, serverIntrospector,</span><br><span class="line">               <span class="keyword">this</span>.loadBalancedRetryFactory)</span><br><span class="line">         : <span class="keyword">new</span> FeignLoadBalancer(lb, config, serverIntrospector);</span><br><span class="line">   <span class="comment">// 默认是走 FeignLoadBalancer  可以看到传了一个 ILoadBalancer  ServerIntrospector 和 IClientConfig基本配置</span></span><br><span class="line">   <span class="keyword">this</span>.cache.put(clientName, client);</span><br><span class="line">   <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后又到了 FeignLoadBalancer 的 executeWithLoadBalancer 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">executeWithLoadBalancer</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig requestConfig)</span> <span class="keyword">throws</span> ClientException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取 负载指令，其实就是负载策略</span></span><br><span class="line">    LoadBalancerCommand&lt;T&gt; command = buildLoadBalancerCommand(request, requestConfig);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ribbon 内部使用 rxjava </span></span><br><span class="line">        <span class="comment">// submit 内部控制 负载均衡和重试次数， 包括同 server 重试 和 不同 server 重试</span></span><br><span class="line">        <span class="comment">// 这里的 ServerOperation 就是一次实际的请求，参数是已经选择好的 server 然后调用 execute，本质就是 feign 的 client 请求</span></span><br><span class="line">        <span class="keyword">return</span> command.submit(</span><br><span class="line">            <span class="keyword">new</span> ServerOperation&lt;T&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    URI finalUri = reconstructURIWithServer(server, request.getUri());</span><br><span class="line">                    S requestForServer = (S) request.replaceUri(finalUri);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.just(AbstractLoadBalancerAwareClient.<span class="keyword">this</span>.execute(requestForServer, requestConfig));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .toBlocking()</span><br><span class="line">            .single();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ClientException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ClientException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClientException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> LoadBalancerCommand&lt;T&gt; <span class="title">buildLoadBalancerCommand</span><span class="params">(<span class="keyword">final</span> S request, <span class="keyword">final</span> IClientConfig config)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 重试策略</span></span><br><span class="line">   RequestSpecificRetryHandler handler = getRequestSpecificRetryHandler(request, config);</span><br><span class="line">   LoadBalancerCommand.Builder&lt;T&gt; builder = LoadBalancerCommand.&lt;T&gt;builder()</span><br><span class="line">         .withLoadBalancerContext(<span class="keyword">this</span>)</span><br><span class="line">         .withRetryHandler(handler)</span><br><span class="line">         .withLoadBalancerURI(request.getUri());</span><br><span class="line">   <span class="comment">// 其他自定义配置</span></span><br><span class="line">   customizeLoadBalancerCommandBuilder(request, config, builder);</span><br><span class="line">   <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestSpecificRetryHandler <span class="title">getRequestSpecificRetryHandler</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      RibbonRequest request, IClientConfig requestConfig)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.ribbon.isOkToRetryOnAllOperations()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RequestSpecificRetryHandler(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">this</span>.getRetryHandler(),</span><br><span class="line">            requestConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!request.toRequest().httpMethod().name().equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RequestSpecificRetryHandler(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">this</span>.getRetryHandler(),</span><br><span class="line">            requestConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RequestSpecificRetryHandler(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">this</span>.getRetryHandler(),</span><br><span class="line">            requestConfig);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最复杂的方法来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">submit</span><span class="params">(<span class="keyword">final</span> ServerOperation&lt;T&gt; operation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ExecutionInfoContext context = <span class="keyword">new</span> ExecutionInfoContext();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listenerInvoker.onExecutionStart();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysSame = retryHandler.getMaxRetriesOnSameServer();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxRetrysNext = retryHandler.getMaxRetriesOnNextServer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the load balancer</span></span><br><span class="line">    Observable&lt;T&gt; o =</span><br><span class="line">            <span class="comment">// server 不为null ，那就代表是直连了，否则使用 selectServer 获取可用列表</span></span><br><span class="line">            (server == <span class="keyword">null</span> ? selectServer() : Observable.just(server))</span><br><span class="line">            <span class="comment">// rxjava 的api 做相当于做一次转换，T 是响应类型</span></span><br><span class="line">            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="comment">// Called for each server being selected</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Server server)</span> </span>&#123;</span><br><span class="line">                    context.setServer(server);</span><br><span class="line">                    <span class="keyword">final</span> ServerStats stats = loadBalancerContext.getServerStats(server);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// Called for each attempt and retry</span></span><br><span class="line">                    Observable&lt;T&gt; o = Observable</span><br><span class="line">                            .just(server)</span><br><span class="line">                            .concatMap(<span class="keyword">new</span> Func1&lt;Server, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> Server server)</span> </span>&#123;</span><br><span class="line">                                    context.incAttemptCount();</span><br><span class="line">                                    loadBalancerContext.noteOpenConnection(stats);</span><br><span class="line">                                    </span><br><span class="line">                                    <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            listenerInvoker.onStartWithServer(context.toExecutionInfo());</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (AbortExecutionException e) &#123;</span><br><span class="line">                                            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    </span><br><span class="line">                                    <span class="keyword">final</span> Stopwatch tracer = loadBalancerContext.getExecuteTracer().start();</span><br><span class="line">                                    <span class="comment">// 注意这里，就是调用传 实际的请求，上面一堆都是记录和重试</span></span><br><span class="line">                                    <span class="keyword">return</span> operation.call(server).doOnEach(<span class="keyword">new</span> Observer&lt;T&gt;() &#123;</span><br><span class="line">                                        <span class="keyword">private</span> T entity;</span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                            recordStats(tracer, stats, entity, <span class="keyword">null</span>);</span><br><span class="line">                                            <span class="comment">// <span class="doctag">TODO:</span> What to do if onNext or onError are never called?</span></span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                                            recordStats(tracer, stats, <span class="keyword">null</span>, e);</span><br><span class="line">                                            logger.debug(<span class="string">"Got error &#123;&#125; when executed on server &#123;&#125;"</span>, e, server);</span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExceptionWithServer(e, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="meta">@Override</span></span><br><span class="line">                                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T entity)</span> </span>&#123;</span><br><span class="line">                                            <span class="keyword">this</span>.entity = entity;</span><br><span class="line">                                            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                listenerInvoker.onExecutionSuccess(entity, context.toExecutionInfo());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;                            </span><br><span class="line">                                        </span><br><span class="line">                                        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recordStats</span><span class="params">(Stopwatch tracer, ServerStats stats, Object entity, Throwable exception)</span> </span>&#123;</span><br><span class="line">                                            tracer.stop();</span><br><span class="line">                                            loadBalancerContext.noteRequestCompletion(stats, entity, exception, tracer.getDuration(TimeUnit.MILLISECONDS), retryHandler);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// retry 也是 rxjava api ，retryPolicy 方法判断是否可以重试</span></span><br><span class="line">                    <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span>)</span><br><span class="line">                        o = o.retry(retryPolicy(maxRetrysSame, <span class="keyword">true</span>));</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">// 上面重试是针对同一个 server 的，这里是针对不同的 server 的   </span></span><br><span class="line">    <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; server == <span class="keyword">null</span>)</span><br><span class="line">        o = o.retry(retryPolicy(maxRetrysNext, <span class="keyword">false</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> o.onErrorResumeNext(<span class="keyword">new</span> Func1&lt;Throwable, Observable&lt;T&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getAttemptCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (maxRetrysNext &gt; <span class="number">0</span> &amp;&amp; context.getServerAttemptCount() == (maxRetrysNext + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,</span><br><span class="line">                            <span class="string">"Number of retries on next server exceeded max "</span> + maxRetrysNext</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (maxRetrysSame &gt; <span class="number">0</span> &amp;&amp; context.getAttemptCount() == (maxRetrysSame + <span class="number">1</span>)) &#123;</span><br><span class="line">                    e = <span class="keyword">new</span> ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,</span><br><span class="line">                            <span class="string">"Number of retries exceeded max "</span> + maxRetrysSame</span><br><span class="line">                            + <span class="string">" retries, while making a call for: "</span> + context.getServer(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listenerInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                listenerInvoker.onExecutionFailed(e, context.toFinalExecutionInfo());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是一篇简单的，&lt;code&gt;openFeign&lt;/code&gt; 的源码分析&lt;br&gt;会涉及到 &lt;code&gt;ribbon&lt;/code&gt; &lt;code&gt;Hystrix&lt;/code&gt;&lt;br&gt;不过其中 openFeign 的内容比较简单，其实核心难度在 &lt;code&gt;Hystrix&lt;/co
      
    
    </summary>
    
    
      <category term="源码阅读" scheme="http://yoursite.com/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="spring-cloud" scheme="http://yoursite.com/tags/spring-cloud/"/>
    
      <category term="feign" scheme="http://yoursite.com/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 索引使用的注意事项</title>
    <link href="http://yoursite.com/2019/07/28/MySQL-%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://yoursite.com/2019/07/28/MySQL-索引使用的注意事项/</id>
    <published>2019-07-28T13:20:27.000Z</published>
    <updated>2019-11-09T16:48:00.235Z</updated>
    
    <content type="html"><![CDATA[<p>索引能够加快查询速度，但是维护索引和更新索引也会消耗时间，<br>不过通常只要建立合适的索引，从加快查询速度获取的收益是可以忽略掉维护和更新索引的消耗时间的  </p><p>创建索引的原则：</p><ol><li>更新频繁的列不应设置索引</li><li>重复数据多的字段不应设为索引</li><li>首先应该考虑对where 和 order by 涉及的列上建立索引</li></ol><p>可以使用 explain 来查看查询是否走索引了。<br>重点是</p><ol><li><p>type </p><ul><li>system 表中就一行</li><li>const 通过索引一次找到</li><li>eq_ref 唯一索引，包括主键索引</li><li>ref 索引</li><li>range 范围索引</li><li>index  只遍历索引树</li><li>all 全部扫描</li></ul><p>顺便说下，走索引不一定查询时间就慢，还有看表里面有多少行数据<br>实际上一条查询语句的快慢是根据扫描行数确定的  </p></li></ol><p>优化语句：</p><ol><li>不要在 <code>=</code> 左边用函数，例如 where a/2 = 10</li><li>不要用 <code>&lt;&gt;</code>, <code>!=</code>, <code>not in</code></li><li>不用 null 判断</li><li>like 不要用左模糊 %abc</li><li>避免用 or ，用 union 代替</li><li>exist 代替 in</li><li>不要使用类型隐式转换</li><li>联合索引的时候条件顺序<br>。。。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;索引能够加快查询速度，但是维护索引和更新索引也会消耗时间，&lt;br&gt;不过通常只要建立合适的索引，从加快查询速度获取的收益是可以忽略掉维护和更新索引的消耗时间的  &lt;/p&gt;
&lt;p&gt;创建索引的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新频繁的列不应设置索引&lt;/li&gt;
&lt;li&gt;重复数据多
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JVM 参数</title>
    <link href="http://yoursite.com/2019/07/28/JVM-%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/07/28/JVM-参数/</id>
    <published>2019-07-28T13:15:57.000Z</published>
    <updated>2019-11-09T16:47:40.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trace-跟踪参数"><a href="#Trace-跟踪参数" class="headerlink" title="Trace 跟踪参数"></a>Trace 跟踪参数</h2><h3 id="XX-PrintGC"><a href="#XX-PrintGC" class="headerlink" title="-XX:+PrintGC"></a>-XX:+PrintGC</h3><p>打印GC 的简要信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">975</span>K-&gt;<span class="number">480</span>K(<span class="number">1536</span>K)] <span class="number">14287</span>K-&gt;<span class="number">14016</span>K(<span class="number">15360</span>K), <span class="number">0.0067338</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure></p><h3 id="XX-PrintGCTimeStamps"><a href="#XX-PrintGCTimeStamps" class="headerlink" title="-XX:+PrintGCTimeStamps"></a>-XX:+PrintGCTimeStamps</h3><p>打印 GC 发生的时间戳</p><h3 id="XX-PrintGCDetails"><a href="#XX-PrintGCDetails" class="headerlink" title="-XX:+PrintGCDetails"></a>-XX:+PrintGCDetails</h3><p>程序运行结束后，打印GC的日志<br>PSYongGen 新生代 包含下面三个<br>eden 对象出生的地方<br>from 幸存 from to 两个对等<br>to<br>ParOldGen 老年代<br>元空间<br>Metaspace<br>JDK 好像没有永久代了<br>JDK 8开始把类的元数据放到本地化的堆内存(native heap)中，这一块区域就叫Metaspace，中文名叫元空间。<br>新增参数<br>-XX:MetaspaceSize是分配给类元数据空间（以字节计）的初始大小(Oracle逻辑存储上的初始高水位，the initial high-water-mark )，此值为估计值。MetaspaceSize的值设置的过大会延长垃圾回收时间。垃圾回收过后，引起下一次垃圾回收的类元数据空间的大小可能会变大。<br>-XX:MaxMetaspaceSize是分配给类元数据空间的最大值，超过此值就会触发Full GC，此值默认没有限制，但应取决于系统内存的大小。JVM会动态地改变此值。<br>-XX:MinMetaspaceFreeRatio表示一次GC以后，为了避免增加元数据空间的大小，空闲的类元数据的容量的最小比例，不够就会导致垃圾回收。<br>-XX:MaxMetaspaceFreeRatio表示一次GC以后，为了避免增加元数据空间的大小，空闲的类元数据的容量的最大比例，不够就会导致垃圾回收。<br>后面括号里面<br>分别为 低边界， 当前边界， 最高边界<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen total <span class="number">1536</span>K, used <span class="number">31</span>K [<span class="number">0x00000000ff980000</span>, <span class="number">0x00000000ffb80000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">3</span>% used [<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ff987c68</span>,<span class="number">0x00000000ffa80000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffa80000</span>,<span class="number">0x00000000ffa80000</span>,<span class="number">0x00000000ffb00000</span>)</span><br><span class="line">  to space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb80000</span>)</span><br><span class="line"> ParOldGen total <span class="number">10240</span>K, used <span class="number">8863</span>K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ff980000</span>) </span><br><span class="line">  object space <span class="number">10240</span>K, <span class="number">86</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ff4a7e68</span>,<span class="number">0x00000000ff600000</span>)</span><br><span class="line"> Metaspace used <span class="number">2690</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span> <span class="title">used</span> 297<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></p><h3 id="Xloggc-log-gc-log"><a href="#Xloggc-log-gc-log" class="headerlink" title="-Xloggc:log/gc.log"></a>-Xloggc:log/gc.log</h3><p>指定 GC log 的位置，以文件输出<br>注意一点，上级目录要存在</p><h3 id="XX-PrintHeapAtGC"><a href="#XX-PrintHeapAtGC" class="headerlink" title="-XX:+PrintHeapAtGC"></a>-XX:+PrintHeapAtGC</h3><p>每一次GC后，打印堆信息（GC 前后）<br>开发调试的时候可以用一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen total <span class="number">1536</span>K, used <span class="number">975</span>K [<span class="number">0x00000000ff980000</span>, <span class="number">0x00000000ffb80000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">95</span>% used [<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ffa73c20</span>,<span class="number">0x00000000ffa80000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb80000</span>)</span><br><span class="line">  to space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffa80000</span>,<span class="number">0x00000000ffa80000</span>,<span class="number">0x00000000ffb00000</span>)</span><br><span class="line"> ParOldGen total <span class="number">13824</span>K, used <span class="number">13312</span>K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ff980000</span>, <span class="number">0x00000000ff980000</span>)</span><br><span class="line">  object space <span class="number">13824</span>K, <span class="number">96</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ff9000d0</span>,<span class="number">0x00000000ff980000</span>)</span><br><span class="line"> Metaspace used <span class="number">2682</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span> <span class="title">used</span> 296<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line">0.116: [GC (Allocation Failure) 14287K-&gt;14008K(15360K), 0.0011068 secs]</span><br><span class="line">Heap after GC invocations=<span class="number">1</span> (full <span class="number">0</span>):</span><br><span class="line"> PSYoungGen total <span class="number">1536</span>K, used <span class="number">496</span>K [<span class="number">0x00000000ff980000</span>, <span class="number">0x00000000ffb80000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ff980000</span>,<span class="number">0x00000000ffa80000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">96</span>% used [<span class="number">0x00000000ffa80000</span>,<span class="number">0x00000000ffafc040</span>,<span class="number">0x00000000ffb00000</span>)</span><br><span class="line">  to space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb00000</span>,<span class="number">0x00000000ffb80000</span>)</span><br><span class="line"> ParOldGen total <span class="number">13824</span>K, used <span class="number">13512</span>K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ff980000</span>, <span class="number">0x00000000ff980000</span>)</span><br><span class="line">  object space <span class="number">13824</span>K, <span class="number">97</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ff9320d0</span>,<span class="number">0x00000000ff980000</span>)</span><br><span class="line"> Metaspace used <span class="number">2682</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span> <span class="title">used</span> 296<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="XX-TraceClassLoading"><a href="#XX-TraceClassLoading" class="headerlink" title="-XX:+TraceClassLoading"></a>-XX:+TraceClassLoading</h3><p>监控加载的类，每一个类加载都记录<br>同样，在跟踪调试的时候可以用一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Opened C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.Object from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.io.Serializable from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.Comparable from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.CharSequence from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.String from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.reflect.AnnotatedElement from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\lib\rt.jar]</span><br><span class="line">[Loaded java.lang.reflect.GenericDeclaration from C:\Program Files\Java\jre1<span class="number">.8</span><span class="number">.0_161</span>\</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="XX-PrintClassHistogram"><a href="#XX-PrintClassHistogram" class="headerlink" title="-XX:+PrintClassHistogram"></a>-XX:+PrintClassHistogram</h3><p>控制台在运行的时候，按 Ctrl + Break 打印类的信息<br>windows 上好像按不出来<br>就是打印每个类实例的数量，使用空间</p><h2 id="堆分配参数"><a href="#堆分配参数" class="headerlink" title="堆分配参数"></a>堆分配参数</h2><h3 id="Xmx-Xms"><a href="#Xmx-Xms" class="headerlink" title="-Xmx -Xms"></a>-Xmx -Xms</h3><p>指定最大堆和最小堆<br>-Xmx20m -Xms5m</p><h3 id="Xmn"><a href="#Xmn" class="headerlink" title="-Xmn"></a>-Xmn</h3><p>设置新生代大小<br>-Xmn2m<br>一个 eden 加上两个 survivor 为 2m<br>设置新生代为 2m<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS E:\study\java\jvm\jvm01&gt; java -Xmx20m -Xms20m -Xmn2m -XX:+PrintGCDetails TestGC</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">974</span>K-&gt;<span class="number">504</span>K(<span class="number">1536</span>K)] <span class="number">18383</span>K-&gt;<span class="number">18160</span>K(<span class="number">19968</span>K), <span class="number">0.0016176</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">504</span>K-&gt;<span class="number">496</span>K(<span class="number">1536</span>K)] <span class="number">18160</span>K-&gt;<span class="number">18160</span>K(<span class="number">19968</span>K), <span class="number">0.0009107</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 496K-&gt;0<span class="title">K</span><span class="params">(<span class="number">1536</span>K)</span>] [ParOldGen: 17664K-&gt;1695<span class="title">K</span><span class="params">(<span class="number">18432</span>K)</span>] 18160K-&gt;1695<span class="title">K</span><span class="params">(<span class="number">19968</span>K)</span>, [Metaspace: 2683K-&gt;2683<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0056298 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line">end</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen total <span class="number">1536</span>K, used <span class="number">31</span>K [<span class="number">0x00000000ffe00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>) </span><br><span class="line">  eden space <span class="number">1024</span>K, <span class="number">3</span>% used [<span class="number">0x00000000ffe00000</span>,<span class="number">0x00000000ffe07c68</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line">  to space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line"> ParOldGen total <span class="number">18432</span>K, used <span class="number">4767</span>K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ffe00000</span>, <span class="number">0x00000000ffe00000</span>) </span><br><span class="line">  object space <span class="number">18432</span>K, <span class="number">25</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000ff0a7ef0</span>,<span class="number">0x00000000ffe00000</span>)</span><br><span class="line"> Metaspace used <span class="number">2690</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span> <span class="title">used</span> 297<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><br>上面可以看到对象都到老年代去了，因为新生代空间不够<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS E:\study\java\jvm\jvm01&gt; java -Xmx20m -Xms20m -Xmn15m -XX:+PrintGCDetails TestGC</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">11565</span>K-&gt;<span class="number">1504</span>K(<span class="number">13824</span>K)] <span class="number">11565</span>K-&gt;<span class="number">1736</span>K(<span class="number">18944</span>K), <span class="number">0.0012016</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">end</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen total <span class="number">13824</span>K, used <span class="number">12107</span>K [<span class="number">0x00000000ff100000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">12288</span>K, <span class="number">86</span>% used [<span class="number">0x00000000ff100000</span>,<span class="number">0x00000000ffb5afb8</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  from space <span class="number">1536</span>K, <span class="number">97</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffe78040</span>,<span class="number">0x00000000ffe80000</span>)</span><br><span class="line">  to space <span class="number">1536</span>K, <span class="number">0</span>% used [<span class="number">0x00000000ffe80000</span>,<span class="number">0x00000000ffe80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen total <span class="number">5120</span>K, used <span class="number">232</span>K [<span class="number">0x00000000fec00000</span>, <span class="number">0x00000000ff100000</span>, <span class="number">0x00000000ff100000</span>)</span><br><span class="line">  object space <span class="number">5120</span>K, <span class="number">4</span>% used [<span class="number">0x00000000fec00000</span>,<span class="number">0x00000000fec3a000</span>,<span class="number">0x00000000ff100000</span>)</span><br><span class="line"> Metaspace used <span class="number">2690</span>K, capacity <span class="number">4486</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span> <span class="title">used</span> 297<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><br>调大新生代后，对象在新生代</p><h3 id="XX-NewRatio"><a href="#XX-NewRatio" class="headerlink" title="-XX:NewRatio"></a>-XX:NewRatio</h3><p>新生代(eden + 2s) 和老年代的比值<br>4 标识 新生代：老年代= 1：4，即年轻代占堆的 1/5</p><h3 id="XX-SurvivorRatio"><a href="#XX-SurvivorRatio" class="headerlink" title="-XX:SurvivorRatio"></a>-XX:SurvivorRatio</h3><p>设置两个 Survivor 区 和 eden 的比<br>8 标识两个 Survivor:eden = 2：8 即，一个 Survivor 占年轻代的 1/10</p><h3 id="XX-HeapDumpOnOutOfMemoryError"><a href="#XX-HeapDumpOnOutOfMemoryError" class="headerlink" title="-XX:+HeapDumpOnOutOfMemoryError"></a>-XX:+HeapDumpOnOutOfMemoryError</h3><p>OOM 的时候导出堆到文件</p><h3 id="XX-HeapDumpPath"><a href="#XX-HeapDumpPath" class="headerlink" title="-XX:HeapDumpPath"></a>-XX:HeapDumpPath</h3><p>导出文件路径<br>-XX:HeapDumpPath=logs/a.dump</p><h3 id="XX-OnOutOfMemoryError"><a href="#XX-OnOutOfMemoryError" class="headerlink" title="-XX:OnOutOfMemoryError"></a>-XX:OnOutOfMemoryError</h3><p>在 OOM 时候，执行一个脚本<br>-XX:OnOutOfMemoryError=”test.bat %p”<br>可以在 OOM 的时候发送邮件，甚至重启程序<br>外面套引号<br>测试了一下，可以执行脚本，但是 %p 进程没有传进去，在windows 上测试的</p><h3 id="堆分配总结"><a href="#堆分配总结" class="headerlink" title="堆分配总结"></a>堆分配总结</h3><p>官方推荐<br>新生代占堆的 3/8<br>幸存代占新生代的 1/10<br>OOM的时候记得 Dump 堆，确保可以排查现场问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Trace-跟踪参数&quot;&gt;&lt;a href=&quot;#Trace-跟踪参数&quot; class=&quot;headerlink&quot; title=&quot;Trace 跟踪参数&quot;&gt;&lt;/a&gt;Trace 跟踪参数&lt;/h2&gt;&lt;h3 id=&quot;XX-PrintGC&quot;&gt;&lt;a href=&quot;#XX-PrintGC&quot;
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>jvm 学习笔记</title>
    <link href="http://yoursite.com/2019/07/28/jvm-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/28/jvm-学习笔记/</id>
    <published>2019-07-28T04:38:37.000Z</published>
    <updated>2019-11-09T16:47:40.412Z</updated>
    
    <content type="html"><![CDATA[<p><code>深入理解 java 虚拟机</code>  这本书看了也有几遍了，说实话，每次都是面试前看的（我也没面几次试)<br>虽然每次看，感觉都可以多理解一点东西，但还是很虚。。先做个笔记，以后面试看笔记就行  </p><h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><p>这个是面试但时候常问的，也是比较好理解的<br>运行时数据区域分为  </p><ol><li>程序计数器<br>可以看作当前线程执行字节码的行号指示器，字节码在jvm内部是解释执行的（没 jit 之前）</li><li>java 虚拟机栈<br>也是线程私有的，每个方法创建一个栈帧，用于存储 局部变量表，操作数栈，动态链接，方法出口<br>局部变量表存放编译器可知的各种基本数据类型，对象引用，变量表的空间按 slot 分配，一个 slot 4个字节<br>当线程请求的栈深度大于虚拟机所允许的深度抛 StackOverflowError 栈溢出异常，如果是动态扩展栈空间的时候内存不足，则是 OOM 异常</li><li>本地方法栈<br>native 方法栈</li><li>java 堆<br>这个是最需要关系的区域<br>也是共享的一块内存区域，存放对象实例，也是 垃圾回收的主要区域<br>堆还可以细分为 新生代 老年代，注意是为了方便 gc 可以通过 -Xmx -Xms 控制，这个两个是常用的控制最大最小堆内存空间的jvm参数</li><li>方法区，也是元空间<br>通常用于存储已经被虚拟机加载的 类信息，常量信息，静态变量，即使编译器后的代码，也叫 非堆 NonHeap ，也被称为永久代，通常这部分内容很难被回收掉，要回收的条件也比较严格</li><li>直接内存<br>也是对外内存，nio 的时候会用到</li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>垃圾回收其实可以分为两部分看，一个是怎么判断一个对象已经失效了，另一个才是实际回收内存操作  </p><p><strong>对象已死吗</strong></p><ol><li>引用计数<br>就算对象每被引用一次，就 + 1，释放就 -1 到0 到 0 到时候代表没用了<br>这是一个思路，jvm 内部不使用这种策略，在 netty 中，只用 pooled** 到内存池的时候使用的就是引用计数来判断的</li><li>可达性分析<br>这个是主流的方法，根据 GC Root 对象为起点，往下搜索，走过的路径代表引用链，不在引用链上的对象可以认为死对象<br>那么哪些对象是在 GC Root 呢<ul><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的变量</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI 引用的对象<br>这里面其实可以看到后期的一个优化，栈上分配，当方法执行完成后，对象就失效了，因此在方法内部分配的对象，生命周期是短暂的</li></ul></li></ol><p><strong>引用</strong><br>java 内部将引用分为4种</p><ol><li>强引用<br>这也是最常见的，通常 new 出来的都是这种，只要强引用还在，垃圾回收器永远不会回收</li><li>软引用<br>提供 SoftReference 来实现软引用，在将要内存溢出的情况下，才去回收这块内存</li><li>弱引用<br>提供 WeakReference 来实现弱引用，下次 gc 的时候，就会回收这块内容</li><li>虚引用<br>PhantomReference 基本就只是在回收的时候获得一个通知 </li></ol><p><strong>回收方法区</strong><br>由于在 jdk8 中，字符串常量池已经从方法区（元空间）移到堆了，这里说下类被回收（卸载）<br>满足3个条件</p><ol><li>类的所有实例已经被回收</li><li>类的 classloader 已经被回收</li><li>类 class 对象没有被引用</li></ol><p>就可以被回收了，注意是 可以，并不一定 </p><h2 id="垃圾搜集算法"><a href="#垃圾搜集算法" class="headerlink" title="垃圾搜集算法"></a>垃圾搜集算法</h2><ol><li><p>标记清除<br>跟名字已有，分为两个过程，标记阶段，标记需要回收的对象，然后统一清除被标记的对象<br>有两个问题，1. 标记和清除的效率不高 2. 会产生很多内存碎片</p></li><li><p>复制算法<br>将内存分为2块相同的区域，先用一块，用完的时候，将还存活的对象复制到另一半，然后将之前使用过的内存区域一次性清除。<br>问题也很大，内存缩小为原来的一半了</p></li><li><p>标记整理<br>与标记清除类似，不过后续步骤不是清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界外的内存</p></li><li><p>分代算法<br>就是将内存划分为几块区域，一般分为新生代和老年代，针对不同区域使用不同的垃圾回收算法</p></li></ol><p><strong>枚举根节点</strong><br>GC Root 的节点主要在全局性的引用和执行上下文中。<br>当在进行可达性分析的时候，需要 GC 停顿，不可以在分析过程中对象关系引用还在不断变化中。  </p><p><strong>安全点</strong><br>虚拟机将在特定位置记录协助 GC Root 枚举信息，这些位置称为 Sofapoint 安全点  </p><p><strong>安全区域</strong><br>安全区域是指在一段代码片段中国，引用关系不会发生变化</p><h2 id="垃圾搜集器"><a href="#垃圾搜集器" class="headerlink" title="垃圾搜集器"></a>垃圾搜集器</h2><p>新生代：Serial，ParNew，Parallel Scavenge<br>老年代：CMS，Serial Old，Parallel Old<br>全部：G1</p><p><strong>Serial</strong><br>这是一个单线程的搜集器，在进行垃圾搜集的时候需要进行暂停所有的工作线程。<br>这是在 Client 模式下默认的垃圾搜集器<br>能与老年代的 CMS，Serial Old 共用 </p><p><strong>ParNew</strong><br>其实就是 Serial 的多线程版本</p><p><strong>Parallel Scavenge</strong><br>目标是达到一个可控制的吞吐量，也就是 cpu 运行用户代码与 cpu 总消耗时间的比值<br>停顿时间越短适合需要与用户交互的程序，高吞吐量则是高效率的利用 cpu 时间 </p><p><strong>Serial Old</strong><br>单线程搜集器，使用标记整理算法，也是给 client 模式的虚拟机用的</p><p><strong>Parallel Old</strong><br>多线程加标记整理算法</p><p><strong>CMS</strong><br>是一种以获取最短回收停顿时间为目标的搜集器<br>使用标记清除算法。整个过程分为4个步骤：</p><ol><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除<br>初始标记和重新标记需要 stop the world<br>整个初始标记时间很短<br>整个过程耗时最长的并发标记和并发清除过程，gc 线程可以和用户线程同时工作<br>问题：</li><li>cpu 资源敏感，gc 会占用 cpu 资源</li><li>无法清除浮动垃圾，也就是在并发清理过程中产生的垃圾要在下次 gc 清除</li><li>标记清除，没做整理，可以设置参数</li></ol><p><strong>G1</strong><br>这个垃圾回收器与之前的都不一样内存划分不同，将堆划分为一个个 Region,默认 512k<br>在逻辑上连续，物理上不连续，同时每个 Regin 被标记为 E，S，O，H，分别表示 Eden，survivor，old，Humongous（大对象）<br>大于等于 region 一半大小的对象为 大对象，分配在老年代 </p><p>eden 出生的对象， 经过一次 Minor GC 还存活，如果 Survivor 还能容纳，就进入 Survivor，年龄设置为 1<br>每在 Suvivor 熬过一次 Minor GC，年龄 +1，增加到一定程度 默认 15 晋升老年代。  </p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><ol><li>加载</li><li>链接<ul><li>验证</li><li>准备</li><li>解析</li></ul></li><li>初始化<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2></li><li>取得类的二进制流</li><li>转为方法区（元空间）的数据结构</li><li>生成 class 对象<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3></li><li>文件格式正确<ul><li>是否已 0xCAFEBABE 开头</li><li>版本号是否合理</li><li>。。。</li></ul></li><li>元数据验证<ul><li>是否有父类</li><li>继承了 final 类？</li><li>非抽象实现了所有的抽象方法</li><li>。。</li></ul></li><li>字节码验证（很复杂）<ul><li>运行检查</li><li>栈数据类型和操作码数据参数吻合</li><li>跳转指令到合理位置</li><li>。。</li></ul></li><li>符号引用验证<ul><li>常量池中描述类是否存在</li><li>访问的方法或字段是否存在且有足够的权限</li><li>。。<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3>分配内存，并为类赋值初值<br>public static int v = 1<br>在 准备阶段 v 会被设置为 0<br>在初始化的<clinit> 中才会设置为1<br>对于 static final 类型，在准备阶段就会被赋值正确的值<br>public static int v = 1<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3>符号引用替换为直接引用<br>符号引用：字符串，引用对象不一定被加载<br>直接引用：指针或者地址便宜，引用对象一定在内存<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2></li></ul></li></ol><ul><li>执行类构造器 <clinit><ul><li>static 变量赋值语句</li><li>static {} 语句</li></ul></li><li>子类的 <clinit> 调用前保证父类的 <clinit> 被调用</li><li><clinit> 是线程安全的</li></ul><h2 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h2><p>一堆 JIT 优化，然鹅记不住 </p><ol><li>公共子表达式消除</li><li>数组边界检查消除</li><li>方法内联</li><li>。。一大堆优化手段 </li></ol><h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p>java 内存模型主要用来屏蔽底层各种硬件和操作系统的差异，给java程序在各个平台都能达到一致的内存访问效果。<br>以下指令是原子的：</p><ol><li>lock</li><li>unlock</li><li>read</li><li>load</li><li>use</li><li>assign</li><li>store</li><li>write</li></ol><p>要将一个变量从主内存复制到工作内存，需要 read + load<br>将工作内存的变量写回主内存需要 store + write<br>这上面两个是不可拆分使用的<br>volatile 变量将保证可见性 </p><p>并发的3个关键特性</p><ol><li>原子性</li><li>可见性</li><li>有序性</li></ol><p>几个先行发生原则，关注几个：</p><ol><li>单线程的代码顺序性</li><li>加锁先于解锁</li><li>volatile 写先于读</li><li>线程 start 先于每个动作</li><li>所有操作先于线程终止</li><li>线程中断限于被中断线程的代码检查中断事件发生</li><li>对象的初始化完成先于终结（finalize）</li><li>a 先于 b，b先于 c 那么 a 先于 c  </li></ol><p>无论是编译重排序还是cpu 的指令重排序，java 内存模型保证上面的先行发生原则。<br>使用在适当的位置插入内存屏障来实现。  </p><p>好吧，上面基本就是一些提纲，没啥具体内容，主要是为了看到这些，想到需要了解的知识  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;深入理解 java 虚拟机&lt;/code&gt;  这本书看了也有几遍了，说实话，每次都是面试前看的（我也没面几次试)&lt;br&gt;虽然每次看，感觉都可以多理解一点东西，但还是很虚。。先做个笔记，以后面试看笔记就行  &lt;/p&gt;
&lt;h2 id=&quot;内存区域&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>redis 学习笔记</title>
    <link href="http://yoursite.com/2019/07/28/redis-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/28/redis-学习笔记/</id>
    <published>2019-07-28T02:41:03.000Z</published>
    <updated>2019-11-09T16:47:35.921Z</updated>
    
    <content type="html"><![CDATA[<p>redis 之前只是会用，经常看一些博客和官网的使用说明，但是还没成体系的学习过<br>最近买了本 <code>Redis 开发与运维</code> ，买这本书对理由是我虽然会用，但是对譬如哨兵，集群方案，<br>内部 redis 之间是怎么通信对等一些细节不是很了解。想要详细了解下   </p><p>写这篇笔记，目的是，以后redis 相关等至少看自己等这篇笔记就可以了，不用经常回去翻书<br>其实书早就看完了。感觉要补一篇学习笔记。顺便用耗子哥说的总结归纳方法试一下<br>只归纳以下重点，具体细节就不罗列了</p><p>先套下学习模板  </p><ol><li>这个技术出现的背景，初衷和要达到什么样的目标或者是要解决什么样的问题</li><li>这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么</li><li>这个技术的适用场景</li><li>技术的组成部分和关键点</li><li>技术的底层原理和关键实现</li><li>已有的实现和它之间的对比</li></ol><h2 id="这个技术出现的背景"><a href="#这个技术出现的背景" class="headerlink" title="这个技术出现的背景"></a>这个技术出现的背景</h2><p><code>redis</code> 的作者实现原因是因为想要实现高性能的队列功能，用传统的 <code>mysql</code> 没办法达到性能要求<br>因此想要做一个专属的 <code>LLOOGG</code> 数据库。<br>这样看起来，简单的来说，<code>redis</code> 的出现背景是针对 传统数据库存储的性能不足 </p><h2 id="这个技术的优势和劣势分别是什么"><a href="#这个技术的优势和劣势分别是什么" class="headerlink" title="这个技术的优势和劣势分别是什么"></a>这个技术的优势和劣势分别是什么</h2><ol><li>速度快。 读写达到10w/s</li><li>基于键值对对数据结构服务器。支持常用的数据结构</li><li>丰富的功能。键过期，发布订阅，lua脚本，简单事务，流水线</li><li>简单稳定。单线程模型</li><li>支持的客户端语言多</li><li>支持持久化</li><li>主从复制</li><li>高可用和分布式</li></ol><h2 id="这个技术的适用场景"><a href="#这个技术的适用场景" class="headerlink" title="这个技术的适用场景"></a>这个技术的适用场景</h2><ol><li>缓存。大部分使用场景都是这个</li><li>消息队列系统。简单的消息队列，基于发布订阅或者阻塞队列。这个只针对简单的队列功能，无持久化，重复，等复杂功能</li><li>排行榜和计数器应用。。。这是书上说的，感觉其实就是使用 <code>redis</code> 里面的数据结构实现的一些功能。</li></ol><p>不适用的场景：1. 数据存储。<code>redis</code> 是基于内存的，不应该将全部数据或者冷数据放到 <code>redis</code> </p><h2 id="技术的组成部分和关键点"><a href="#技术的组成部分和关键点" class="headerlink" title="技术的组成部分和关键点"></a>技术的组成部分和关键点</h2><p><strong>单线程模型</strong><br>首先，就是单线程模型，这个一定要知道。<br>所谓单线程模型，不代表 redis 进程内部只有一个线程，而是，只用单线程处理客户请求的命令<br>所以从客户端发请求到响应要经过以下过程：</p><ol><li>命令网络传输</li><li>命令队列等待时间</li><li>命令处理时间</li><li>命令响应网络传输</li></ol><p>通常 redis 保证命令处理时间很短，当然，在有大量 key 的 redis 使用 keys 命令也是会执行很长时间的</p><p><strong>数据结构</strong><br>支持5种数据结构。 string，hash，list，set，zset</p><p>string 内部编码是 </p><ol><li>raw &gt;39个字节的字符串</li><li>int 8个字节长整型</li><li>embstr &lt;= 39 个字节的字符串<br>hash 的内部编码：</li><li>hashtable  不满足下面的情况下使用</li><li>ziplist  hash类型元素个数小于 hash-max-ziplist-entries 默认 512 个，这个是一个紧凑的结构，节省内存<br>list 的内部编码是 </li><li>linkedlist 不满足下面的条件</li><li>ziplist 列表元素个数小于 list-max-ziplist-entries 默认 512 个，同时列表每个元素的值小于 list-max-ziplist-value 默认 64 字节<br>set 的内部编码是 </li><li>hashtable 不满足下面</li><li>intset 元素是整数，并且数量小于 set-man-intset-entries<br>zset 的内部编码是 </li><li>skiplist 不满足下面条件</li><li>ziplist 元素个数小于 zet-max-ziplist-entries 默认 128 个 同时元素小于 zset-max-ziplist-value 默认 64 字节</li></ol><p><strong>键过期</strong><br><code>expire</code> 设置过期时间 和 <code>ttl</code> 查询存活时间，返回 -1 代表没设置过期时间，-2 键不存在<br>键过期有两种方式，一种是惰性的，当访问到 key 到时候检查 key 过期了才移除，另一种是定时抽样检查移除过期的 key，如果比例大于 25%，继续进行抽样，直到运行超时 25ms </p><p><strong>pipeline</strong><br>pipeline 简单点说，就是将一批命令，整体打包发送给 redis，这样节省了 客户端与redis 的网络通信时间</p><p><strong>持久化</strong><br>主要有两种持久化方式 rdb 和 aof </p><ol><li><p>rdb<br>rdb 相当于当前 redis 数据的快照，生成文件存放在硬盘<br>分为自动触发和手动触发，手动使用 <code>bgsave</code> 自动就是配置 <code>save m n</code> 标示 m 秒内有 n 次修改触发<br>文件保存 dir 配置的目录下，文件名韦 dbfilename 配置<br>rdb 没办法做到实时持久化，是一个紧凑的 二进制文件，redis 加载 rdb 文件比 aof 快</p></li><li><p>aof<br>就是以独立日志记录每次写命令，<br>开启需要 appendonly yes 配置开启 文件名为 appendfilename 配置<br>里面关键的是文件同步策略。每次命令是写在缓冲区，什么时候刷盘，需要配置 appendfsync 有 always everysec no 默认是 everysec<br>当 aof 文件很大的时候可以重写，直接使用当前 redis 的数据重写 aof 文件<br>手动触发 使用命令 bgrewriteaof<br>自动触发 根据配置 auto-aof-rewrite-min-size 和 auto-aof-rewrite-percentage </p></li></ol><p><strong>事务</strong><br>将一组要执行的命令放在 multi  和 exec 命令中间<br>可以使用 discard 命令停止事务<br>如果命令过程中有语法错误，事务不执行<br>如果命令用错了，譬如 sadd 写成了 zadd ，错误前面的命令会执行。。</p><p><strong>支持主从复制</strong><br>主从是高可用的基础<br>启动的时候使用配置 slaveof host port 配置<br>也可以在运行过程中执行命令 slaveof host port<br>查看主从信息，可以 info replication 命令<br>断开主从，可以 slaveof no one 断开主从连接，不会删除已有数据，只是无法接收新的数据变化<br>可以先断开主从，然后切换新的主节点，注意，切换过程中原有数据将删除，重新同步新的主节点数据，slave 默认只读<br>每个 redis 节点根据 运行id 区分，每次启动都会动态分配一个 40 位的运行 id</p><p><strong>高可用-哨兵</strong><br>哨兵基于主从复制，在主节点出现故障的时候完成故障转移操作，提升一个从节点为主节点，并将其他从节点修改主节点地址<br>判断主节点故障至少需要 n/2 + 1 个哨兵确认<br>客户端获取主节点地址要通过哨兵获取，每监控一个主键点，其实就是一个 mastername，一套哨兵可以同时监控多个主节点</p><p>故障转移的步骤简单说</p><ol><li>判断主节点故障</li><li>选择一个 sentinal 节点完成故障转移功能</li><li>选择一个数据最全的从节点作为新的主节点</li><li>切换</li></ol><p>当然，中间有很多细节，就不写了。就算看了也估计就能记一段时间，这些概念还是能够理解的</p><p><strong>高可用-集群</strong><br>当数据量过大，单个节点存不下所有数据，需要多个 redis 节点分担的时候，使用 redis 集群方案<br>数据分区规则：<br>根据虚拟槽分区，使用一个 hash 函数，将数据映射到一个 整数集合中，定义为 slot 槽，redis 到 slot 范围为 0 - 16383<br>每个 redis 主节点负责一部分 slot，一个 redis 集群，必须每个 slot 都有节点负责，这个时候 redis 集群才能正常工作  </p><p>以集群模式启动 redis 需要配置<br>cluster-enabled yes<br>配置内部配置文件，这个通常是生成的配置<br>cluster-config-file node-port.conf  </p><p>然后完成节点握手 通过 gossip 流言协议，达到互相感知<br>cluster meet host port 命令</p><p>然后分配 slot<br>cluster addslots {0…5461} </p><p>分配了slot 的节点可以认为是主节点，然后配置其他节点复制响应的主节点，根据 nodeid 复制<br>cluster replicate nodeid</p><p>当然，手动配置比较复杂，使用 redis-trib.rb 搭建集群简单点 </p><p>当有新的节点加入，可以将部分 slot 转移个新节点<br>当有主节点退出，也可以将他负责的 slot 转移给其他节点</p><h2 id="已有的实现和它之间的对比"><a href="#已有的实现和它之间的对比" class="headerlink" title="已有的实现和它之间的对比"></a>已有的实现和它之间的对比</h2><p>memcached 多线程模型，只支持 key value<br>好吧，其实我没用过，也没了解过这个东西。。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了上面的5个数据结构，还有一些扩展 </p><p><strong>位图</strong><br>bitmap<br>事件上是字符串，内部存 0 1<br>命令 setbit key offset value    getbit key offset<br>还有一些其他的命令，用到的时候可以详细看  </p><p><strong>hyperloglog</strong><br>这实际上是一个基数算法，可以使用更少的内存空间完成集合运算，当然存在一定误差</p><p><strong>pub/sub</strong><br>基于频道的发布订阅，之前高可用内部通信很多都是基于这个<br>可以看着简单的队列<br>命令：<br>publish chennel message<br>subscribe channel<br>unsubscribe channel</p><p><strong>geo</strong><br>地理位置信息<br>geoadd key longtitude latitude member 。。。</p><p>完成地理位置信息的录入后，可以做些计算。。没用过  </p><p><strong>stream</strong><br>redis5 新增的一个消息队列<br>与 kafka 类型，之前的发布订阅，订阅者可以获取全量数据，并且无法获取之前的数据<br>stream 目前会存一份原数据，消费者也分为消费者组，每个组消费全量数据，组内每个消费者竞争获取</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;redis 之前只是会用，经常看一些博客和官网的使用说明，但是还没成体系的学习过&lt;br&gt;最近买了本 &lt;code&gt;Redis 开发与运维&lt;/code&gt; ，买这本书对理由是我虽然会用，但是对譬如哨兵，集群方案，&lt;br&gt;内部 redis 之间是怎么通信对等一些细节不是很了解。想要
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Rest学习</title>
    <link href="http://yoursite.com/2019/07/27/Rest%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/07/27/Rest学习/</id>
    <published>2019-07-27T04:37:55.000Z</published>
    <updated>2019-11-09T16:48:34.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><h3 id="消息（1字头）"><a href="#消息（1字头）" class="headerlink" title="消息（1字头）"></a>消息（1字头）</h3><ul><li>100<br>客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。    </li><li>101<br>服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。    </li><li>102<br>由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。    </li></ul><h3 id="成功（2字头）"><a href="#成功（2字头）" class="headerlink" title="成功（2字头）"></a>成功（2字头）</h3><ul><li>200<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。    </li><li>201<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。    </li><li>202<br>服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。<br>返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。    </li><li>203<br>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。    </li><li>204<br>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。<br>如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。<br>由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。    </li><li>205<br>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。    </li><li>206<br>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。    </li><li>207<br>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。    </li></ul><h3 id="重定向（3字头）"><a href="#重定向（3字头）" class="headerlink" title="重定向（3字头）"></a>重定向（3字头）</h3><ul><li>300<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。    </li><li>301<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。<br>如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。    </li><li>302<br>请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。    </li><li>303<br>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。    </li><li>304<br>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。<br>该响应必须包含以下的头信息：<br>Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。<br>ETag 和/或 Content-Location，假如同样的请求本应返回200响应。<br>Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。    </li><li>305<br>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。    </li><li>306<br>在最新版的规范中，306状态码已经不再被使用。    </li><li>307<br>请求的资源临时从不同的URI 响应请求。    </li></ul><h3 id="请求错误（4字头）"><a href="#请求错误（4字头）" class="headerlink" title="请求错误（4字头）"></a>请求错误（4字头）</h3><ul><li>400<br>语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。    </li><li>401<br>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。    </li><li>402<br>该状态码是为了将来可能的需求而预留的。    </li><li>403<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。    </li><li>404<br>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。    </li><li>405<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。<br>鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。    </li><li>406<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。<br>除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。    </li><li>407<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。    </li><li>408<br>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。    </li><li><p>409<br>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。    </p></li><li><p>410<br>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。<br>410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。    </p></li><li>411<br>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。    </li><li>412<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。    </li><li>413<br>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。    </li><li>414<br>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：<br>本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。<br>重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。    </li><li>415<br>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。    </li><li>416<br>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。    </li><li>417<br>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。    </li><li>422<br>请求格式正确，但是由于含有语义错误，无法响应。    </li><li>423<br>当前资源被锁定。    </li><li>424<br>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。     </li><li>425<br>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。    </li><li>426<br>客户端应当切换到TLS/1.0。（RFC 2817）</li><li>449<br>由微软扩展，代表请求应当在执行完适当的操作后进行重试。    </li></ul><h3 id="服务器错误（5-6字头）"><a href="#服务器错误（5-6字头）" class="headerlink" title="服务器错误（5,6字头）"></a>服务器错误（5,6字头）</h3><ul><li>500<br>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。    </li><li>501<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。    </li><li>502<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。    </li><li>503<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。    </li><li>504<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。    </li><li>505<br>服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。    </li><li>506<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。    </li><li>507<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。     </li><li>509<br>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。    </li><li>510<br>获取资源所需要的策略并没有没满足。    </li><li>600<br>源站没有返回响应头部，只返回实体内容    </li></ul><hr><h2 id="开发REST-API"><a href="#开发REST-API" class="headerlink" title="开发REST API"></a>开发REST API</h2><p>使用REST虽然非常简单，但是，设计一套合理的REST框架却需要仔细考虑很多问题。    </p><h3 id="问题一：如何组织URL"><a href="#问题一：如何组织URL" class="headerlink" title="问题一：如何组织URL"></a>问题一：如何组织URL</h3><p>在实际工程中，一个Web应用既有REST，还有MVC，可能还需要集成其他第三方系统。如何组织URL？<br>一个简单的方法是通过固定的前缀区分。例如，<code>/static/</code>开头的URL是静态资源文件，类似的，<code>/api/</code>开头的URL就是REST API，其他URL是普通的MVC请求。<br>使用不同的子域名也可以区分，但对于中小项目来说配置麻烦。随着项目的扩大，将来仍然可以把单域名拆成多域名。    </p><h3 id="问题二：如何统一输出REST"><a href="#问题二：如何统一输出REST" class="headerlink" title="问题二：如何统一输出REST"></a>问题二：如何统一输出REST</h3><p>如果每个异步函数都编写下面这样的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置Content-Type:</span></span><br><span class="line">ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line"><span class="comment">// 设置Response Body:</span></span><br><span class="line">ctx.response.body = &#123;</span><br><span class="line">    products: products</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>很显然，这样的重复代码很容易导致错误，例如，写错了字符串<code>&#39;application/json&#39;</code>，或者漏写了<code>ctx.response.type = &#39;application/json&#39;</code>，都会导致浏览器得不到JSON数据。    </p><h3 id="问题三：如何处理错误"><a href="#问题三：如何处理错误" class="headerlink" title="问题三：如何处理错误"></a>问题三：如何处理错误</h3><p>这个问题实际上有两部分。<br>第一，当REST API请求出错时，我们如何返回错误信息？<br>第二，当客户端收到REST响应后，如何判断是成功还是错误？<br>这两部分还必须统一考虑。<br>REST架构本身对错误处理并没有统一的规定。实际应用时，各种各样的错误处理机制都有。有的设计得比较合理，有的设计得不合理，导致客户端尤其是手机客户端处理API简直就是噩梦。<br>在涉及到REST API的错误时，我们必须先意识到，客户端会遇到两种类型的REST API错误。<br>一类是类似403，404，500等错误，这些错误实际上是HTTP请求可能发生的错误。REST请求只是一种请求类型和响应类型均为JSON的HTTP请求，因此，这些错误在REST请求中也会发生。<br>针对这种类型的错误，客户端除了提示用户“出现了网络错误，稍后重试”以外，并无法获得具体的错误信息。<br>另一类错误是业务逻辑的错误，例如，输入了不合法的Email地址，试图删除一个不存在的Product，等等。这种类型的错误完全可以通过JSON返回给客户端，这样，客户端可以根据错误信息提示用户“Email不合法”等，以便用户修复后重新请求API。<br>问题的关键在于客户端必须能区分出这两种类型的错误。<br>第一类的错误实际上客户端可以识别，并且我们也无法操控HTTP服务器的错误码。<br>第二类的错误信息是一个JSON字符串，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="string">"10000"</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"Bad email address"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是HTTP的返回码应该用啥？<br>有的Web应用使用<code>200</code>，这样客户端在识别出第一类错误后，如果遇到<code>200</code>响应，则根据响应的JSON判断是否有错误。这种方式对于动态语言（例如，JavaScript，Python等）非常容易：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(response.data);</span><br><span class="line"><span class="keyword">if</span> (result.code) &#123;</span><br><span class="line">    <span class="comment">// 有错误:</span></span><br><span class="line">    alert(result.message);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，对于静态语言（例如，Java）就比较麻烦，很多时候，不得不做两次序列化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">APIError err = objectMapper.readValue(jsonString, APIError<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (err.code == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 没有错误，还需要重新转换:</span></span><br><span class="line">    User user = objectMapper.readValue(jsonString, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有错误:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有的Web应用对正确的REST响应使用<code>200</code>，对错误的REST响应使用<code>400</code>，这样，客户端即是静态语言，也可以根据HTTP响应码判断是否出错，出错时直接把结果反序列化为APIError对象。<br>两种方式各有优劣。我们选择第二种，<code>200</code>表示成功响应，<code>400</code>表示失败响应。    </p><p>但是，要注意，<em>绝不能</em>混合其他HTTP错误码。例如，使用401响应“登录失败”，使用403响应“权限不够”。这会使客户端无法有效识别HTTP错误码和业务错误，其原因在于HTTP协议定义的错误码十分偏向底层，而REST API属于“高层”协议，不应该复用底层的错误码。    </p><h3 id="如何定义错误码"><a href="#如何定义错误码" class="headerlink" title="如何定义错误码"></a>如何定义错误码</h3><p>REST架构本身同样没有标准的错误码定义一说，因此，有的Web应用使用数字<code>1000、1001……</code>作为错误码，例如Twitter和新浪微博，有的Web应用使用字符串作为错误码，例如YouTube。到底哪一种比较好呢？    </p><p>我们强烈建议使用字符串作为错误码。原因在于，使用数字作为错误码时，API提供者需要维护一份错误码代码说明表，并且，该文档必须时刻与API发布同步，否则，客户端开发者遇到一个文档上没有写明的错误码，就完全不知道发生了什么错误。    </p><p>使用字符串作为错误码，最大的好处在于不用查表，根据字面意思也能猜个八九不离十。例如，YouTube API如果返回一个错误<code>authError</code>，基本上能猜到是因为认证失败。    </p><p>我们定义的REST API错误格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="string">"错误代码"</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"错误描述信息"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，错误代码命名规范为<em>大类:子类</em>，例如，口令不匹配的登录错误代码为<code>auth:bad_password</code>，用户名不存在的登录错误代码为<code>auth:user_not_found</code>。这样，客户端既可以简单匹配某个类别的错误，也可以精确匹配某个特定的错误。    </p><h3 id="问题五：如何返回错误"><a href="#问题五：如何返回错误" class="headerlink" title="问题五：如何返回错误"></a>问题五：如何返回错误</h3><p>如果一个REST异步函数想要返回错误，一个直观的想法是调用<code>ctx.rest()</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user = processLogin(username, password);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">    ctx.rest(user);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.response.status = <span class="number">400</span>;</span><br><span class="line">    ctx.rest(&#123;</span><br><span class="line">        code: <span class="string">'auth:user_not_found'</span>,</span><br><span class="line">        message: <span class="string">'user not found'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式不好，因为控制流程会混乱，而且，错误只能在Controller函数中输出。<br>更好的方式是异步函数直接用throw语句抛出错误，让middleware去处理错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user = processLogin(username, password);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">    ctx.rest(user);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'auth:user_not_found'</span>, <span class="string">'user not found'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式可以在异步函数的任何地方抛出错误，包括调用的子函数内部。<br>我们只需要稍稍改写一个middleware就可以处理错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    APIError: <span class="function"><span class="keyword">function</span> (<span class="params">code, message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code || <span class="string">'internal:unknown_error'</span>;</span><br><span class="line">        <span class="keyword">this</span>.message = message || <span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    restify: <span class="function">(<span class="params">pathPrefix</span>) =&gt;</span> &#123;</span><br><span class="line">        pathPrefix = pathPrefix || <span class="string">'/api/'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctx.request.path.startsWith(pathPrefix)) &#123;</span><br><span class="line">                <span class="comment">// 绑定rest()方法:</span></span><br><span class="line">                ctx.rest = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                    ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">                    ctx.response.body = data;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> next();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="comment">// 返回错误:</span></span><br><span class="line">                    ctx.response.status = <span class="number">400</span>;</span><br><span class="line">                    ctx.response.type = <span class="string">'application/json'</span>;</span><br><span class="line">                    ctx.response.body = &#123;</span><br><span class="line">                        code: e.code || <span class="string">'internal:unknown_error'</span>,</span><br><span class="line">                        message: e.message || <span class="string">''</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">await</span> next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个错误处理的好处在于，不但简化了Controller的错误处理（只需要throw，其他不管），并且，在遇到非APIError的错误时，自动转换错误码为<code>internal:unknown_error</code>。<br>受益于async/await语法，我们在middleware中可以直接用try…catch捕获异常。如果是callback模式，就无法用try…catch捕获，代码结构将混乱得多。<br>最后，顺便把APIError这个对象export出去。    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-状态码&quot;&gt;&lt;a href=&quot;#HTTP-状态码&quot; class=&quot;headerlink&quot; title=&quot;HTTP 状态码&quot;&gt;&lt;/a&gt;HTTP 状态码&lt;/h2&gt;&lt;h3 id=&quot;消息（1字头）&quot;&gt;&lt;a href=&quot;#消息（1字头）&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
</feed>
