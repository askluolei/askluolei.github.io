<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Askluolei</title>
  
  <subtitle>个人的学习吐槽网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-02T14:17:34.894Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Luo lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组合总和II</title>
    <link href="http://yoursite.com/2019/12/02/leetcode/40/"/>
    <id>http://yoursite.com/2019/12/02/leetcode/40/</id>
    <published>2019-12-02T14:14:16.000Z</published>
    <updated>2019-12-02T14:17:34.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个数组  <code>candidates</code>  和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p><p>说明：</p><p>所有数字（包括目标数）都是正整数。<br>解集不能包含重复的组合。<br><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [10,1,2,7,6,1,5], target = 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,5,2,1,2], target = 5,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>和之前的不同前提<br>1。 数组可能有重复数字<br>2。 不能重复使用数组里面的数字</p><p>还是之前的思路。之前的解法<br>不同点在于，每次都是从 i+1 开始</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 和之前的不同前提</span></span><br><span class="line"><span class="comment">// 1。 数组可能有重复数字</span></span><br><span class="line"><span class="comment">// 2。 不能重复使用数组里面的数字</span></span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(candidates)</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// n*logn</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line">findByCanditates2(<span class="number">0</span>, target, candidates, []<span class="keyword">int</span>&#123;&#125;, &amp;res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findByCanditates2</span><span class="params">(i, target <span class="keyword">int</span>, nums []<span class="keyword">int</span>, candidates []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">*res = <span class="built_in">append</span>(*res, candidates)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(nums) || target &lt; nums[i] &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 问题在这里，如果直接对 candidates 进行修改，这里是 go 这里是引用传参，会导致其他地方都会有问题</span></span><br><span class="line"><span class="comment">// 因此，新建一个 slice 然后 copy，但是，copy 对时候，注意 newCandidate 对初始长度与 candidates 一样，否则多出来对会为0，如果少了，它也不自动扩容</span></span><br><span class="line"><span class="comment">// 因此这里使用 make 创建，而不是初始定义，初始定义为 nil，copy 没作用</span></span><br><span class="line"><span class="keyword">var</span> newCandidate = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(candidates))</span><br><span class="line"><span class="built_in">copy</span>(newCandidate, candidates)</span><br><span class="line">  newCandidate = <span class="built_in">append</span>(newCandidate, nums[i])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不同点1:  i+1 开始</span></span><br><span class="line">findByCanditates2(i+<span class="number">1</span>, target - nums[i], nums, newCandidate, res)</span><br><span class="line"></span><br><span class="line">length := <span class="built_in">len</span>(nums)</span><br><span class="line">  <span class="keyword">var</span> j = i + <span class="number">1</span></span><br><span class="line">  <span class="comment">// 不同点2: 跳过同样的数字</span></span><br><span class="line"><span class="keyword">for</span> ;j &lt; length &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]; j++ &#123;&#125;</span><br><span class="line">findByCanditates2(j, target, nums, candidates, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个数组  &lt;code&gt;candidates&lt;/code&gt;  和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>组合总和</title>
    <link href="http://yoursite.com/2019/12/01/leetcode/39/"/>
    <id>http://yoursite.com/2019/12/01/leetcode/39/</id>
    <published>2019-12-01T14:33:35.000Z</published>
    <updated>2019-12-01T14:41:18.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><p>所有数字（包括 target）都是正整数。<br>解集不能包含重复的组合。<br><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,6,7], target = 7,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8,</span><br><span class="line">所求解集为:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>先排序，用来剔除重复的结果<br>譬如 <code>candidates = [2, 3, 7], target = 18</code><br>思路就是从 <code>18 - 2</code> <code>18 - 3</code> <code>18 - 7</code> ，然后递归调用。  </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 可以重复使用列表里面的数</span></span><br><span class="line"><span class="comment">// 结果不能重复</span></span><br><span class="line"><span class="keyword">var</span> res [][]<span class="keyword">int</span></span><br><span class="line">n := <span class="built_in">len</span>(candidates)</span><br><span class="line"><span class="keyword">if</span> n != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// n*logn</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line">findByCanditates(<span class="number">0</span>, target, candidates, []<span class="keyword">int</span>&#123;&#125;, &amp;res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findByCanditates</span><span class="params">(i, target <span class="keyword">int</span>, nums []<span class="keyword">int</span>, candidates []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">  <span class="comment">// 结果在这里</span></span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">*res = <span class="built_in">append</span>(*res, candidates)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 截止情况</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="built_in">len</span>(nums) || target &lt; nums[i] &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 问题在这里，如果直接对 candidates 进行修改，这里是 go 这里是引用传参，会导致其他地方都会有问题</span></span><br><span class="line"><span class="comment">// 因此，新建一个 slice 然后 copy，但是，copy 对时候，注意 newCandidate 对初始长度与 candidates 一样，否则多出来对会为0，如果少了，它也不自动扩容</span></span><br><span class="line"><span class="comment">// 因此这里使用 make 创建，而不是初始定义，初始定义为 nil，copy 没作用</span></span><br><span class="line"><span class="keyword">var</span> newCandidate = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(candidates))</span><br><span class="line"><span class="built_in">copy</span>(newCandidate, candidates)</span><br><span class="line">  newCandidate = <span class="built_in">append</span>(newCandidate, nums[i])</span><br><span class="line">  <span class="comment">// 使用递归调用，来构建树，这里代表深度，尝试先用小的数累加，然后看看有没有结果</span></span><br><span class="line">  findByCanditates(i, target - nums[i], nums, newCandidate, res)</span><br><span class="line">  <span class="comment">// 这里是广度，target 没变化，i + 1，代表，尝试往后面看，有没有用最少的数量组成结果</span></span><br><span class="line">findByCanditates(i+<span class="number">1</span>, target, nums, candidates, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索插入位置</title>
    <link href="http://yoursite.com/2019/11/30/leetcode/35/"/>
    <id>http://yoursite.com/2019/11/30/leetcode/35/</id>
    <published>2019-11-30T04:24:50.000Z</published>
    <updated>2019-11-30T16:52:42.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><br><em>示例 3:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br><em>示例 4:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>爆破了，就是找第一个 <code>&gt; target</code> 的位置 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 暴力</span></span><br><span class="line">l := <span class="built_in">len</span>(nums)</span><br><span class="line">res := l</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; l; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] &gt;= target &#123;</span><br><span class="line">res = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>二分，<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line">l := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="comment">//res := l</span></span><br><span class="line">left := <span class="number">0</span></span><br><span class="line">right := l - <span class="number">1</span></span><br><span class="line"><span class="comment">// 问题在于，还需要找到插入的位置，target 也可能在数组中不存在</span></span><br><span class="line"><span class="keyword">for</span> ; left &lt;= right; &#123;</span><br><span class="line">mid := left + (right - left) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="http://yoursite.com/2019/11/28/leetcode/34/"/>
    <id>http://yoursite.com/2019/11/28/leetcode/34/</id>
    <published>2019-11-28T13:11:56.000Z</published>
    <updated>2019-11-28T13:44:28.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p><p>你的算法时间复杂度必须是 <code>O(log n)</code> 级别。</p><p>如果数组中不存在目标值，返回 <code>[-1, -1]</code>。</p><p><em>示例 1:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出: [3,4]</span><br></pre></td></tr></table></figure><br><em>示例 2:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出: [-1,-1]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>log 级别，需要使用二分法</p><p>自己的思路是，先二分找到 target，然后从该 index，左右扩展，寻找边界坐标<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res []<span class="keyword">int</span></span><br><span class="line">res = <span class="built_in">append</span>(res, <span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line">left := <span class="number">0</span>;</span><br><span class="line">right := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; left &lt;= right; &#123;</span><br><span class="line">mid := left + (right - left) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> left = mid; left &gt;= <span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]; left--&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> right = mid; right &lt;= <span class="built_in">len</span> - <span class="number">2</span> &amp;&amp; nums[right] == nums[right+<span class="number">1</span>]; right++&#123;&#125;</span><br><span class="line">res[<span class="number">0</span>] = left</span><br><span class="line">res[<span class="number">1</span>] = right</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个按照升序排列的整数数组 &lt;code&gt;nums&lt;/code&gt;，和一个目标值 &lt;code&gt;target&lt;/code&gt;。找出给定目标值在数
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索旋转排序数组</title>
    <link href="http://yoursite.com/2019/11/26/leetcode/33/"/>
    <id>http://yoursite.com/2019/11/26/leetcode/33/</id>
    <published>2019-11-26T13:13:08.000Z</published>
    <updated>2019-11-26T13:15:30.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 <code>[0,1,2,4,5,6,7]</code> 可能变为 <code>[4,5,6,7,0,1,2]</code> )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><br><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>O(log n) 肯定是需要二分法的,思路直接看注释了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// logn 肯定是需要二分法了</span></span><br><span class="line">result := <span class="number">-1</span></span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="comment">// 头尾指针</span></span><br><span class="line"><span class="keyword">for</span> ; start &lt;= end; &#123;</span><br><span class="line"><span class="comment">// 取中间的数</span></span><br><span class="line">mid := start + (end - start) / <span class="number">2</span></span><br><span class="line"><span class="comment">// 刚好等于，那就返回结果</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始 比 mid 小， start - mid 是一个升序</span></span><br><span class="line"><span class="keyword">if</span> nums[start] &lt;= nums[mid] &#123;</span><br><span class="line"><span class="comment">// 如果 target 在 start 和 mid 中间，那么就在 start，mid-1 里面找</span></span><br><span class="line"><span class="keyword">if</span> target &gt;= nums[start] &amp;&amp; target &lt; nums[mid] &#123;</span><br><span class="line">end = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则 就是在 mid + 1， end</span></span><br><span class="line">start = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 那么  mid - end 是升序，类似的处理</span></span><br><span class="line"><span class="keyword">if</span> target &gt; nums[mid] &amp;&amp; target &lt;= nums[end] &#123;</span><br><span class="line">start = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">end = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>jvm-垃圾搜集器</title>
    <link href="http://yoursite.com/2019/11/26/jvm-%E5%9E%83%E5%9C%BE%E6%90%9C%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2019/11/26/jvm-垃圾搜集器/</id>
    <published>2019-11-25T16:08:15.000Z</published>
    <updated>2019-11-25T16:08:15.315Z</updated>
    
    <content type="html"><![CDATA[<p>垃圾回收需要考虑三件事  </p><ol><li>哪些内存需要回收</li><li>什么时候回收</li><li>如何回收</li></ol><h2 id="对象是否已死"><a href="#对象是否已死" class="headerlink" title="对象是否已死"></a>对象是否已死</h2><ol><li>引用计数</li><li>可达性分析</li></ol><p>引用类型  </p><ul><li>强引用  常用的，new </li><li>软引用  将要发生内存溢出，会回收软引用</li><li>弱引用  下一次 gc 到来的时候回收</li><li>虚引用  不知道啥时候回收，只是为了获取通知</li></ul><p>类卸载条件</p><ul><li>类的所有实例已被回收</li><li>加载该类的 ClassLoader 已经被回收</li><li>类的 Class 对象没有被其他地方引用</li></ul><h2 id="垃圾搜集算法"><a href="#垃圾搜集算法" class="headerlink" title="垃圾搜集算法"></a>垃圾搜集算法</h2><ol><li>标记清除 Mark-Sweep</li><li>复制算法</li><li>标记整理 Mark-Compact</li><li><p>分代收集算法 </p></li><li><p>枚举根节点<br>从 GCRoot 找引用链，不在链路上的就是垃圾了</p></li><li>安全点<br>SafePoint，在特定的位置，记录引用，就是安全点</li><li>安全区域<br>线程没在执行的情况，不会引起引用发生变化的区域，是安全区域</li></ol><h2 id="垃圾搜集器"><a href="#垃圾搜集器" class="headerlink" title="垃圾搜集器"></a>垃圾搜集器</h2><ul><li>Young: Serial，ParNew，Parallel Scavenge，   G1</li><li>Old: CMS, Serial Old, Parallel Old     G1</li></ul><ol><li>Serial<br>最基本的垃圾搜集器，是单线程的搜集器，在垃圾搜集的时候，需要停止其他工作线程</li><li>ParNew<br>是 Serial 的多线程版本</li><li>Parallel Scavenge<br>关注点在达到可控制的吞吐量。<br>上面三个都是复制算法</li><li>Seril Old<br>1 的老年代版本</li><li>Parallel Old<br>Parallel Scavenge 的老年代版本，多线程和标记整理算法</li><li>CMS<br>多线程+标记清除，工作分为 4 步<ol><li>初始标记   stop the world   速度很快</li><li>并发标记</li><li>重新标记   stop the world</li><li>并发清除<br>缺点：</li><li>会占用用户线程 CPU 资源</li><li>无法清除浮动垃圾 并发清理阶段产生的垃圾</li><li>会有空间碎片，如果过多，可能导致 Full GC</li></ol></li><li>G1<br>并发，分代搜集，空间整合，可预测的停顿<br>基本和上面的不一样了，将真个内存区域划分为 Region ，Region 可以用来作为新生代，老年代，不需要空间连续<br>步骤<ol><li>初始标记  stop the world  时间很短</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol></li></ol><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h2><ol><li>优先在 Eden 分配</li><li>当 Eden 没有足够的空间进行分配，将发起一次 Minor GC</li><li>大对象直接进老年代，长字符串，数组</li><li>长期存活多对象进老年代，对象在 Eden 出生经过一次 Minor GC，进入 Survivor 区，年龄为1，没熬过一次 Minor GC 年龄 + 1，到 15（默认），进老年代，例外：如果相同年龄占 survivor 一半以上，年龄大于等于这个年龄的，直接进老年代</li></ol><p><em>空间分配担保</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在发生 Minor GC 之前，检测</span><br><span class="line">if 老年代 最大连续可用空间 &gt; 新生代所有对象空间</span><br><span class="line">  Minor GC</span><br><span class="line">else if 允许担保是吧 &amp;&amp; 老年代 最大连续可用空间 &gt; 历次晋升到老年代的空间</span><br><span class="line">  Minor GC</span><br><span class="line">else </span><br><span class="line">  Full GC</span><br></pre></td></tr></table></figure><br>空间分配担保，主要是为了减少 <code>Full GC</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;垃圾回收需要考虑三件事  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哪些内存需要回收&lt;/li&gt;
&lt;li&gt;什么时候回收&lt;/li&gt;
&lt;li&gt;如何回收&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;对象是否已死&quot;&gt;&lt;a href=&quot;#对象是否已死&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>下一个排列</title>
    <link href="http://yoursite.com/2019/11/24/leetcode/31/"/>
    <id>http://yoursite.com/2019/11/24/leetcode/31/</id>
    <published>2019-11-24T15:46:39.000Z</published>
    <updated>2019-11-24T16:08:24.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须<em>原地</em>修改，只允许使用额外常数空间。</p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>首先要理解题目意思，什么是下一个序列，最小序列，最大序列<br><code>1,2,3</code>  可以看做数字 <code>123</code> 那么使用 <code>1,2,3</code> 数字组合的下一个序列是 <code>1,3,2</code> 其实就是 <code>1,2,3</code> 三个数字排列组合后，当前排列的更大的一个排列。   什么时候最小呢？升序的时候，就是 <code>123</code> 什么时候最大呢 ？ 降序的时候 <code>321</code> 。<br>来一个更普通的例子 <code>1,5,8,4,7,5,3,1</code> ,它的下一个序列是什么呢？ <code>1,5,8,5,1,3,4,7</code><br>我们直接看换的思路是什么？首先降序排列是最大的，同样适用于局部，这里的分界是 <code>4,7</code>,我们只要将 <code>4</code> 替换为 <code>5</code>(刚好比 <code>4</code> 大的) 后面的变成升序（最小）就行了。<br>具体到思路  </p><ol><li>找到 <code>a[i] &lt;= a[i + 1]</code></li><li>在 <code>i</code> 的右侧，找到刚好大于 <code>a[i]</code> 的数 <code>a[j]</code></li><li>交互 <code>a[i], a[j]</code></li><li>从 <code>i + 1</code> 开始，后面的数变成降序</li></ol><p>大体思路就是上面的，当然，基于这个思路还可以有一些细节优化</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextPermutation</span><span class="params">(nums []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">i := <span class="built_in">len</span>(nums) - <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> ; i &gt;= <span class="number">0</span> &amp;&amp; nums[i + <span class="number">1</span>] &lt;= nums[i]; i--&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> i &gt;= <span class="number">0</span> &#123;</span><br><span class="line">j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &lt;= nums[i]; j--&#123;&#125;</span><br><span class="line">swap(nums, i, j)</span><br><span class="line">&#125;</span><br><span class="line">reverse(nums, i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(nums []<span class="keyword">int</span>, start <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">i := start</span><br><span class="line">j := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; j ; &#123;</span><br><span class="line">swap(nums, i, j)</span><br><span class="line">i++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(nums []<span class="keyword">int</span>, i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">temp := nums[i]</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">nums[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。&lt;/p&gt;
&lt;p&gt;如果不存在下一个更大的排列，则将数字重新
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>jvm-自动内存管理</title>
    <link href="http://yoursite.com/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/23/jvm-自动内存管理/</id>
    <published>2019-11-23T09:32:11.000Z</published>
    <updated>2019-11-25T15:07:36.319Z</updated>
    
    <content type="html"><![CDATA[<p><code>深入理解 Java 虚拟机</code> 读书笔记 </p><h2 id="运行时数据区域划分"><a href="#运行时数据区域划分" class="headerlink" title="运行时数据区域划分"></a>运行时数据区域划分</h2><ol><li>方法区（元空间）<br>线程共享区域，主要存储已被虚拟机加载的类信息，常量，静态变量，即时编译后的产物，也叫非堆（Non Heap）<br>运行时常量池。</li><li>虚拟机栈<br>线程私有的，生命周期和线程相同，每个方法执行的同时都会创建一个栈帧（Stack Frame），用来存局部变量表，操作数栈，动态链接，方法出口等信息，<br>局部变量表存放编译期可知的各种基本数据类型，每个局部变量空间（slot）为 32 位，64 为长度的类型占用两个 slot</li><li>本地方法栈<br>为 native 方法服务的</li><li>堆<br>最大的一块内存区域，也是线程共享的内存区域，几乎所有的对象都在这里分配内存。<br>这里也是垃圾回收的主要区域，因为分代搜集算法，所以堆还可细分为 新生代 和 老年代，新生代再细致一点有 eden，from survivor， to survivor，</li><li>程序计数器<br>可以看作是当前线程所执行的字节码行号指示器，线程私有的</li><li>直接内存<br>DirectByteBuffer 引用一块堆外内存</li></ol><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>普通对象创建（不包含数组，<code>Class</code> 对象）  </p><ol><li>类加载过程<br>在常量池中是否定位一个类的符号引用<br>类是否已被加载，解析，初始化</li><li>新生对象分配内存<br>对象所需的内存大小在类加载完成后就已经确定？<br>分配内存的方式<ul><li>指针碰撞： 假设内存规整，由于对象所需内存大小已知，只需要记录边界指针，移动响应的大小就行类</li><li>空闲列表： 内存不规整，那么就需要记录哪些空间是可用的，需要维护一个列表<br>内存是否规整由采用的垃圾回收器决定。 Serial ， ParNew 等垃圾搜集完毕，会整理内存，因此是 指针碰撞<br>CMS 基于标记-清除，没有内存整理，因此是空闲列表<br>创建对象是非常频繁的操作，直接指针修改位置，是非线程安全的，有两种解决方式<ul><li>CAS 失败重试，并发常用的模式</li><li>TLAB 本地线程分配缓冲，每个线程先预分配一小块内存，用完了，才需要同步锁定<br>内存分配完毕后，会初始化零值，应该可以理解为所有位全部置 0</li></ul></li></ul></li><li>对象设置<br>例如，这个对象是哪个类的实例。如何找到类的元数据，对象哈希码，对象的 GC 分代年龄。这些信息放对象头中</li><li>init 方法<br>从虚拟机角度，上面3个步骤后，对象就已经创建完了，但是还没执行 init 方法，也就是构造方法，当然，字段的初值也是在 init 方法里面执行</li></ol><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>可以分为 3 个区域：对象头，实例数据，对齐填充 </p><p><em>对象头</em><br>包含两部分数据</p><ol><li>对象自身运行时数据：哈希码，GC 分代年龄，锁状态标志，线程持有的锁，偏向线程id，偏向时间戳等，在 64 为虚拟机中占 64 位，也就是常说的 Mark Word</li><li>类型指针：指向类的元数据指针，并不是所有虚拟机实现都必须在对象上保留类型指针</li><li>如果是数组，那么还有数组长度</li></ol><p>32位 对象头内存布局<br><img src="/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/JVM32-obj-header.png" class="" title="JVM 32位对象头内存布局"></p><p>64位 对象头内存布局<br><img src="/2019/11/23/jvm-%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/JVM64-obj-header.png" class="" title="JVM 64位对象头内存布局"></p><p><em>实例数据</em><br>各种类型的字段内容，包括父类继承的和自己的</p><p><em>填充*</em><br>对象内存起始地址必须是 8 字节的整数倍，如果没对齐，就有对齐填充了</p><h2 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h2><p>Java 程序需要使用栈上的 reference 数据来操作具体的堆上的具体对象。<br>reference 指向一个的对象的引用，有两种访问方式</p><ol><li>句柄：堆中单独划分一块内存，用来存句柄池，reference 指向句柄地址，句柄包含对象实例数据，类型数据的具体地址</li><li>直接指针: reference 直接指向对象地址</li></ol><p>句柄的好处是 referenc 存储稳定，对象移动（GC 影响）只修改 句柄到对象的指向。<br>直接指针的好处就是速度快。<br><code>Hotspot</code> 采用的是 直接指针</p><h2 id="内存溢出问题-OutOfMemoryError"><a href="#内存溢出问题-OutOfMemoryError" class="headerlink" title="内存溢出问题 OutOfMemoryError"></a>内存溢出问题 OutOfMemoryError</h2><p><em>堆内存溢出</em><br>堆内存大小设置以及内存溢出时候 dump，这几个 JVM 参数是常用的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置最小堆内存</span><br><span class="line">-Xms20m</span><br><span class="line">设置最大堆内存</span><br><span class="line">-Xmx20m</span><br><span class="line">发生内存溢出的时候 dump，通常 JVM 用 -XX:+/- 来代表 true/false</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure></p><p>有来 dump 文件，可以使用 MAT 进行分析。查看哪个对象占用空间大，也可以查看泄露对象到 GC root 的引用链，分析为什么没有释放内存  </p><p><em>虚拟机栈和本地方法栈</em><br>栈空间大小设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xss</span><br><span class="line">-Xsx</span><br></pre></td></tr></table></figure></p><p>栈空间，如果请求深度过大，会是 <code>StackOverflowError</code> , 也是栈溢出，通常在递归调用的时候容易出现<br>当虚拟机在扩展栈空间的时候，无法申请到足够的内存空间，则抛出 <code>OutOfMemoryError</code> </p><p><em>方法区/元空间</em><br>这里导致溢出，通常是动态代理，或者字节码技术生成 class 过多导致的</p><p><em>本机直接内存溢出*</em><br>由于 nio 可以申请使用堆外内存。<br>堆外内存限制可以使用参 <code>-XX: MaxDirectMemorySize</code> 指定<br>由直接内存导致的内存溢出，一个明显的特征是 Heap Dump 文件中看不到明显的异常，Dump 文件也很小</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;深入理解 Java 虚拟机&lt;/code&gt; 读书笔记 &lt;/p&gt;
&lt;h2 id=&quot;运行时数据区域划分&quot;&gt;&lt;a href=&quot;#运行时数据区域划分&quot; class=&quot;headerlink&quot; title=&quot;运行时数据区域划分&quot;&gt;&lt;/a&gt;运行时数据区域划分&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>移除元素</title>
    <link href="http://yoursite.com/2019/11/23/leetcode/27/"/>
    <id>http://yoursite.com/2019/11/23/leetcode/27/</id>
    <published>2019-11-23T08:34:06.000Z</published>
    <updated>2019-11-23T08:39:43.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要原地移除所有数值等于 <code>val</code> 的元素，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p>首先，理解一下题目，最后想要的结果，是数组中 <code>!= val</code> 的数量，并且，这些数需要被挪到数组前面，不管顺序<br>过程条件,额外空间为 <code>O(1)</code>,那就是不能使用额外数组空间了 </p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>快慢指针，慢指针用来记录最后结果存储的下标，快指针遍历原数组<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 快慢双指针，i 为填充数组的坐标，j 遍历原数组</span></span><br><span class="line"><span class="comment">// 当不等于 val 当时候，保留， == val 当时候 j++ 了后面保留在 i 的位置</span></span><br><span class="line"><span class="comment">// 这里问题在于，如果 nums 全不同，实际上，会有很多无效的赋值操作</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j &lt; <span class="built_in">len</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[j] != val &#123;</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>将 <code>== val</code> 的数丢到数组后面就行了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 理解题目，其实就是将 != val 的数挪到前面去，那我们把 == val 的丢到数组最后就行了</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> ; i &lt; n; &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">nums[i] = nums[n - <span class="number">1</span>]</span><br><span class="line">n--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个数组 &lt;code&gt;nums&lt;/code&gt; 和一个值 &lt;code&gt;val&lt;/code&gt;，你需要原地移除所有数值等于 &lt;code&gt;val
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>线程池常见问题记录</title>
    <link href="http://yoursite.com/2019/11/22/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/11/22/线程池常见问题记录/</id>
    <published>2019-11-22T04:03:26.000Z</published>
    <updated>2019-11-22T04:03:26.998Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常见的关于线程池的问题，参考其他看过的资料，总结为自己的答案</p><h2 id="为什么不推荐使用-Executors-创建线程池"><a href="#为什么不推荐使用-Executors-创建线程池" class="headerlink" title="为什么不推荐使用 Executors 创建线程池"></a>为什么不推荐使用 Executors 创建线程池</h2><p><code>Executors</code> 内部使用的是 <code>ThreadPoolExecutor</code>，如果转为直接使用 <code>ThreadPoolExecutor</code>, 那么需要使用者了解内部的原理，至少知道几个参数是干嘛的。如果使用 <code>Executors</code> 创建，可能不太清楚内部的规则，而导致资源耗尽的异常。</p><h2 id="线程池的参数有哪些"><a href="#线程池的参数有哪些" class="headerlink" title="线程池的参数有哪些"></a>线程池的参数有哪些</h2><p>这里，其实就是问的 <code>ThreadPoolExecutor</code> 构造需要哪些参数，当然，<code>ThreadPoolExecutor</code> 内部也有几个非构造传入的参数，其中重点参数有</p><ol><li>corePoolSize 核心线程数</li><li>maximumPoolSize 最大线程数</li><li>keepAliveTime 超过核心线程数，最大空闲存活时间</li><li>unit 上面的单位</li><li>workQueue 工作队列</li><li>threadFactory 线程工程，这里注意修改线程名和是否后台线程</li><li>handler  拒绝策略 <code>RejectedExecutionHandler</code> 接口的实现</li></ol><p>除了上面的构造参数，还有一个 <code>allowCoreThreadTimeOut</code> 是否允许释放核心线程，正常情况下，线程池会维持至少 core 个核心线程，如果配置了这个参数，那么核心线程也会使用 <code>keepAliveTime</code> 的配置来释放自己</p><h2 id="线程池的任务提交流程"><a href="#线程池的任务提交流程" class="headerlink" title="线程池的任务提交流程"></a>线程池的任务提交流程</h2><ol><li>如果线程池中线程的数量 小于 core ，那么创建新的任务线程</li><li>如果已经到达了 core 线程，那么丢任务队列 workQueue</li><li>如果队列满了，继续新建线程数量 小于 maximumPoolSize （对单个任务来说，只是建一个线程，当然，也可能建不了，因为 core == maximumPoolSize）</li><li>如果线程数量达到 maximumPoolSize ，那么使用拒绝策略 <code>RejectedExecutionHandler</code></li></ol><h2 id="线程池的关闭方法是上面，对正在运行的线程有怎样的影响"><a href="#线程池的关闭方法是上面，对正在运行的线程有怎样的影响" class="headerlink" title="线程池的关闭方法是上面，对正在运行的线程有怎样的影响"></a>线程池的关闭方法是上面，对正在运行的线程有怎样的影响</h2><p>关闭方法有两个</p><ol><li>shutdown<br>设置为 <code>SHUTDOWN</code> 状态，不再接受新的任务，已有的任务继续执行</li><li>shutdownNow<br>设置为 <code>STOP</code> 状态，不再接受新的任务，尝试停止所有正在执行的任务（设置中断），返回还未执行的任务队列</li></ol><h2 id="线程池有哪些拒绝策略"><a href="#线程池有哪些拒绝策略" class="headerlink" title="线程池有哪些拒绝策略"></a>线程池有哪些拒绝策略</h2><p>拒绝策略是实现 <code>RejectedExecutionHandler</code> 接口。内部有以下几种实现  </p><ol><li>AbortPolicy 抛 <code>RejectedExecutionException</code> 异常， 这个是默认的</li><li>DiscardPolicy  啥事也不做，默默的丢到任务</li><li>DiscardOldestPolicy  丢到队列头部的任务，也就是最老（早）的任务</li><li>CallerRunsPolicy 直接在调用线程执行任务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些常见的关于线程池的问题，参考其他看过的资料，总结为自己的答案&lt;/p&gt;
&lt;h2 id=&quot;为什么不推荐使用-Executors-创建线程池&quot;&gt;&lt;a href=&quot;#为什么不推荐使用-Executors-创建线程池&quot; class=&quot;headerlink&quot; title=&quot;为什
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>centos 安装 ES</title>
    <link href="http://yoursite.com/2019/11/22/centos-%E5%AE%89%E8%A3%85-ES/"/>
    <id>http://yoursite.com/2019/11/22/centos-安装-ES/</id>
    <published>2019-11-21T16:47:23.000Z</published>
    <updated>2019-11-21T16:47:23.174Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下 <code>centos7</code> 下的 <code>ES</code> 安装<br>首先需要安装 <code>jdk</code><br><code>centos7</code> 里面默认安装了 <code>openjdk</code> 替换为 <code>hotspot</code> 的 <code>jdk</code><br>首先卸载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo rpm --nodeps $(rpm -qa | grep java)</span><br><span class="line">sudo rpm --nodeps $(rpm -qa | grep jdk)</span><br></pre></td></tr></table></figure></p><p>然后使用一下命令，没有 <code>java</code> 信息，就说明卸载干净了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep java</span><br><span class="line">rpm -qa|grep jdk</span><br></pre></td></tr></table></figure></p><p>下载 <code>rpm</code> 的 <code>jdk</code> 包，可以去华为的镜像站去下载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.rpm</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">然后安装  </span><br><span class="line">```sh</span><br><span class="line">sudo rpm -ivh jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure></p><p>验证是否安装成功<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></p><p>现在，需要下载 <code>ES</code> 了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/elasticsearch/6.8.5/elasticsearch-6.8.5.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf elasticsearch-6.8.5.tar.gz</span><br></pre></td></tr></table></figure></p><p>到 bin 目录启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> elasticsearch-6.8.5/bin</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></p><p>可以看到启动日志，当然，也可能启动失败，<code>ES</code> 不能用 <code>root</code> 用户启动，因此，需要添加一个普通用户<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd elsearch</span><br><span class="line">useradd elsearch -g elsearch -p elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后需要修改 <code>elasticsearch</code> 文件夹的所属用户,注意执行命令的目录，在解压的 <code>elasticsearch-6.8.5</code> 父目录<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R elsearch:elsearch elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后切换到 <code>elsearch</code> 用户再启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su elsearch</span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure></p><p>想后台启动，使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure></p><p>验证 <code>ES</code> 启动是否成功，访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://localhost:9200?pretty'</span></span><br></pre></td></tr></table></figure></p><p>看到返回结果，就是启动成功了  </p><p>目前 <code>ES</code> 只能本机访问，如果需要外网访问，需要修改配置  <code>config/elasticsearch.yml</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><br>或者使用指定的 <code>ip</code></p><p>然后启动。<br>可能会报错，因为 ES 这时候开启了启动检测。一些系统参数可能需要修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下 &lt;code&gt;centos7&lt;/code&gt; 下的 &lt;code&gt;ES&lt;/code&gt; 安装&lt;br&gt;首先需要安装 &lt;code&gt;jdk&lt;/code&gt;&lt;br&gt;&lt;code&gt;centos7&lt;/code&gt; 里面默认安装了 &lt;code&gt;openjdk&lt;/code&gt; 替换为 &lt;code
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="安装" scheme="http://yoursite.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="ES" scheme="http://yoursite.com/tags/ES/"/>
    
  </entry>
  
  <entry>
    <title>删除排序数组中的重复项</title>
    <link href="http://yoursite.com/2019/11/21/leetcode/26/"/>
    <id>http://yoursite.com/2019/11/21/leetcode/26/</id>
    <published>2019-11-21T13:37:13.000Z</published>
    <updated>2019-11-21T13:39:36.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>简单问题，就是相同的元素往前堆叠就可以了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i - <span class="number">1</span>] &lt; nums[i] &#123;</span><br><span class="line">nums[index] = nums[i - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">nums[index] = nums[<span class="built_in">len</span> - <span class="number">1</span>]</span><br><span class="line">index++</span><br><span class="line">nums = nums[:index]</span><br><span class="line"><span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>四数之和</title>
    <link href="http://yoursite.com/2019/11/20/leetcode/18/"/>
    <id>http://yoursite.com/2019/11/20/leetcode/18/</id>
    <published>2019-11-20T14:50:51.000Z</published>
    <updated>2019-11-20T15:50:39.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code> 和一个目标值 <code>target</code>，判断 nums 中是否存在四个元素 <code>a，b，c</code> 和 <code>d</code> ，使得 <code>a + b + c + d</code> 的值与 <code>target</code> 相等？找出所有满足条件且不重复的四元组。<br><em>注意：</em><br>答案中不可以包含重复的四元组。</p><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>暴力解法<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums);</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;i!=<span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span> - <span class="number">3</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>];i++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>;j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ;j!=i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>];j++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k := j+<span class="number">1</span>; k &lt; <span class="built_in">len</span> <span class="number">-1</span>;k++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; k != j+<span class="number">1</span> &amp;&amp; k &lt; <span class="built_in">len</span> - <span class="number">1</span>&amp;&amp; nums[k]==nums[k<span class="number">-1</span>];k++&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> l := k+<span class="number">1</span>; l &lt; <span class="built_in">len</span>; l++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k] + nums[l]</span><br><span class="line"><span class="keyword">if</span> sum == target &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], nums[k], nums[l]&#125;)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>基于上面的，结合 <code>a + b = target</code> 的双指针思路<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">4</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 暴力解法扩展,内部使用 a + b = target 的双向指针解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span><span class="number">-3</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; i != <span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">len</span><span class="number">-3</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>]; i++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span><span class="number">-2</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> ; j != i+<span class="number">1</span> &amp;&amp; j &lt; <span class="built_in">len</span><span class="number">-2</span> &amp;&amp; nums[j] == nums[j<span class="number">-1</span>]; j++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex := j + <span class="number">1</span></span><br><span class="line">lastIndex := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line">expect := target - nums[i] - nums[j]</span><br><span class="line"><span class="keyword">for</span> firstIndex &lt; lastIndex &#123;</span><br><span class="line">first := nums[firstIndex]</span><br><span class="line">last := nums[lastIndex]</span><br><span class="line">sum := first + last</span><br><span class="line"><span class="keyword">if</span> sum &gt; expect &#123;</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &lt; expect &#123;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, []<span class="keyword">int</span>&#123;nums[i], nums[j], first, last&#125;)</span><br><span class="line">lastIndex--</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[lastIndex] == nums[lastIndex+<span class="number">1</span>]; lastIndex-- &#123;</span><br><span class="line">&#125;</span><br><span class="line">firstIndex++</span><br><span class="line"><span class="keyword">for</span> ; firstIndex &lt; lastIndex &amp;&amp; nums[firstIndex] == nums[firstIndex<span class="number">-1</span>]; firstIndex++ &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/co
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>最接近的三数之和</title>
    <link href="http://yoursite.com/2019/11/19/leetcode/16/"/>
    <id>http://yoursite.com/2019/11/19/leetcode/16/</id>
    <published>2019-11-19T14:19:52.000Z</published>
    <updated>2019-11-19T15:36:31.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包括 <code>n</code> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>最简单的肯定还是暴力解法，时间复杂度是 O(n <em> n </em> n)<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span> - <span class="number">1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">for</span> k := j + <span class="number">1</span>; k &lt; <span class="built_in">len</span>; k++ &#123;</span><br><span class="line">sum := nums[i] + nums[j] + nums[k]</span><br><span class="line">abs := abs(sum, target)</span><br><span class="line"><span class="keyword">if</span> abs == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">          result = sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">abs</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b - a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>还是像之前的题目，一样，先排序 O(n<em>logn) ，然后固定前面一位，然后前后指针寻找 O(n </em> n) ,总共 O(n * n),当然，里面还有一些细节可以优化。<br>譬如说，类似二分之类的，目前还是一位一位寻找的<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSumClosest</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"></span><br><span class="line">minLen := math.MaxInt64</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; first &lt; last; &#123;</span><br><span class="line">sum := nums[i] + nums[first] + nums[last]</span><br><span class="line"><span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">abs := target - sum</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> sum &gt; target &#123;</span><br><span class="line">abs := sum - target</span><br><span class="line"><span class="keyword">if</span> abs &lt; minLen &#123;</span><br><span class="line">minLen = abs</span><br><span class="line">result = sum</span><br><span class="line">&#125;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包括 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt; 和 一个目标值 &lt;code&gt;target&lt;/c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://yoursite.com/2019/11/18/leetcode/15/"/>
    <id>http://yoursite.com/2019/11/18/leetcode/15/</id>
    <published>2019-11-18T14:08:25.000Z</published>
    <updated>2019-11-18T14:13:38.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？找出所有满足条件且不重复的三元组。<br><em>注意：</em>答案中不可以包含重复的三元组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>暴力解法，3遍 for 循环，但是，不能包含重复的三元组这个条件不好满足<br>继续想，之前又 a + b = target ，那么，我们固定，其实，这里也是满足的 a + b = -c 的模式<br>重复问题，只能用 hash 解决了，但是，我们可以通过先排序，然后去掉同样的元素就可以了，排序的时间复杂度为 O(nlogn) ,是可以接受的。 </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">threeSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> result [][]<span class="keyword">int</span></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先排序</span></span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="comment">// 全部大于0 或者小于0，就没有结果</span></span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span> || nums[<span class="built_in">len</span> - <span class="number">1</span>] &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span> - <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 第一个数  &gt; 0 那就没有了</span></span><br><span class="line"><span class="keyword">if</span> nums[i] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样的数，不需要重复找</span></span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定第一位数，然后前后分别找，类似 寻找数组里面 a + b = target 一样</span></span><br><span class="line">first := i + <span class="number">1</span></span><br><span class="line">last := <span class="built_in">len</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ;first &lt; last &amp;&amp; nums[last] &gt;= <span class="number">0</span>; &#123;</span><br><span class="line">exp := nums[first] + nums[last] + nums[i]</span><br><span class="line"><span class="keyword">if</span> exp &lt; <span class="number">0</span> &#123;</span><br><span class="line">first++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> exp &gt; <span class="number">0</span>&#123;</span><br><span class="line">last--</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">line := []<span class="keyword">int</span>&#123;nums[i], nums[first], nums[last]&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, line)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里剔除重复的</span></span><br><span class="line"><span class="keyword">for</span> first++ ; first &lt; last &amp;&amp; nums[first - <span class="number">1</span>] == nums[first]; first++&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> last-- ; first &lt; last &amp;&amp; nums[last + <span class="number">1</span>] == nums[last]; last--&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定一个包含 &lt;code&gt;n&lt;/code&gt; 个整数的数组 &lt;code&gt;nums&lt;/code&gt;，判断 &lt;code&gt;nums&lt;/code&gt; 中是
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="http://yoursite.com/2019/11/17/leetcode/11/"/>
    <id>http://yoursite.com/2019/11/17/leetcode/11/</id>
    <published>2019-11-17T12:01:57.000Z</published>
    <updated>2019-11-17T12:16:52.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>说明： 你不能倾斜容器，且 n 的值至少为 2。</p><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>暴力解法<br>没啥思路可言，直接穷举了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(height)</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">first := height[i]</span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>; j++ &#123;</span><br><span class="line">second := height[j]</span><br><span class="line">h := min(first, second)</span><br><span class="line">w := j - i</span><br><span class="line">m := h * w</span><br><span class="line"><span class="keyword">if</span> m &gt; result &#123;</span><br><span class="line">result = m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h2><p>从两侧开始，这样 width 最大，选择一个 height 最大的就行了。然后依次遍历，谁小，就从哪边开始减小下标</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 从两侧开始，这样 width 最大，选择一个 height 最大的就行了。然后依次遍历，谁小，就从哪边开始减小下标</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">j := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ;i &lt; j; &#123;</span><br><span class="line">left := height[i]</span><br><span class="line">right := height[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> left &lt;= right &#123;</span><br><span class="line">m = left * (j - i)</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">m = right * (j - i)</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> m &gt; result &#123;</span><br><span class="line">result = m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个有序数组的中位数</title>
    <link href="http://yoursite.com/2019/11/16/leetcode/4/"/>
    <id>http://yoursite.com/2019/11/16/leetcode/4/</id>
    <published>2019-11-16T15:53:47.000Z</published>
    <updated>2019-11-17T06:40:56.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定两个大小为 m 和 n 的 <em>有序</em> 数组 <code>nums1</code> 和 <code>nums2</code>。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 <code>O(log(m + n))</code>。  </p><p><em>示例1</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">则中位数是 2.0</span><br></pre></td></tr></table></figure></p><p><em>示例2</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">则中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>先不管时间复杂度，先求出结果，最简单的就是先排好序，然后取中间值，由于是两个有序数组，排序只需要 <code>O(m + n)</code> </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">// 简单的方法，合并两个有序数组，取中位数，不过不满足题目要求，时间复杂度 O（m + n）</span></span><br><span class="line">mergeArr := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> ;i &lt; <span class="built_in">len</span>(nums1) &amp;&amp; j &lt; <span class="built_in">len</span>(nums2); &#123;</span><br><span class="line">first := nums1[i]</span><br><span class="line">second := nums2[j]</span><br><span class="line"><span class="keyword">if</span> first &lt; second &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, first)</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> first &gt; second &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, second)</span><br><span class="line">j++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, first)</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, second)</span><br><span class="line">i++</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(nums1); i++ &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, nums1[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; j &lt; <span class="built_in">len</span>(nums2); j++ &#123;</span><br><span class="line">mergeArr = <span class="built_in">append</span>(mergeArr, nums2[j])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(mergeArr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">mid := mergeArr[<span class="built_in">len</span>/<span class="number">2</span> - <span class="number">1</span>] + mergeArr[<span class="built_in">len</span>/<span class="number">2</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(mid) / <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(mergeArr[<span class="built_in">len</span> / <span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>是基于思路1的扩展，我们的目的是找到中位数，也就是第 k 位，不需要排序<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="comment">// 基于上面都方法，我们不需要合并，只是找出中位数就可以了，时间复杂度 O（m + n）</span></span><br><span class="line">aLen := <span class="built_in">len</span>(nums1)</span><br><span class="line">bLen := <span class="built_in">len</span>(nums2)</span><br><span class="line"><span class="built_in">len</span> := aLen + bLen</span><br><span class="line"><span class="keyword">var</span> i, j, left, right <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt;= <span class="built_in">len</span> / <span class="number">2</span>; index++ &#123;</span><br><span class="line">left = right</span><br><span class="line"><span class="keyword">if</span> i &lt; aLen &amp;&amp; (j &gt;= bLen || nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">right = nums1[i]</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = nums2[j]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &amp; <span class="number">1</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(left) + <span class="keyword">float64</span>(right)) / <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面两个看的题解。。</p><h3 id="思路3"><a href="#思路3" class="headerlink" title="思路3"></a>思路3</h3><p>上面两个的数据复杂度都不满足题目要求。<br>看到 <code>log</code> 都时间复杂度，应该就要想到 <code>二分法</code>,还是上面都思路，思路2，是一位一位排除的。<br>如果我们取第 K 位，那么，我们可以在两个数组里面各自取 k/2位，比较大小后，就可以直接排除掉 k/2了<br>当然，里面有特例情况，k/2 长度超过了数组 len，那么就取最后一位就行了<br>如果其中一个数组空了，那么也好处理,直接取剩余数组的中位数就行了<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="comment">// 上面两个解法都不满足题目要求，log（m + n） 基本确定需要二分法</span></span><br><span class="line"><span class="comment">// 根据上一个思路，我们是要在排序好第数组里面，找到第 k 个数，如果是一个数组，那么好说，直接二分查找</span></span><br><span class="line"><span class="comment">// 但是上面是两个数组，我们也可以借鉴一些思路</span></span><br><span class="line"><span class="comment">// 譬如，我们要找第 k 个数，那么，同时在两个数组找 k/2 ，如果这个长度大于数组长度，取最后一个</span></span><br><span class="line"><span class="comment">// 比较两个数组里面找的值，谁小，就相当于把 前面的都剔除掉了</span></span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(nums1)</span><br><span class="line">m := <span class="built_in">len</span>(nums2)</span><br><span class="line">left := (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">right := (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">v1 := findMid(&amp;nums1, <span class="number">0</span>, n - <span class="number">1</span>, &amp;nums2, <span class="number">0</span>, m - <span class="number">1</span>, left)</span><br><span class="line">v2 := findMid(&amp;nums1, <span class="number">0</span>, n - <span class="number">1</span>, &amp;nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(v1) + <span class="keyword">float64</span>(v2)) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMid</span><span class="params">(nums1 *[]<span class="keyword">int</span>, start1, end1 <span class="keyword">int</span>, nums2 *[]<span class="keyword">int</span>, start2, end2 <span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">len1 := end1 - start1 + <span class="number">1</span>;</span><br><span class="line">len2 := end2 - start2 + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 确保 nums 先遍历完</span></span><br><span class="line"><span class="keyword">if</span> len1 &gt; len2 &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums2, start2, end2, nums1, start1, end1, k)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当 num1 遍历完，其实就是在 nums2 里面找 第 k 个数</span></span><br><span class="line"><span class="keyword">if</span> len1 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (*nums2)[start2 + k - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找 第 1 个</span></span><br><span class="line"><span class="keyword">if</span> k == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> min((*nums1)[start1], (*nums2)[start2])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取每个数组第 k/2 位数，如果 len 小于 k/2 那就是最后一个数</span></span><br><span class="line">i := start1 + min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">j := start2 + min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排除掉小的</span></span><br><span class="line"><span class="keyword">if</span> (*nums1)[i] &gt; (*nums2)[j] &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> findMid(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="思路4"><a href="#思路4" class="headerlink" title="思路4"></a>思路4</h3><p>什么是中位数，就是一个集合里面，比它小的数量和比它大的数量相同。<br>其实刚看到这题，最想当然的想法就是，取两个数组的中位数，然后平均。。。<br>这想法当然是有问题的，但是思路是木有问题的。首先，满足两边的数量相同，但是没满足大小的比较<br>用图形化的想法，我们将两个数组各自劈成两半，左边是一组，右边是一组，始终保证这个条件下，想办法满足大小条件。<br>怎么满足呢？假设 数组1 的分割位是 i ，数组2 的分割位是 j，只要 i+1 ，j-1 ，这样就可以满足数量不变，去尝试满足大小条件<br>反过来 i-1， j+1 。那么怎么去满足大小关系？左边的最大值 <code>&lt;=</code> 右边的最小值就行了<br>假设数组1 为 A ，数组2 为 B ，那么，只涉及到4位数的比较 <code>A[i - 1], A[i], B[j - 1], B[j]</code><br>又因为 A，B 是有序的，我们只需要比较 <code>A[i-1] &lt;= B[j]  B[j-1] &lt;= A[i]</code> 就行了.<br>然后就是边界条件，具体的可以去看题解<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">m := <span class="built_in">len</span>(nums1)</span><br><span class="line">n := <span class="built_in">len</span>(nums2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证 m &lt;= n</span></span><br><span class="line"><span class="keyword">if</span> m &gt; n &#123;</span><br><span class="line"><span class="keyword">return</span> findMedianSortedArrays(nums2, nums1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iMin := <span class="number">0</span></span><br><span class="line">iMax := m</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ;iMin &lt;= iMax; &#123;</span><br><span class="line">i := (iMin + iMax) / <span class="number">2</span></span><br><span class="line">j := (m + n + <span class="number">1</span>)/ <span class="number">2</span> - i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j != <span class="number">0</span> &amp;&amp; i != m &amp;&amp; nums2[j<span class="number">-1</span>] &gt; nums1[i] &#123; <span class="comment">// i 需要增大</span></span><br><span class="line">iMin = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> i != <span class="number">0</span> &amp;&amp; j != n &amp;&amp; nums1[i<span class="number">-1</span>] &gt; nums2[j] &#123; <span class="comment">// i 需要减小</span></span><br><span class="line">iMax = i - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 达到要求，并且将边界条件列出来单独考虑</span></span><br><span class="line">maxLeft := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">maxLeft = nums2[j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">maxLeft = nums1[i<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxLeft = max(nums1[i<span class="number">-1</span>], nums2[j<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 奇数的话，就不需要考虑右半部分了</span></span><br><span class="line"><span class="keyword">if</span> (m + n) % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(maxLeft)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">minRight := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i == m &#123;</span><br><span class="line">minRight = nums2[j]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> j == n &#123;</span><br><span class="line">minRight = nums1[i]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">minRight = min(nums1[i], nums2[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">float64</span>(maxLeft) + <span class="keyword">float64</span>(minRight)) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;给定两个大小为 m 和 n 的 &lt;em&gt;有序&lt;/em&gt; 数组 &lt;code&gt;nums1&lt;/code&gt; 和 &lt;code&gt;nums2&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>sentinel 学习-下</title>
    <link href="http://yoursite.com/2019/11/14/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8B/"/>
    <id>http://yoursite.com/2019/11/14/sentinel-学习-下/</id>
    <published>2019-11-14T14:13:34.000Z</published>
    <updated>2019-11-14T14:21:53.848Z</updated>
    
    <content type="html"><![CDATA[<p>上篇主要学习了怎么用 <code>sentinel</code><br>这篇主要简单的进入源码瞅瞅 <code>sentinel</code> 的结构  </p><p>上篇中，可以看到，限流操作的基本代码结构为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Entry entry = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ContextUtil.enter(target, origin);</span><br><span class="line">  entry = SphU.entry(resourceName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">   <span class="comment">// 限流处理</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">      entry.exit();</span><br><span class="line">  &#125;</span><br><span class="line">  ContextUtil.exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只不过，在使用的时候，基于 <code>aop</code> 获取拦截器，屏蔽掉类似这样的模板代码<br>那么，这段代码里面到底发生了什么呢？  </p><p>先看整个调用图  </p><img src="/2019/11/14/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8B/sentinel.svg" class="" title="This is an example image"><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><p>这里面需要关注的几个类或接口</p><ol><li>Context</li><li>Node</li><li>Entry</li><li>ProcessorSlotChain</li><li>ProcessorSlot</li></ol><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>每次调用 <code>entry</code> 获取资源<br>首先获取 <code>Context</code>，这是一个 <code>ThreadLocal</code> 变量，线程绑定变量</p><p>包含以下信息</p><ol><li>上下文名称 <code>name</code></li><li>当前调用树的入口节点  <code>entranceNode</code></li><li>当前处理的 <code>Entry</code></li><li>来源信息 <code>origin</code> 通常跨越系统调用才有</li><li>异步表示 <code>async</code> </li></ol><p>一般，可以通过 <code>ContextUtil</code> 来设置 <code>contextName</code> 和 <code>origin</code><br>如果没，则使用默认的上下文  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Context context = ContextUtil.getContext();</span><br><span class="line"><span class="keyword">if</span> (context <span class="keyword">instanceof</span> NullContext) &#123;</span><br><span class="line">    <span class="comment">// The &#123;@link NullContext&#125; indicates that the amount of context has exceeded the threshold,</span></span><br><span class="line">    <span class="comment">// so here init the entry only. No rule checking will be done.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CtEntry(resourceWrapper, <span class="keyword">null</span>, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Using default context.</span></span><br><span class="line">    context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个资源可以对应不同的上下文，以此来区分不同的场景，这样，不同场景的调用可以独立统计<br>每个 <code>contextName</code> 会生成一个 <code>EntranceNode</code> 挂在 <code>Constants.ROOT.addChild(node);</code> 子节点</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>节点，是内部的统计单元，根据在内部的作用，有 <code>ClusterNode</code> <code>EntranceNode</code> <code>DefaultNode</code>     </p><ol><li><code>EntranceNode</code>  是入口节点，通常是外部入口，譬如上面的，每个 contextName 对应的就是入口节点</li><li><code>ClusterNode</code>  集群节点，其实算资源的汇总统计节点，上面说个，每个资源，根据 contextName 会独立统计，就是对应下面的 <code>DefaultNode</code>,每个资源的汇总统计，就是这个节点</li><li><code>DefaultNode</code> 默认节点，上面说了</li></ol><p>节点的统计信息将会用于后面的限流规则<br>里面的统计是基于滑动窗口的，实现类为 <code>LeapArray</code><br>这是一个抽象的实现，实现滑动窗口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeapArray</span><span class="params">(<span class="keyword">int</span> sampleCount, <span class="keyword">int</span> intervalInMs)</span> </span>&#123;</span><br><span class="line">    AssertUtil.isTrue(sampleCount &gt; <span class="number">0</span>, <span class="string">"bucket count is invalid: "</span> + sampleCount);</span><br><span class="line">    AssertUtil.isTrue(intervalInMs &gt; <span class="number">0</span>, <span class="string">"total time interval of the sliding window should be positive"</span>);</span><br><span class="line">    AssertUtil.isTrue(intervalInMs % sampleCount == <span class="number">0</span>, <span class="string">"time span needs to be evenly divided"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.windowLengthInMs = intervalInMs / sampleCount;</span><br><span class="line">    <span class="keyword">this</span>.intervalInMs = intervalInMs;</span><br><span class="line">    <span class="keyword">this</span>.sampleCount = sampleCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.array = <span class="keyword">new</span> AtomicReferenceArray&lt;&gt;(sampleCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>intervalInMs 代表每个窗口时间<br>sampleCount  代表将窗口时间划分为多少分，越多越平滑，性能也越差</p><p><code>sentinel</code> 内部，秒级窗口,默认是 2 1000<br>也就是内部将1s 划分为 2 个  500 ms  统计    </p><p>具体实现有 <code>BucketLeapArray</code> <code>OccupiableBucketLeapArray</code>    </p><p><code>BucketLeapArray</code>  为普通实现,不支持预占资源<br><code>OccupiableBucketLeapArray</code>  这个在内部维护一个 <code>FutureBucketLeapArray</code> 用来记录未来资源使用情况，来允许预占资源</p><h2 id="ProcessorSlotChain-ProcessorSlot"><a href="#ProcessorSlotChain-ProcessorSlot" class="headerlink" title="ProcessorSlotChain ProcessorSlot"></a>ProcessorSlotChain ProcessorSlot</h2><p>处理链 和 处理插槽可以一起看，所有规则都是对应处理插槽处理的。使用 <code>SPI</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SlotChainBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build the processor slot chain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a processor slot that chain some slots together</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ProcessorSlotChain <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过实现上面的接口，来构建处理链<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSlotChainBuilder</span> <span class="keyword">implements</span> <span class="title">SlotChainBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessorSlotChain <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessorSlotChain chain = <span class="keyword">new</span> DefaultProcessorSlotChain();</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> NodeSelectorSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> ClusterBuilderSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> LogSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> StatisticSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> AuthoritySlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> SystemSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> FlowSlot());</span><br><span class="line">        chain.addLast(<span class="keyword">new</span> DegradeSlot());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认的实现，这里的 <code>Slot</code> 是限流的规则处理  </p><h3 id="NodeSelectorSlot"><a href="#NodeSelectorSlot" class="headerlink" title="NodeSelectorSlot"></a>NodeSelectorSlot</h3><p>这个插槽记录调用链，设置当前的 node<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node 记录统计信息，因此需要缓存</span></span><br><span class="line"> DefaultNode node = map.get(context.getName());</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            node = map.get(context.getName());</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">                node = <span class="keyword">new</span> DefaultNode(resourceWrapper, <span class="keyword">null</span>);</span><br><span class="line">                HashMap&lt;String, DefaultNode&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;String, DefaultNode&gt;(map.size());</span><br><span class="line">                cacheMap.putAll(map);</span><br><span class="line">                cacheMap.put(context.getName(), node);</span><br><span class="line">                map = cacheMap;</span><br><span class="line">                <span class="comment">// 构建调用树</span></span><br><span class="line">                <span class="comment">// Build invocation tree</span></span><br><span class="line">                ((DefaultNode) context.getLastNode()).addChild(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置当前节点</span></span><br><span class="line">    context.setCurNode(node);</span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br></pre></td></tr></table></figure></p><h3 id="ClusterBuilderSlot"><a href="#ClusterBuilderSlot" class="headerlink" title="ClusterBuilderSlot"></a>ClusterBuilderSlot</h3><p>构建 <code>ClusterNode</code> 这里每个资源对应一个，可以看到这里就是一个对象<br>这里是本资源的统计汇总<br>然后根据 <code>origin</code> 构建 <code>OriginNode</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clusterNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create the cluster node.</span></span><br><span class="line">            clusterNode = <span class="keyword">new</span> ClusterNode(resourceWrapper.getName(), resourceWrapper.getResourceType());</span><br><span class="line">            HashMap&lt;ResourceWrapper, ClusterNode&gt; newMap = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max(clusterNodeMap.size(), <span class="number">16</span>));</span><br><span class="line">            newMap.putAll(clusterNodeMap);</span><br><span class="line">            newMap.put(node.getId(), clusterNode);</span><br><span class="line"></span><br><span class="line">            clusterNodeMap = newMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">node.setClusterNode(clusterNode);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * if context origin is set, we should get or create a new &#123;@link Node&#125; of</span></span><br><span class="line"><span class="comment">    * the specific origin.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(context.getOrigin())) &#123;</span><br><span class="line">    Node originNode = node.getClusterNode().getOrCreateOriginNode(context.getOrigin());</span><br><span class="line">    context.getCurEntry().setOriginNode(originNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br></pre></td></tr></table></figure></p><h3 id="StatisticSlot"><a href="#StatisticSlot" class="headerlink" title="StatisticSlot"></a>StatisticSlot</h3><p><code>LogSlot</code> 就是记录日志的.<br><code>StatisticSlot</code> 是记录统计信息，供后面的规则做决策<br>主要记录通过资源的 <code>succ</code> <code>threadNum</code> <code>blocked</code> 等信息<br>这些信息是在 <code>node</code> 处理</p><p>同时会触发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessorSlotEntryCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPass</span><span class="params">(Context context, ResourceWrapper resourceWrapper, T param, <span class="keyword">int</span> count, Object... args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBlocked</span><span class="params">(BlockException ex, Context context, ResourceWrapper resourceWrapper, T param, <span class="keyword">int</span> count, Object... args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回调，可以通过 <code>StatisticSlotCallbackRegistry</code> 注册 </p><h3 id="限流插槽"><a href="#限流插槽" class="headerlink" title="限流插槽"></a>限流插槽</h3><ol><li>AuthoritySlot<br>对应 <code>AuthorityRule</code> 处理黑白名单</li><li>SystemSlot<br>对应 <code>SystemRule</code> ,根据系统整体性能指标 cpu 线程 等限流</li><li>FlowSlot<br>对应 <code>FlowRule</code>,很多限流规则，处理策略，后面细看</li><li>DegradeSlot<br>对应 <code>DegradeRule</code>,这里是熔断规则，满足条件，断开一段时间，然后再次开启</li></ol><p>上面 <code>FlowSlot</code> 是复杂点，可以集群限流  </p><h3 id="FlowSlot"><a href="#FlowSlot" class="headerlink" title="FlowSlot"></a>FlowSlot</h3><p>可以根据 <code>FlowRule</code> 里面的 <code>clusterMode</code> 来判断是本地限流还是集群限流<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPassCheck</span><span class="params">(<span class="comment">/*@NonNull*/</span> FlowRule rule, Context context, DefaultNode node, <span class="keyword">int</span> acquireCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">boolean</span> prioritized)</span> </span>&#123;</span><br><span class="line">    String limitApp = rule.getLimitApp();</span><br><span class="line">    <span class="keyword">if</span> (limitApp == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 集群限流</span></span><br><span class="line">    <span class="keyword">if</span> (rule.isClusterMode()) &#123;</span><br><span class="line">        <span class="keyword">return</span> passClusterCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 本地限流</span></span><br><span class="line">    <span class="keyword">return</span> passLocalCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里先只看本地检查<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">passLocalCheck</span><span class="params">(FlowRule rule, Context context, DefaultNode node, <span class="keyword">int</span> acquireCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">boolean</span> prioritized)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 选择使用哪个 Node 里面的统计信息进行决策</span></span><br><span class="line">    <span class="comment">// 之前说过了，有 Cluster 资源总的统计 Origin 根据来源统计 </span></span><br><span class="line">    <span class="comment">// 使用其他相关资源的 Cluster ,或者 根据</span></span><br><span class="line">    Node selectedNode = selectNodeByRequesterAndStrategy(rule, context, node);</span><br><span class="line">    <span class="keyword">if</span> (selectedNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 然后使用限流器决策，这里的限流器又有多个选择</span></span><br><span class="line">    <span class="keyword">return</span> rule.getRater().canPass(selectedNode, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个的 <code>getRater()</code> 返回的是 <code>TrafficShapingController</code> </p><p>有以下几个实现  </p><ol><li><code>DefaultController</code> 只有超过设置的阈值，直接拒绝</li><li><code>RateLimiterController</code> 均匀限流，固定每个请求之间的最小间隔</li><li><code>WarmUpController</code> 预热,缓慢达到预设的最大值</li><li><code>WarmUpRateLimiterController</code> 看名字，里面涉及到限流算法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇主要学习了怎么用 &lt;code&gt;sentinel&lt;/code&gt;&lt;br&gt;这篇主要简单的进入源码瞅瞅 &lt;code&gt;sentinel&lt;/code&gt; 的结构  &lt;/p&gt;
&lt;p&gt;上篇中，可以看到，限流操作的基本代码结构为&lt;br&gt;&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>sentinel 学习-上</title>
    <link href="http://yoursite.com/2019/11/12/sentinel-%E5%AD%A6%E4%B9%A0-%E4%B8%8A/"/>
    <id>http://yoursite.com/2019/11/12/sentinel-学习-上/</id>
    <published>2019-11-12T12:49:58.000Z</published>
    <updated>2019-11-12T12:50:55.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sentinel-学习"><a href="#sentinel-学习" class="headerlink" title="sentinel 学习"></a>sentinel 学习</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个 <code>spring-boot-start</code> 模块，依赖了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在包里面看到 <code>spring.factories</code> ，这里是集成 <code>spring-boot</code> 的入口    </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.cloud.alibaba.sentinel.SentinelWebAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.alibaba.sentinel.endpoint.SentinelEndpointAutoConfiguration,\</span><br><span class="line">org.springframework.cloud.alibaba.sentinel.custom.SentinelAutoConfiguration,\</span><br><span class="line"><span class="attr">org.springframework.cloud.alibaba.sentinel.feign.SentinelFeignAutoConfiguration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">org.springframework.cloud.alibaba.sentinel.custom.SentinelCircuitBreakerConfiguration</span></span><br></pre></td></tr></table></figure><h3 id="SentinelWebAutoConfiguration"><a href="#SentinelWebAutoConfiguration" class="headerlink" title="SentinelWebAutoConfiguration"></a>SentinelWebAutoConfiguration</h3><p>这个配置默认开启，作用是添加了一个 <code>CommonFilter</code><br>这里过滤器的作用是基于 <code>url</code> 的限流   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest sRequest = (HttpServletRequest) request;</span><br><span class="line">    Entry entry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Entry methodEntry = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是获取 uri  就是排除 contextPath 后面的 uri ，剔除掉 query 参数</span></span><br><span class="line">        String target = FilterUtil.filterTarget(sRequest);</span><br><span class="line">        <span class="comment">// Clean and unify the URL.</span></span><br><span class="line">        <span class="comment">// For REST APIs, you have to clean the URL (e.g. `/foo/1` and `/foo/2` -&gt; `/foo/:id`), or</span></span><br><span class="line">        <span class="comment">// the amount of context and resources will exceed the threshold.</span></span><br><span class="line">        UrlCleaner urlCleaner = WebCallbackManager.getUrlCleaner();</span><br><span class="line">        <span class="comment">// 默认的 UrlCleaner 啥都不做，可以自己做处理， 譬如上面注释里面的路径参数</span></span><br><span class="line">        <span class="keyword">if</span> (urlCleaner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target = urlCleaner.clean(target);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析 origin 自己配置的 RequestOriginParser 实现，如果没有，默认就是 "" 了</span></span><br><span class="line">        <span class="comment">// Parse the request origin using registered origin parser.</span></span><br><span class="line">        String origin = parseOrigin(sRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里就是限流控制了，context 和 resourceName 都是 uri  类型是 EntryType.IN   ，默认的类型是 OUT</span></span><br><span class="line">        ContextUtil.enter(target, origin);</span><br><span class="line">        entry = SphU.entry(target, EntryType.IN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否基于 HTTP METHOD 区分 uri</span></span><br><span class="line">        <span class="comment">// Add method specification if necessary</span></span><br><span class="line">        <span class="keyword">if</span> (httpMethodSpecify) &#123;</span><br><span class="line">          <span class="comment">// 如果需要的话，继续请求限流控制</span></span><br><span class="line">            methodEntry = SphU.entry(sRequest.getMethod().toUpperCase() + COLON + target,</span><br><span class="line">                    EntryType.IN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e) &#123;</span><br><span class="line">        <span class="comment">// 阻塞了，代表本次请求被限流了，限流的原因有多个，大部分是基于 QPS 的</span></span><br><span class="line">        HttpServletResponse sResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="comment">// Return the block page, or redirect to another URL.</span></span><br><span class="line">        WebCallbackManager.getUrlBlockHandler().blocked(sRequest, sResponse, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">        Tracer.trace(e2);</span><br><span class="line">        <span class="keyword">throw</span> e2;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException e3) &#123;</span><br><span class="line">        Tracer.trace(e3);</span><br><span class="line">        <span class="keyword">throw</span> e3;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e4) &#123;</span><br><span class="line">        Tracer.trace(e4);</span><br><span class="line">        <span class="keyword">throw</span> e4;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (methodEntry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            methodEntry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            entry.exit();</span><br><span class="line">        &#125;</span><br><span class="line">        ContextUtil.exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SentinelEndpointAutoConfiguration"><a href="#SentinelEndpointAutoConfiguration" class="headerlink" title="SentinelEndpointAutoConfiguration"></a>SentinelEndpointAutoConfiguration</h3><p>这个配置是对 <code>spring-boot-starter-actuator</code> 的一个扩展。添加了一个 <code>SentinelEndpoint</code>,用来返回展示一些基本配置和规则配置  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReadOperation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (sentinelProperties.isEnabled()) &#123;</span><br><span class="line"></span><br><span class="line">    result.put(<span class="string">"appName"</span>, AppNameUtil.getAppName());</span><br><span class="line">    result.put(<span class="string">"logDir"</span>, LogBase.getLogBaseDir());</span><br><span class="line">    result.put(<span class="string">"logUsePid"</span>, LogBase.isLogNameUsePid());</span><br><span class="line">    result.put(<span class="string">"blockPage"</span>, WebServletConfig.getBlockPage());</span><br><span class="line">    result.put(<span class="string">"metricsFileSize"</span>, SentinelConfig.singleMetricFileSize());</span><br><span class="line">    result.put(<span class="string">"metricsFileCharset"</span>, SentinelConfig.charset());</span><br><span class="line">    result.put(<span class="string">"totalMetricsFileCount"</span>, SentinelConfig.totalMetricFileCount());</span><br><span class="line">    result.put(<span class="string">"consoleServer"</span>, TransportConfig.getConsoleServer());</span><br><span class="line">    result.put(<span class="string">"clientIp"</span>, TransportConfig.getHeartbeatClientIp());</span><br><span class="line">    result.put(<span class="string">"heartbeatIntervalMs"</span>, TransportConfig.getHeartbeatIntervalMs());</span><br><span class="line">    result.put(<span class="string">"clientPort"</span>, TransportConfig.getPort());</span><br><span class="line">    result.put(<span class="string">"coldFactor"</span>, sentinelProperties.getFlow().getColdFactor());</span><br><span class="line">    result.put(<span class="string">"filter"</span>, sentinelProperties.getFilter());</span><br><span class="line">    result.put(<span class="string">"datasource"</span>, sentinelProperties.getDatasource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; rules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    result.put(<span class="string">"rules"</span>, rules);</span><br><span class="line">    rules.put(<span class="string">"flowRules"</span>, FlowRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"degradeRules"</span>, DegradeRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"systemRules"</span>, SystemRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"authorityRule"</span>, AuthorityRuleManager.getRules());</span><br><span class="line">    rules.put(<span class="string">"paramFlowRule"</span>, ParamFlowRuleManager.getRules());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SentinelAutoConfiguration"><a href="#SentinelAutoConfiguration" class="headerlink" title="SentinelAutoConfiguration"></a>SentinelAutoConfiguration</h3><p>这个是比较核心的配置，与 <code>spring</code> 集成的 <code>bean</code> 基本都是在这里注册的<br>还有 <code>sentinel</code> 本身的初始化，也在这里执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 省略一堆配置</span></span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(properties.getServlet().getBlockPage())) &#123;</span><br><span class="line">    WebServletConfig.setBlockPage(properties.getServlet().getBlockPage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  urlBlockHandlerOptional.ifPresent(WebCallbackManager::setUrlBlockHandler);</span><br><span class="line">  urlCleanerOptional.ifPresent(WebCallbackManager::setUrlCleaner);</span><br><span class="line">  requestOriginParserOptional.ifPresent(WebCallbackManager::setRequestOriginParser);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// earlier initialize</span></span><br><span class="line">  <span class="keyword">if</span> (properties.isEager()) &#123;</span><br><span class="line">    <span class="comment">// 核心，这里使用 SPI 加载 InitFunc 的实现，然后初始</span></span><br><span class="line">    InitExecutor.doInit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持 @SentinelResource 注解的 Aspect 类</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelResourceAspect <span class="title">sentinelResourceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelResourceAspect();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看名字就知道是处理 RestTemplate 的，支持 @SentinelRestTemplate 注解，可以指定 block 或者 fallback 处理方法</span></span><br><span class="line"><span class="comment">// 参数类型为 HttpRequest.class, byte[].class, ClientHttpRequestExecution.class, BlockException.class </span></span><br><span class="line"><span class="comment">// 返回类型   ClientHttpResponse.class</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="comment">// 然后添加 SentinelProtectInterceptor</span></span><br><span class="line"><span class="comment">// 这里请求外部资源的时候，要经过两个 entry  1. hostResource (httpMethod):(schema)://(host):(port) 2. hostResource + path</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(name = <span class="string">"org.springframework.web.client.RestTemplate"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"resttemplate.sentinel.enabled"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelBeanPostProcessor <span class="title">sentinelBeanPostProcessor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelBeanPostProcessor(applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是加载配置规则源，规则可以存放在 naco ，apollo 等地方</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelDataSourceHandler <span class="title">sentinelDataSourceHandler</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelDataSourceHandler(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则序列化的地方</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ObjectMapper<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">SentinelConverterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-flow-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonFlowConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, FlowRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-degrade-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonDegradeConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, DegradeRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-system-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonSystemConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, SystemRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-authority-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonAuthorityConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, AuthorityRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span>(<span class="string">"sentinel-json-param-flow-converter"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> JsonConverter <span class="title">jsonParamFlowConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JsonConverter(objectMapper, ParamFlowRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的 <code>InitExecutor.doInit()</code> 触发的是 <code>sentinel</code> 核心的初始化，后面再看 </p><h3 id="SentinelFeignAutoConfiguration"><a href="#SentinelFeignAutoConfiguration" class="headerlink" title="SentinelFeignAutoConfiguration"></a>SentinelFeignAutoConfiguration</h3><p>这里是跟 <code>feign</code> 集成，核心类是 <code>SentinelInvocationHandler</code><br><code>feign</code>,<code>ribbon</code>,<code>hystrix</code> 这里几个是 <code>netflix</code> 的组件，其中 <code>sentinel</code> 替换掉的是 <code>hystrix</code><br>详细的后面梳理完 <code>feign</code> 后再看</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下上面的自动配置  </p><ol><li>系统开放的 <code>rest</code> 接口，根据 <code>path</code> 会过一遍限流（如果区分 <code>http method</code> 则是两遍）</li><li>系统注册的 <code>RestTempate</code> 的时候，如果加上了 <code>@SentinelRestTemplate</code> 注解，则会添加拦截器 <code>SentinelProtectInterceptor</code>,经过两个限流</li><li>使用 <code>feign</code>，<code>@FeignClient</code> 标记的 <code>bean</code>,这里会经过一层限流</li><li>使用 <code>@SentinelResource</code> 注解标记的方法  </li></ol><p>那么问题来了，限流规则是在哪里配置的呢？  </p><p>首先看看 <code>sentinel</code> 支持哪些规则配置  </p><h3 id="AuthorityRule"><a href="#AuthorityRule" class="headerlink" title="AuthorityRule"></a>AuthorityRule</h3><p>权限配置，就是配置黑白名单<br>先看下示例配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"good"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"abc"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"bad"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"bcd"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"terrible"</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"aaa"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>对应的规则类为 <code>AuthorityRule</code>,经过的 <code>slot</code> 为 <code>AuthoritySlot</code><br>其中:</p><ol><li>resource  为资源名，每个规则都需要配置</li><li>limitApp  限制的 app，其实就是针对 <code>origin</code> 来限制的，可以用来限制接入系统，需要提供一个 <code>RequestOriginParser</code> 来获取 <code>origin</code>,如果没有，那么规则配置是无效的</li><li>strategy  不同规则配置，含义不一样。这里 0：白名单 1：黑名单</li></ol><h3 id="SystemRule"><a href="#SystemRule" class="headerlink" title="SystemRule"></a>SystemRule</h3><p>配置示例<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"highestSystemLoad"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"highestCpuUsage"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"qps"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">"avgRt"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"maxThread"</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里虽然是一个数组，但是配置多个规则其实没啥用，总是使用最小有效配置来判断的<br>经过的 <code>slot</code> 为 <code>SystemSlot</code>,根据系统的负载来限流的，只针对 <code>EntryType.IN</code> 类型才有效，默认的都是 <code>OUT</code>,在 <code>CommonFilter</code> 里面为 <code>IN</code><br>配置含义其实看名字就知道了： </p><ol><li>highestSystemLoad  系统负载</li><li>highestCpuUsage   cpu 使用率</li><li>qps 每秒请求数，这里是有效的，被拦截的请求不算在里面</li><li>avgRt 平均响应时间</li><li>maxThread 当前出现线程数</li></ol><p>这里开看成应用总的负载限流  </p><h3 id="FlowRule"><a href="#FlowRule" class="headerlink" title="FlowRule"></a>FlowRule</h3><p>配置示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"/hello"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"/test"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"GET:http://www.taobao.com"</span>,</span><br><span class="line">    <span class="attr">"controlBehavior"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"limitApp"</span>: <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"strategy"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这个规则是针对每个资源，独立的限流配置  </p><ol><li>resource  资源名，可以看上面，默认的资源名生产规则</li><li>grade   配置类型，0：线程数量 1：QPS</li><li>count   配置数量</li><li>strategy  0：用于直接流量控制 默认，1：相关流量控制，2：链流量控制  配置了 1 或者 2，需要配置 refResource,如果配 1，那么直接取对应资源的 ClusterNode，2的话，需要 contextName == refResource</li><li>limitApp  这个必须配，默认 default 如果不配，规则不生效，如果不为 default 或者 other 那么，限流配置单独适应 origin 的限流，例如 配置 app1，那么 app1 的请求信息单独记录，也只根据这个记录来限流控制，不需要管资源的整体调用情况</li><li>refResource  与 strategy 共同起作用</li><li>controlBehavior  限流器的类型 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</li></ol><p>还有一些其他的，在需要特殊用法的时候再看</p><h3 id="DegradeRule"><a href="#DegradeRule" class="headerlink" title="DegradeRule"></a>DegradeRule</h3><p>降级规则<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"abc0"</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">20.0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"passCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"timeWindow"</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"resource"</span>: <span class="string">"abc1"</span>,</span><br><span class="line">    <span class="attr">"count"</span>: <span class="number">15.0</span>,</span><br><span class="line">    <span class="attr">"grade"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"passCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"timeWindow"</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>这个规则是用来断路的，当超过配置的规则时间，直接断路 <code>timeWindow</code> 时间后再开启<br>规则配置：</p><ol><li>resource  资源名</li><li>grade     0: 平均响应时间, 1: 异常比例</li><li>count     配置的阈值</li><li>timeWindow  时间窗口</li></ol><p>除了上面的规则外，还可以有自定义的规则。。    </p><p>刚刚上面的属于本地文件配置，在应用中如下配置<br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.file</span>=<span class="string">classpath: flowrule.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.data-type</span>=<span class="string">json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds1.file.rule-type</span>=<span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.file</span>=<span class="string">classpath: degraderule.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.data-type</span>=<span class="string">json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds2.file.rule-type</span>=<span class="string">degrade</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds3.file.file</span>=<span class="string">classpath: authority.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds3.file.rule-type</span>=<span class="string">authority</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds4.file.file</span>=<span class="string">classpath: system.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds4.file.rule-type</span>=<span class="string">system</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds5.file.file</span>=<span class="string">classpath: param-flow.json</span></span><br><span class="line"><span class="meta">spring.cloud.sentinel.datasource.ds5.file.rule-type</span>=<span class="string">param_flow</span></span><br></pre></td></tr></table></figure></p><p>还支持 <code>apollo</code>, <code>nacos</code>, <code>redis</code>, <code>zk</code> 等  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sentinel-学习&quot;&gt;&lt;a href=&quot;#sentinel-学习&quot; class=&quot;headerlink&quot; title=&quot;sentinel 学习&quot;&gt;&lt;/a&gt;sentinel 学习&lt;/h1&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>由 spring-cloud-alibaba sentinel 示例启动失败引起的研究</title>
    <link href="http://yoursite.com/2019/11/12/%E7%94%B1-spring-cloud-alibaba-sentinel-%E7%A4%BA%E4%BE%8B%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/11/12/由-spring-cloud-alibaba-sentinel-示例启动失败引起的研究/</id>
    <published>2019-11-12T12:47:26.000Z</published>
    <updated>2019-11-12T12:48:55.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h2><p>在看 <code>sentinel</code> 的时候，写了一个示例，添加以下配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sentinel 测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="comment"># 名称随意</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">file:</span></span><br><span class="line">            <span class="attr">file:</span> <span class="string">"classpath: rules/flowRules.json"</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br></pre></td></tr></table></figure></p><p>这是一个本地配置文件来配置 <code>sentinel</code> 规则的示例<br>然后启动应用，发现异常  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to bind properties under &apos;spring.cloud.sentinel.datasource.ds1.file.rule-type&apos; to org.springframework.cloud.alibaba.sentinel.datasource.RuleType:</span><br><span class="line"></span><br><span class="line">    Property: spring.cloud.sentinel.datasource.ds1.file.rule-type</span><br><span class="line">    Value: flow</span><br><span class="line">    Origin: class path resource [application.yml]:23:24</span><br><span class="line">    Reason: 2</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Update your application&apos;s configuration</span><br></pre></td></tr></table></figure><p><code>sentinel</code> 的配置类是 <code>SentinelProperties</code>, <code>ruleType</code> 所在类为 <code>AbstractDataSourceProperties</code>,类型为枚举 <code>RuleType</code>  </p><p>上面，没有任何异常信息，只是一个绑定错误，我还以为哪里拼写错了。<br>最后实在没办法，直接进 <code>spring</code> 处理 <code>@EnableConfigurationProperties(SentinelProperties.class)</code> 的地方  </p><p>在类 <code>ConfigurationPropertiesBindingPostProcessor</code> 的 <code>bind</code> 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Object bean, String beanName, ConfigurationProperties annotation)</span> </span>&#123;</span><br><span class="line">ResolvableType type = getBeanType(bean, beanName);</span><br><span class="line">Validated validated = getAnnotation(bean, beanName, Validated<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Annotation[] annotations = (validated != <span class="keyword">null</span>)</span><br><span class="line">? <span class="keyword">new</span> Annotation[] &#123; annotation, validated &#125;</span><br><span class="line">: <span class="keyword">new</span> Annotation[] &#123; annotation &#125;;</span><br><span class="line">Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(bean)</span><br><span class="line">.withAnnotations(annotations);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.configurationPropertiesBinder.bind(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationPropertiesBindException(beanName, bean, annotation,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以根据条件断点，然后在异常那里打印堆栈日志，发现是一个数组越界。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: <span class="number">2</span></span><br><span class="line">at java.lang.reflect.Parameter.getAnnotatedType(Parameter.java:<span class="number">237</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getParameterMetaData(AnnotationMetaDataProvider.java:<span class="number">427</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.findExecutableMetaData(AnnotationMetaDataProvider.java:<span class="number">300</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getMetaData(AnnotationMetaDataProvider.java:<span class="number">285</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getConstructorMetaData(AnnotationMetaDataProvider.java:<span class="number">266</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.retrieveBeanConfiguration(AnnotationMetaDataProvider.java:<span class="number">135</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getBeanConfiguration(AnnotationMetaDataProvider.java:<span class="number">124</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanConfigurationForHierarchy(BeanMetaDataManager.java:<span class="number">232</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.createBeanMetaData(BeanMetaDataManager.java:<span class="number">199</span>)</span><br><span class="line">at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanMetaData(BeanMetaDataManager.java:<span class="number">166</span>)</span><br><span class="line">at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:<span class="number">157</span>)</span><br><span class="line">at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:<span class="number">108</span>)</span><br></pre></td></tr></table></figure></p><p>但是。越界发生在内部，我也无法干预，为了具体定位越界到底在哪里出现，跟踪调试<br>最后定位到 <code>org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider</code>  的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ConstrainedParameter&gt; <span class="title">getParameterMetaData</span><span class="params">(Executable executable)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( executable.getParameterCount() == <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ****  这里返回的构造方法参数是 4 引起了疑惑 ****</span></span><br><span class="line">  Parameter[] parameters = executable.getParameters();</span><br><span class="line"></span><br><span class="line">  List&lt;ConstrainedParameter&gt; metaData = <span class="keyword">new</span> ArrayList&lt;&gt;( parameters.length );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( Parameter parameter : parameters ) &#123;</span><br><span class="line">    Annotation[] parameterAnnotations;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      parameterAnnotations = parameter.getAnnotations();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;</span><br><span class="line">      LOG.warn( MESSAGES.constraintOnConstructorOfNonStaticInnerClass(), ex );</span><br><span class="line">      parameterAnnotations = EMPTY_PARAMETER_ANNOTATIONS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;MetaConstraint&lt;?&gt;&gt; parameterConstraints = newHashSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( annotationProcessingOptions.areParameterConstraintsIgnoredFor( executable, i ) ) &#123;</span><br><span class="line">      Type type = ReflectionHelper.typeOf( executable, i );</span><br><span class="line">      metaData.add(</span><br><span class="line">          <span class="keyword">new</span> ConstrainedParameter(</span><br><span class="line">              ConfigurationSource.ANNOTATION,</span><br><span class="line">              executable,</span><br><span class="line">              type,</span><br><span class="line">              i,</span><br><span class="line">              parameterConstraints,</span><br><span class="line">              Collections.emptySet(),</span><br><span class="line">              CascadingMetaDataBuilder.nonCascading()</span><br><span class="line">          )</span><br><span class="line">      );</span><br><span class="line">      i++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ConstraintLocation location = ConstraintLocation.forParameter( executable, i );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( Annotation parameterAnnotation : parameterAnnotations ) &#123;</span><br><span class="line">      <span class="comment">// collect constraints if this annotation is a constraint annotation</span></span><br><span class="line">      List&lt;ConstraintDescriptorImpl&lt;?&gt;&gt; constraints = findConstraintAnnotations(</span><br><span class="line">          executable, parameterAnnotation, ElementType.PARAMETER</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">for</span> ( ConstraintDescriptorImpl&lt;?&gt; constraintDescriptorImpl : constraints ) &#123;</span><br><span class="line">        parameterConstraints.add(</span><br><span class="line">            MetaConstraints.create( typeResolutionHelper, valueExtractorManager, constraintDescriptorImpl, location )</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **** 问题出在这里  ****</span></span><br><span class="line">    AnnotatedType parameterAnnotatedType = parameter.getAnnotatedType();</span><br><span class="line"></span><br><span class="line">    Set&lt;MetaConstraint&lt;?&gt;&gt; typeArgumentsConstraints = findTypeAnnotationConstraintsForExecutableParameter( executable, i, parameterAnnotatedType );</span><br><span class="line">    CascadingMetaDataBuilder cascadingMetaData = findCascadingMetaData( executable, parameters, i, parameterAnnotatedType );</span><br><span class="line"></span><br><span class="line">    metaData.add(</span><br><span class="line">        <span class="keyword">new</span> ConstrainedParameter(</span><br><span class="line">            ConfigurationSource.ANNOTATION,</span><br><span class="line">            executable,</span><br><span class="line">            ReflectionHelper.typeOf( executable, i ),</span><br><span class="line">            i,</span><br><span class="line">            parameterConstraints,</span><br><span class="line">            typeArgumentsConstraints,</span><br><span class="line">            cascadingMetaData</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> metaData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面有两个中文注释，就是问题所在。<br>首先，第一个问题，参数是 4 引起了我的疑惑。我们看下 <code>RuleType</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RuleType &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * flow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FLOW(<span class="string">"flow"</span>, FlowRule<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/**</span></span><br><span class="line"><span class="class"> * <span class="title">degrade</span></span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line">DEGRADE("degrade", DegradeRule.class),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * param flow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PARAM_FLOW(<span class="string">"param-flow"</span>, ParamFlowRule<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">/**</span></span><br><span class="line"><span class="class"> * <span class="title">system</span></span></span><br><span class="line"><span class="class"> */</span></span><br><span class="line">SYSTEM("system", SystemRule.class),</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * authority</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHORITY(<span class="string">"authority"</span>, AuthorityRule<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * alias for &#123;<span class="doctag">@link</span> AbstractRule&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * concrete &#123;<span class="doctag">@link</span> AbstractRule&#125; class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class clazz;</span><br><span class="line"></span><br><span class="line">RuleType(String name, Class clazz) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;RuleType&gt; <span class="title">getByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Arrays.stream(RuleType.values())</span><br><span class="line">.filter(ruleType -&gt; name.equals(ruleType.getName())).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;RuleType&gt; <span class="title">getByClass</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.stream(RuleType.values())</span><br><span class="line">.filter(ruleType -&gt; clazz == ruleType.getClazz()).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只有一个构造方法，两个构造参数，为啥这里是 4 呢？<br>调试的时候可以看到 前面两个参数 ，一个是枚举的 name ,一个是 ordinal 坐标<br>说实话，以前还真没注意这个细节  </p><p>继续找问题所在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotatedType parameterAnnotatedType = parameter.getAnnotatedType();</span><br></pre></td></tr></table></figure></p><p>上面就是跑异常的地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AnnotatedType <span class="title">getAnnotatedType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// no caching for now</span></span><br><span class="line">    <span class="keyword">return</span> executable.getAnnotatedParameterTypes()[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里已经是 <code>jdk</code> 源码了<br>最后发现，问题在这里 <code>executable.getAnnotatedParameterTypes()</code> 这个方法返回的数组长度为 2<br>但是，我们可以看到，外层是在遍历 <code>executable.getParameters()</code> 这里返回的是 4 个元素，因此越界 </p><p>去获取 <code>spring-cloud-alibaba</code> 的源码，运行 <code>sentinel</code> 示例，也出现同样的问题  </p><p>写了一个测试例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">enum</span> EnumTest &#123;</span><br><span class="line"></span><br><span class="line">    A(<span class="number">0</span>, <span class="string">"A"</span>),</span><br><span class="line"></span><br><span class="line">    B(<span class="number">1</span>, <span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    EnumTest(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">enum</span> Enum2 &#123;</span><br><span class="line">    A</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">    Constructor&lt;?&gt;[] declaredConstructors = aClass.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;</span><br><span class="line">        <span class="keyword">int</span> parameterCount = constructor.getParameterCount();</span><br><span class="line">        System.out.printf(<span class="string">"parameterCount:%s\n"</span>, parameterCount);</span><br><span class="line">        <span class="keyword">int</span> length = constructor.getAnnotatedParameterTypes().length;</span><br><span class="line">        System.out.printf(<span class="string">"length:%s\n"</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        show(EnumTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"---"</span>);</span><br><span class="line">        show(Enum2<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>怀疑可能是 <code>jdk</code> 小版本的问题,目前用的 <code>jdk</code> 版本为 <code>1.8.25</code><br>因此去网上下载一个 <code>1.8.172</code> 发现没有问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.8.25    parameterCount = 4,  length = 2</span><br><span class="line">1.8.172   parameterCount = 4,  length = 4</span><br></pre></td></tr></table></figure></p><p>到此，问题定位完毕。<br>然而 <code>1.8.25</code> 是公司定的版本。<br>通常搜索查询，这个 bug 在 <code>JDK 1.8.0_40</code> 之后修复了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题起因&quot;&gt;&lt;a href=&quot;#问题起因&quot; class=&quot;headerlink&quot; title=&quot;问题起因&quot;&gt;&lt;/a&gt;问题起因&lt;/h2&gt;&lt;p&gt;在看 &lt;code&gt;sentinel&lt;/code&gt; 的时候，写了一个示例，添加以下配置&lt;br&gt;&lt;figure class=&quot;h
      
    
    </summary>
    
    
      <category term="技术笔记" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="sentinel" scheme="http://yoursite.com/tags/sentinel/"/>
    
      <category term="spring-boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
</feed>
